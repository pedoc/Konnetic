/* 
Copyright (c) 2009-2010 Konnetic Ltd.
*/
/* Change history
* 20 Jan 2010  James Wright james@konnetic.com Baseline Implementation
*/

using System;
using System.Text.RegularExpressions;

namespace Konnetic.Sip.Headers
{
    /// <summary>
    /// The <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> provides URI information for HeaderFields.
    /// </summary> 
    /// <remarks>
    /// <b>Standards: RFC3261</b>
    /// <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> .
    /// <para/>The Call-ID header field acts as a unique identifier to group together a series of messages. It must be the same for all requests and responses sent by either client in a dialog. It SHOULD be the same in each registration from a client. 
    /// <para/>
    /// In a new request created by a client outside of any dialog, the Call-ID header field must be selected by the client as a globally unique identifier over space and time unless overridden by method-specific behavior. All SIP clients must have a means to guarantee that the Call-ID header fields they produce will not be inadvertently generated by any other client. Note that when requests are retried after certain failure responses that solicit an amendment to a request (for example, a challenge for authentication), these retried requests are not considered new requests, and therefore do not need new Call-ID header fields.
    /// <para/> 
    /// <b>RFC 3261 Syntax:</b> 
    /// <table>  
    /// <tr><td style="border-bottom:none">Call-ID = </td><td style="border-bottom:none">word [ "@" word ]</td></tr>
    /// <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
    /// </table>
    /// <example>
    /// <list type="bullet">
    /// <item>Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com</item> 
    /// </list> 
    /// </example>
    /// </remarks>
    /// <seealso cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> 
    /// <seealso cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> 
    /// <seealso cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/>
    public abstract class CallIdHeaderFieldBase : HeaderFieldBase
    {
        #region Fields

        /// <summary>
        /// 
        /// </summary>
        private string _callId;

        #endregion Fields

        #region Properties

        /// <summary>
        /// Gets or sets the call id.
        /// </summary>
        /// <value>The call id.</value>
        /// <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="CallId"/> property is null.</exception>
        public string CallId
        {
            get { return _callId; }
            set
                {
                PropertyVerifier.ThrowOnNullArgument(value, "CallId");

                value = value.Trim();
                if(!string.IsNullOrEmpty(value) && !Syntax.IsWordWithAtSign(value))
                    {
                    throw new SipFormatException("Invalid characters in CallId.");
                    }
                _callId = value;
                }
        }

        #endregion Properties

        #region Constructors

		/// <summary>
		/// Initializes a new instance of the <see cref="CallIdHeaderFieldBase"/> class.
		/// </summary>
		/// <remarks>The default constructor.</remarks>
		/// <remarks>Defaults: 
		/// <list type="bullet">
		/// <item><c>CallId</c> is set to a new valid call id.</item> 
		/// </list> </remarks>
		/// <overloads>
		/// <summary>The method has one overload.</summary>
		/// </overloads>
        protected CallIdHeaderFieldBase()
            : base()
        {
		RecreateCallId();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallIdHeaderField"/> class.
        /// </summary>
        /// <param name="callID">A CallId to initalise the value to.</param>
        /// <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="callId"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        protected CallIdHeaderFieldBase(string callId)
            : this()
        {
            PropertyVerifier.ThrowOnNullArgument(callId, "callId");
            CallId = callId;
        }

 

        #endregion Constructors

        #region Methods

 
        /// <summary>
        /// Creates a new CallId. 
        /// </summary>
        /// <returns>A cryptographically random string.</returns>
        /// <threadsafety static="true" instance="false" />
        public static string NewCallId()
        {
            return SipGuid.NewSipGuid();
        }

        /// <summary>
        /// Creates a new CallId. 
        /// </summary>
        /// <param name="host">A host (for example konnetic.com).</param>
        /// <returns>A cryptographically random string, suffixed by the host string.</returns>
        /// <threadsafety static="true" instance="false" />
        /// <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="host"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        public static string NewCallId(string host)
        {
        PropertyVerifier.ThrowOnNullArgument(host, "host");
            return SipGuid.NewSipGuid(string.Empty, host);
        }

        /// <summary>
        /// Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> object.</summary>
        /// <remarks>
        /// All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
        /// </remarks>
        /// <param name="other">The <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> to compare to this instance.</param>
        /// <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
        /// <overloads>
        /// <summary>This method is overloaded.</summary>
        /// <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
        /// </overloads>  
        /// <threadsafety static="true" instance="false" />
        [return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.U1)]
        public bool Equals(CallIdHeaderFieldBase other)
        {
            if((object)other == null)
                {
                return false;
                }
            return base.Equals((HeaderFieldBase)other) && CallId.Equals(other.CallId, StringComparison.OrdinalIgnoreCase);
        }
        /// <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
        /// </summary>
        /// <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
        /// All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
        /// </remarks>
        /// <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
        /// <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
        /// <overloads>
        /// <summary>This method is overloaded.</summary>
        /// <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
        /// </overloads>  
        /// <threadsafety static="true" instance="false" /> 
        [return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.U1)]
        public override bool Equals(HeaderFieldBase other)
        {
            return Equals((object)other);
        }



        /// <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
        /// </summary>
        /// <remarks>This method overrides the <c>equals</c> method in <see cref="System.Object"/>. 
        /// All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
        /// </remarks>
        /// <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
        /// <returns><c>true</c> if <paramref name="obj" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
        /// <overloads>
        /// <summary>This method is overloaded.</summary>
        /// <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
        /// </overloads> 
        /// <threadsafety static="true" instance="false" />
        [return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.U1)]
        public override bool Equals(object obj)
        {
            if(obj == null)
                {
                return false;
                }

            CallIdHeaderFieldBase p1 = obj as CallIdHeaderFieldBase;
            if((object)p1 == null)
                {
                    return false;
                }
            else
                {
                return this.Equals(p1);
                }
        }
        /// <summary>
        /// Validates this instance against the standard. Indicated whether it reaches minimum compliance.
        /// </summary>
        /// <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
        /// <returns>
        /// 	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
        /// </returns>
        /// <threadsafety static="true" instance="false" />
        [return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.U1)]
        public override bool IsValid()
        {
            return base.IsValid() && !string.IsNullOrEmpty(CallId);
        }

        /// <summary>
        /// Parses string representation of the HeaderField.
        /// </summary>
        /// <remarks>  
        /// <b>RFC 3261 Syntax:</b> 
        /// <table>  
        /// <tr><td style="border-bottom:none">Call-ID = </td><td style="border-bottom:none">word [ "@" word ]</td></tr>
        /// <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
        /// </table>
        /// <example>
        /// <list type="bullet">
        /// <item>Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com</item> 
        /// </list> 
        /// </example>
        /// </remarks>
        /// <param name="value">The HeaderField string to parse.</param>
        /// <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
        /// <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
        /// <threadsafety static="true" instance="false" />
        public override void Parse(string value)
        {
            if(value != null)
                {
                CallId = string.Empty;

                if(!string.IsNullOrEmpty(value))
                    {
                    Regex _callID = new Regex(@"(?<=^\s*)?[^\s]+", RegexOptions.Compiled | RegexOptions.IgnoreCase );
                    Match m = _callID.Match(value);
                    if(m != null)
                        {
                        if(!string.IsNullOrEmpty(m.Value))
                            {
							try{
							CallId = m.Value;
							}
							catch(SipException ex)
								{
								throw new SipParseException("CallId", SR.ParseExceptionMessage(value), ex);
								}
							catch(Exception ex)
                                {
                                throw new SipParseException(SR.GetString(SR.GeneralParseException, m.Value, "CallId"), ex);  
								}
                            }
                        }
                    }
                }
        }

        /// <summary>
        /// Regenerates the CallId for this instance.
        /// </summary>
        /// <remarks>Uses the <see cref="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.NewCallId"/> method.</remarks>
        /// <threadsafety static="true" instance="false" />
        public void RecreateCallId()
        {
            RecreateCallId("");
        }

        /// <summary>
        /// Regenerates the CallId for this instance suffixed by the host.
        /// </summary>
        /// <remarks>Uses the <see cref="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.NewCallId"/> method.</remarks>
        /// <param name="host">A host (for example konnetic.com).</param>
        /// <threadsafety static="true" instance="false" />
        public void RecreateCallId(string host)
        {
            CallId = CallIdHeaderField.NewCallId(host);
        }

        /// <summary>
        /// Gets a string representation of the HeaderField value. The HeaderField name is excluded.
        /// </summary>
        /// <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
        /// <returns>String representation of the HeaderField value</returns>
        /// <threadsafety static="true" instance="false" />
        public override string GetStringValue()
        {
            return CallId;
        }

        #endregion Methods
    }
}