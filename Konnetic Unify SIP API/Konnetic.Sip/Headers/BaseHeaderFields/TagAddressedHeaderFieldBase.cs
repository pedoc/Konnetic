/* 
Copyright (c) 2009-2010 Konnetic Ltd.
*/
/* Change history
* 20 Jan 2010  James Wright james@konnetic.com Baseline Implementation
*/

using System;
using System.ComponentModel;
using System.Text;
using System.Text.RegularExpressions;

namespace Konnetic.Sip.Headers
{
    /// <summary> 
    /// The <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> provides the Tag parameter to header fields.
    /// </summary>
    /// <remarks>
    /// <b>Standards: RFC3261, RFC2616</b>
    /// <para>The tag parameter is used in the To and From header fields of SIP messages. It serves as a general mechanism to identify a dialog, which is the combination of the Call-ID along with two tags, one from each participant in the dialog. When a client sends a request outside of a dialog, it contains a From tag only, providing "half" of the dialog ID. The dialog is completed from the response(s), each of which contributes the second half in the To header field. The forking of SIP requests means that multiple dialogs can be established from a single request. This also explains the need for the two-sided dialog identifier; without a contribution from the recipients, the originator could not disambiguate the multiple dialogs established from a single request.</para> 
    /// <para>When a tag is generated by a client for insertion into a request or response, it MUST be globally unique and cryptographically random with at least 32 bits of randomness. A property of this selection requirement is that a client will place a different tag into the From header of an INVITE than it would place into the To header of the response to the same INVITE. This is needed in order for a client to invite itself to a session, a common case for "hairpinning" of calls in PSTN gateways. Similarly, two INVITEs for different calls will have different From tags, and two responses for different calls will have different To tags.</para>
    /// <para>Besides the requirement for global uniqueness, the algorithm for generating a tag is implementation-specific. Tags are helpful in fault tolerant systems, where a dialog is to be recovered on an alternate server after a failure. A server can select the tag in such a way that a backup can recognize a request as part of a dialog on the failed server, and therefore determine that it should attempt to recover the dialog and any other state associated with it.</para>
    /// <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> headers.  
    /// <b>RFC 3261 Syntax:</b> 
    /// <table >  
    /// <tr><td style="border-bottom:none">tag-param = </td><td style="border-bottom:none">"tag" EQUAL token</td></tr>  
    /// <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>  
    /// </table>  
    /// <example>
    /// <list type="bullet">
    /// <item>From: sip:+12125551212@server.phone2net.com;tag=887s</item> 
    /// </list>  
    /// </example>
    /// </remarks> 
    /// <seealso cref="T:Konnetic.Sip.Headers.FromHeaderField"/> 
    /// <seealso cref="T:Konnetic.Sip.Headers.ToHeaderField"/> 
    public abstract class TagAddressedHeaderFieldBase : AddressedHeaderFieldBase
    {
        #region Properties

        /// <summary>
        /// Gets or sets the tag.
        /// </summary>
    /// <value>The tag.</value>
    /// <exception cref="ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Tag"/>.</exception> 
    /// <exception cref="SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
 
        public string Tag
        {
            get {
            SipParameter sp = HeaderParameters["tag"];

            if((object)sp == null)
                {
                return string.Empty;
                }
                return sp.Value; }
            set
            {
            PropertyVerifier.ThrowOnNullArgument(value, "Tag");
            value = value.Trim();
            PropertyVerifier.ThrowOnInvalidToken(value, "Tag");
            if(string.IsNullOrEmpty(value))
                {
                RemoveParameter("tag");
                }
            else
                {
                HeaderParameters.Set("tag", value);
                }

            }
        }

        #endregion Properties

        #region Constructors
		/// <summary>
		/// Initializes a new instance of the <see cref="TagAddressedHeaderFieldBase"/> class.
		/// </summary>
		/// <remarks>The default constructor.</remarks>
		/// <overloads>
		/// <summary>The method has six overloads.</summary>
		/// </overloads>
		protected TagAddressedHeaderFieldBase()
			: base()
            {
            Init();
			}
        /// <summary>
        /// Initializes a new instance of the <see cref="TagAddressedHeaderFieldBase"/> class.
        /// </summary>
        /// <param name="uri"></param>
        protected TagAddressedHeaderFieldBase(string uri)
            : this(new SipUri(uri))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagAddressedHeaderFieldBase"/> class.
        /// </summary>
        /// <param name="uri">The URI.</param>
        protected TagAddressedHeaderFieldBase(SipUri uri)
            : this(uri, string.Empty)
        {
        }

         /// <summary>
        /// Initializes a new instance of the <see cref="TagAddressedHeaderFieldBase"/> class.
        /// </summary>
        /// <param name="uri">The URI.</param>
        /// <param name="displayName">The display name.</param>
        protected TagAddressedHeaderFieldBase(SipUri uri, string displayName)
            : base(uri,displayName)
            {
            Init();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagAddressedHeaderFieldBase"/> class.
        /// </summary>
        /// <param name="uri">The URI.</param>
        /// <param name="displayName">The display name.</param>
        protected TagAddressedHeaderFieldBase(SipUri uri, string displayName, string tag)
            : base(uri, displayName)
        {
            PropertyVerifier.ThrowOnNullArgument(tag, "tag");
            Init();
            Tag = tag;
        }

        private void Init()
            {
            RegisterKnownParameter("tag");
            }

        #endregion Constructors

        #region Methods
        /// <summary>
        /// Parses string representation of the HeaderField.
        /// </summary>
        /// <remarks>  
        /// </remarks>
        /// <param name="value">The HeaderField string to parse.</param>
        /// <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
        /// <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
        /// <threadsafety static="true" instance="false" />
        public override void Parse(string value)
            {
            Tag = string.Empty;
            
            base.Parse(value);
            if(!string.IsNullOrEmpty(value))
                {
                Regex _tagRegex = new Regex(@"(?<=(.|\n)*tag\s*=\s*)[\w-.!%_*+`'~]+", RegexOptions.Compiled | RegexOptions.IgnoreCase);

                Match m = _tagRegex.Match(value);
                if(m != null) 
                        {
                        if(!string.IsNullOrEmpty(m.Value))
                            {
                            try
                                {
                                Tag = m.Value.Trim();

                                }
                            catch(SipException ex)
                                {
                                throw new SipParseException("Tag", SR.ParseExceptionMessage(value), ex);
                                }
                            catch(Exception ex)
                                {
                                throw new SipParseException(SR.GetString(SR.GeneralParseException, m.Value, "Tag"), ex);
                                }
                            }
                        }

                }
            }

        /// <summary>
        /// Creates a new Tag. 
        /// </summary>
        /// <returns>A random string.</returns>
        public static string NewTag()
        {
            return SipGuid.NewSipGuid();
        }

        /// <summary>
        /// Regenerates the Tag for this instance.
        /// </summary> 
        public void RecreateTag()
        {
            Tag = TagAddressedHeaderFieldBase.NewTag();
        }

        #endregion Methods
    }
}