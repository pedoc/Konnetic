<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Konnetic.Sip</name>
    </assembly>
    <members>
        <member name="T:Konnetic.Sip.Headers.CallIdHeaderField">
            <summary>
            The Call-ID HeaderField uniquely identifies a particular invitation or all registrations of a particular client.
            </summary>
            <remarks>  
            <b>Standards: RFC3261</b>
            <para/>
             A single multimedia conference can give rise to several calls with different Call-IDs, for example, if a user invites a single individual several times to the same (long-running) conference. Call-IDs are case-sensitive and are simply compared byte-by-byte.
             <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Call-ID" / "i" ) ":" word [ "@" word ]</td></tr>
            <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
            </table>
            <para/>
            <note type="implementnotes">The compact form of the Call-ID HeaderField is "i".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@biloxi.com</item>
            <item>i:f81d4fae-7dec-11d0-a765-00a0c91e6bf6@192.0.2.4</item>
            </list> 
            </example>
            </remarks>  
        </member>
        <member name="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase">
            <summary>
            The <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> provides URI information for HeaderFields.
            </summary> 
            <remarks>
            <b>Standards: RFC3261</b>
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> .
            <para/>The Call-ID header field acts as a unique identifier to group together a series of messages. It must be the same for all requests and responses sent by either client in a dialog. It SHOULD be the same in each registration from a client. 
            <para/>
            In a new request created by a client outside of any dialog, the Call-ID header field must be selected by the client as a globally unique identifier over space and time unless overridden by method-specific behavior. All SIP clients must have a means to guarantee that the Call-ID header fields they produce will not be inadvertently generated by any other client. Note that when requests are retried after certain failure responses that solicit an amendment to a request (for example, a challenge for authentication), these retried requests are not considered new requests, and therefore do not need new Call-ID header fields.
            <para/> 
            <b>RFC 3261 Syntax:</b> 
            <table>  
            <tr><td style="border-bottom:none">Call-ID = </td><td style="border-bottom:none">word [ "@" word ]</td></tr>
            <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
            </table>
            <example>
            <list type="bullet">
            <item>Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com</item> 
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> 
            <seealso cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/>
        </member>
        <member name="T:Konnetic.Sip.Headers.HeaderFieldBase">
            <summary>
            The abstract bas class for all HeaderFields.
            </summary> 
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldBase._multipleAllowed">
            <summary>
            Represents whether the field can have multiple values in the header.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldBase._compactName">
            <summary>
            Represents the short field name. 
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldBase._name">
            <summary>
            Represents the field name. 
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.op_LessThan(Konnetic.Sip.Headers.HeaderFieldBase,Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="h1">The first <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <param name="h2">The second <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <returns>The result of the less-than operator.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.op_GreaterThan(Konnetic.Sip.Headers.HeaderFieldBase,Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="h1">The first <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <param name="h2">The second <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <returns>The result of the greater-than operator.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.op_Inequality(Konnetic.Sip.Headers.HeaderFieldBase,Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="h1">The first <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <param name="h2">The second <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <returns>The result of the inequality operator.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.op_Equality(Konnetic.Sip.Headers.HeaderFieldBase,Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="h1">The first <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <param name="h2">The second <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</param>
            <returns>The result of the equality operator.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>This is an abstract method. Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.CompareTo(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.GetBytes">
            <summary>
            Returns the representation of the HeaderField as a byte array. Encoding is UTF8.
            </summary>
            <returns>A byte array that represents this instance.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.GetChars">
            <summary>
            Returns the representation of the HeaderField as a char array.
            </summary>
            <returns>A char array that represents this instance.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.System#ICloneable#Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member is virtual.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>This is an abstract method.
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.ToUriString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a format suitable for URIs.
            </summary>        
            <remarks>The string is escaped.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.</returns>
            <threadsafety static="true" instance="false"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.RemoveFieldName(System.String@,System.String,System.String)">
            <summary>
            Removes the name of the field (with the optional colon).
            </summary>
            <param name="value">The value.</param>
            <param name="longName">The long name.</param>
            <param name="shortName">The short name.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This is an abstract method.</remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldBase.GetString(System.Boolean)">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is included.
            </summary>
            <param name="useCompactForm">if set to <c>true</c> if the compact form of each name should be used.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldBase.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether multiple fields are allowed in the header block.
            </summary>
            <value><c>true</c> if [multiple allowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldBase.CompactName">
            <summary>
            The short form of the name.
            </summary>
            <remarks>SIP provides a mechanism to represent common header field names in an abbreviated form. This may be useful when messages would otherwise become too large to be carried on the transport available to it (exceeding the maximum transmission unit (MTU) when using UDP, for example). A compact form may be substituted for the longer form of a header field name at any time without changing the semantics of the message. A header field name may appear in both long and short forms within the same message. Implementations must accept both the long and short forms of each header name.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="CompactName"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown on detection of illegal characters being applied to the name. HeaderField names can only contain "token" values.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldBase.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <remarks>Field names are case-insensitive.</remarks>
            <value>The name of the field.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="CompactName"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown on detection of illegal characters being applied to the name. HeaderField names can only contain "token" values.</exception> 
        </member>
        <member name="F:Konnetic.Sip.Headers.CallIdHeaderFieldBase._callId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <remarks>Defaults: 
            <list type="bullet">
            <item><c>CallId</c> is set to a new valid call id.</item> 
            </list> </remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> class.
            </summary>
            <param name="callID">A CallId to initalise the value to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="callId"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.NewCallId">
            <summary>
            Creates a new CallId. 
            </summary>
            <returns>A cryptographically random string.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.NewCallId(System.String)">
            <summary>
            Creates a new CallId. 
            </summary>
            <param name="host">A host (for example konnetic.com).</param>
            <returns>A cryptographically random string, suffixed by the host string.</returns>
            <threadsafety static="true" instance="false" />
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="host"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.Equals(Konnetic.Sip.Headers.CallIdHeaderFieldBase)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.CallIdHeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table>  
            <tr><td style="border-bottom:none">Call-ID = </td><td style="border-bottom:none">word [ "@" word ]</td></tr>
            <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
            </table>
            <example>
            <list type="bullet">
            <item>Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.RecreateCallId">
            <summary>
            Regenerates the CallId for this instance.
            </summary>
            <remarks>Uses the <see cref="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.NewCallId"/> method.</remarks>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.RecreateCallId(System.String)">
            <summary>
            Regenerates the CallId for this instance suffixed by the host.
            </summary>
            <remarks>Uses the <see cref="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.NewCallId"/> method.</remarks>
            <param name="host">A host (for example konnetic.com).</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderFieldBase.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.CallIdHeaderFieldBase.CallId">
            <summary>
            Gets or sets the call id.
            </summary>
            <value>The call id.</value>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="CallId"/> property is null.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <remarks>Defaults: 
            <list type="bullet">
            <item><c>CallId</c> is set to a new valid call id.</item> 
            </list> </remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> class.
            </summary>
            <param name="callId">A CallId to initalise the value to.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.CallIdHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.op_Explicit(Konnetic.Sip.Headers.CallIdHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.CallIdHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallIdHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Call-ID" / "i" ) ":" word [ "@" word ]</td></tr>
            <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
            </table>
            <para/>
            <note type="implementnotes">The compact form of the Call-ID HeaderField is "i".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@biloxi.com</item>
            <item>i:f81d4fae-7dec-11d0-a765-00a0c91e6bf6@192.0.2.4</item>
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.ByteConvertException">
            <summary>
              Looks up a localized string similar to Cannot convert the string value ({0}) to a byte for field value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.DuplicateHeaderParameter">
            <summary>
              Looks up a localized string similar to Parameter ({0}) already exists as a header field parameter..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.EmptyString">
            <summary>
              Looks up a localized string similar to The string argument cannot be null or zero length..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.FloatConvertException">
            <summary>
              Looks up a localized string similar to Cannot convert the string value ({0}) to a float for field value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.FromHeaderFieldHiddenDisplayName">
            <summary>
              Looks up a localized string similar to &quot;Anonymous&quot;.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.GeneralParseException">
            <summary>
              Looks up a localized string similar to An exception occured whilst parsing value ({0}) for for field value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.HeaderFieldDuplicate">
            <summary>
              Looks up a localized string similar to Cannot add duplicate field (&apos;{0}&apos;) to HeaderFieldCollection. Use a group instead..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.HiddenAddress">
            <summary>
              Looks up a localized string similar to &quot;Anonymous&quot; &lt;sip:unknown@private&gt;.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.IllegalParameterNameException">
            <summary>
              Looks up a localized string similar to Illegal characters found in parameter name..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.IntegerConvertException">
            <summary>
              Looks up a localized string similar to Cannot convert the string value ({0}) to an integer for field value&apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.InvalidHostString">
            <summary>
              Looks up a localized string similar to The value {0} must be a valid host. .
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.InvalidIPAddressString">
            <summary>
              Looks up a localized string similar to The value {0} must be a valid IPAddress..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.InvalidPasswordString">
            <summary>
              Looks up a localized string similar to Password parameter contains illegal characters. Check for &apos;@&apos;,&apos;?&apos;,&apos;/&apos;,&apos;;&apos; and &apos;:&apos; characters..
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Strings.InvalidQuotedTokenWithCommaString" -->
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Strings.InvalidTokenString" -->
        <member name="P:Konnetic.Sip.Strings.InvalidUsernameString">
            <summary>
              Looks up a localized string similar to Username contains illegal characters. Ensure the username does not contain an unescaped &apos;:&apos; or &apos;@&apos; character..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.NullCollectionMember">
            <summary>
              Looks up a localized string similar to The collection supplied should not contain null member..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeByte">
            <summary>
              Looks up a localized string similar to The value {0} is out of the expected range {1}..{2}..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeDouble">
            <summary>
              Looks up a localized string similar to The value {0} is out of the expected range {1}..{2}..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeException">
            <summary>
              Looks up a localized string similar to Value ({0}) is too large  for field value &apos;{1}&apos; which expects values between {2} and {3}..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeFloat">
            <summary>
              Looks up a localized string similar to The value {0} is out of the expected range {1}..{2}..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeLong">
            <summary>
              Looks up a localized string similar to The value {0} is out of the expected range {1}..{2}..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeParameter">
            <summary>
              Looks up a localized string similar to Parameter {0} out of range..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OutOfRangeString">
            <summary>
              Looks up a localized string similar to The length for parameter {0} is out of the expected range {1}..{2}..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.OverflowException">
            <summary>
              Looks up a localized string similar to Value ({0}) is too large  for field value &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.ParseException">
            <summary>
              Looks up a localized string similar to The string was not correctly formatted to parse ({0})..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.PropertyParseException">
            <summary>
              Looks up a localized string similar to An exception occured when parsing property &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.SecureHiddenAddress">
            <summary>
              Looks up a localized string similar to &quot;Anonymous&quot; &lt;sips:unknown@private&gt;.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning0">
            <summary>
              Looks up a localized string similar to Unknown Code..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning300">
            <summary>
              Looks up a localized string similar to One or more network protocols contained in the session description are not available..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning301">
            <summary>
              Looks up a localized string similar to One or more network address formats contained in the session description are not available..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning302">
            <summary>
              Looks up a localized string similar to One or more transport protocols described in the session description are not available..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning303">
            <summary>
              Looks up a localized string similar to One or more bandwidth measurement units contained in the session description were not understood..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning304">
            <summary>
              Looks up a localized string similar to One or more media types contained in the session description are not available..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning305">
            <summary>
              Looks up a localized string similar to One or more media formats contained in the session description are not available..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning306">
            <summary>
              Looks up a localized string similar to One or more of the media attributes in the session description are not supported..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning307">
            <summary>
              Looks up a localized string similar to A parameter other than those listed above was not understood..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning330">
            <summary>
              Looks up a localized string similar to The site where the user is located does not support multicast..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning331">
            <summary>
              Looks up a localized string similar to The site where the user is located does not support unicast communication..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning370">
            <summary>
              Looks up a localized string similar to The bandwidth specified in the session description or defined by the media exceeds that known to be available..
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Strings.Warning399">
            <summary>
              Looks up a localized string similar to The warning text can include arbitrary information to be presented to a human user or logged..
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.ViaHeaderField">
            <summary>The Via HeaderField indicates the path taken by the request so far and indicates the path that should be followed in routing responses.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616, RFC2543</b>
            <para/>
            The branch ID parameter in the Via HeaderField values serves as a transaction identifier, and is used by proxies to detect loops. A Via HeaderField value contains the transport protocol used to send the message, the client's host name or network address, and possibly the port number at which it wishes to receive responses. A Via HeaderField value can also contain parameters such as maddr, ttl, received, and branch, whose meaning and use are described in other sections. For implementations compliant to the SIP specification, the value of the branch parameter must start with the magic cookie "z9hG4bK".
            <para/>
            Transport protocols defined here are UDP, TCP, TLS, and SCTP. TLS means TLS over TCP. When a request is sent to a SIPS URI, the protocol still indicates "SIP", and the transport protocol is TLS.
            <para/>
            The SIP specification mandates that the branch parameter be present in all requests. 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Via" / "v" ) ":" via-parm *("," via-parm)</td></tr> 
            <tr><td style="border-bottom:none">via-parm = </td><td style="border-bottom:none">sent-protocol WHITESPACE sent-by *( SEMI via-params )</td></tr> 
            <tr><td style="border-bottom:none">via-params = </td><td style="border-bottom:none">via-ttl / via-maddr / via-received / via-branch / via-extension</td></tr> 
            <tr><td style="border-bottom:none">via-ttl = </td><td style="border-bottom:none">"ttl" EQUAL 1*3DIGIT ; 0 to 255</td></tr> 
            <tr><td style="border-bottom:none">via-maddr = </td><td style="border-bottom:none">"maddr" EQUAL host</td></tr>
            <tr><td style="border-bottom:none">via-received = </td><td style="border-bottom:none">"received" EQUAL (IPv4address / IPv6address)</td></tr>
            <tr><td style="border-bottom:none">via-branch = </td><td style="border-bottom:none">"branch" EQUAL token</td></tr>
            <tr><td style="border-bottom:none">via-extension = </td><td style="border-bottom:none">generic-param</td></tr>
            <tr><td style="border-bottom:none">sent-protocol = </td><td style="border-bottom:none">protocol-name SLASH protocol-version SLASH transport</td></tr>
            <tr><td style="border-bottom:none">protocol-name = </td><td style="border-bottom:none">"SIP" / token</td></tr>
            <tr><td style="border-bottom:none">protocol-version = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">transport = </td><td style="border-bottom:none">"UDP" / "TCP" / "TLS" / "SCTP" / other-transport</td></tr>
            <tr><td style="border-bottom:none">sent-by = </td><td style="border-bottom:none">host [ COLON port ]</td></tr> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Via HeaderField is "v".</note> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            In this example, the message originated from a multi-homed host with two addresses, 192.0.2.1 and 192.0.2.207. The sender guessed wrong as to which network interface would be used. Erlang.bell-telephone.com noticed the mismatch and added a parameter to the previous hop's Via HeaderField value, containing the address that the packet actually came from.
            <list type="bullet">
            <item>Via: SIP/2.0/UDP erlang.bell-telephone.com:5060;branch=z9hG4bK87asdks7</item> 
            <item>Via: SIP/2.0/UDP 192.0.2.1:5060 ;received=192.0.2.207;branch=z9hG4bK77asjd</item> 
            </list> 
            <para/>
            The host or network address and port number are not required to follow the SIP URI syntax. Specifically, WHITESPACE on either side of the ":" or "/" is allowed, as shown here: 
            <list type="bullet">
            <item>Via: SIP / 2.0 / UDP first.example.com: 4000;ttl=16;maddr=224.2.0.1 ;branch=z9hG4bKa7c6a8dlze.1</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase" -->
        <member name="F:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase._includeLeadingSeperatorInOutput">
            <summary>
            Indicate whether the type should include a leading seperator in output.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase._allowGenericParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase._knownHeaderRegister">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase._genericParameters">
            <summary>
            Represents the field's parameter.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase._headerParameters">
            <summary>
            Represents the field's parameter.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/> class.
            </summary>
            <param name="seperator">The seperator.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.Equals(Konnetic.Sip.Headers.ParamatizedHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.Parse(System.String)" -->
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets the string value no params.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.CopyParametersTo(Konnetic.Sip.Headers.ParamatizedHeaderFieldBase)">
            <summary>
            Copies the contents of the collection to the <paramref name="parameters"/> of the <see cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/>.
            </summary>
            <param name="parameters">A <see cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/> to populate.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.UnRegisterKnownParameter(System.String)">
            <summary>
            Unregisters a name parameter.
            </summary>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameterName"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="parameterName"/>.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.RegisterKnownParameter(System.String)">
            <summary>
            Registers a parameter name as a known header parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output. Derived types should register known parameters before adding generic parameters.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameterName"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="parameterName"/>.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.RemoveParameter(System.String)">
            <summary>
            Removes the parameter (header or generic) from the parameter collection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameterName"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="parameterName"/>.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.RemoveParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Removes the parameter (header or generic) from the parameter collection.
            </summary>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <param name="parameter">The parameter to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameter"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipDuplicateItemException">Thrown when attempting to remove a Generic parameter that matches a registered known parameter.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.ClearParameters">
            <summary>
            Clears the header and generic parameters.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.InternalAddGenericParameter(System.Int32,System.String,System.String)">
            <summary>
            Adds a generic parameter at the specified index.
            </summary>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <param name="index">The index where to insert the new parameter.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param> 
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ]</td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="value"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when <see cref="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.AllowGenericParameters"/> is set to false.</exception>
            <exception cref="T:Konnetic.Sip.SipOutOfRangeException">Is raised when <paramref value="index"/> is beyond the collection's bounds.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.InternalAddGenericParameter(System.String,System.String)">
            <summary>
            Adds a generic parameter.
            </summary>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ]</td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="value"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when <see cref="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.AllowGenericParameters"/> is set to false.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.InternalAddGenericParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds a generic parameter.
            </summary>
            <param name="parameter">The parameter to add.</param>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ]</td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameter"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipDuplicateItemException">Thrown when attempting to add a Generic parameter that matches a registered known parameter.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.InternalAddGenericParameter(System.Int32,Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds a generic parameter at the index specified.
            </summary>
            <param name="parameter">The parameter to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameter"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipDuplicateItemException">Thrown when attempting to add a Generic parameter that matches a registered known parameter.</exception>
            <threadsafety static="true" instance="false"/>
            <remarks>Known parameters are those parameters specified in the specification. They are seperate from Generic parameters which are unknown but allowed. Known parameters are rendered first in any output.</remarks>
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ]</td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameter"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipOutOfRangeException">Is raise when the <paramref name="index"/> argument is out of the collection's bounds.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when <see cref="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.AllowGenericParameters"/> is set to false.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.AllowGenericParameters">
            <summary>
            Gets or sets a value indicating whether the type allow generic parameters.
            </summary>
            <value>
            	<c>true</c> if the type allows generic parameters; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.IncludeLeadingSeperatorInOutput">
            <summary>
            Gets or sets a value indicating whether the leading seperator is included.
            </summary>
            <value>
            	<c>true</c> if we include the leading seperator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.HasParameters">
            <summary>
            Gets a value indicating whether this instance has a parameter.
            </summary>
            <value>
            	<c>true</c> if this instance has a parameter; otherwise, <c>false</c>.
            </value> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.HeaderParameters">
            <summary>
            Gets or sets the entity parameters.
            </summary> 
            <value>A <see cref="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.HeaderParameters"/> field parameter.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.InternalGenericParameters">
            <summary>
            Gets the generic parameters.
            </summary>
            <value>A <see cref="P:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase.InternalGenericParameters"/> field parameter.</value>
        </member>
        <member name="F:Konnetic.Sip.Headers.ViaHeaderField.BRANCH_MAGIC_COOKIE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ViaHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ViaHeaderField.ShortName">
            <summary>
            The short form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ViaHeaderField._transport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ViaHeaderField._sentBy">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <remarks>Defaults: 
            <list type="bullet">
            <item><c>ProtocolName</c> is set to SIP.</item>
            <item><c>ProtocolVersion</c> is set to 2.0.</item>
            <item><c>Transport</c> is set to TCP.</item>
            <item><c>Branch</c> is set to a new valid branch value.</item>
            </list> </remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/> class.
            </summary>
            <param name="branch">The branch.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ViaHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.op_Explicit(Konnetic.Sip.Headers.ViaHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.NewBranch">
            <summary>
            News the branch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.Equals(Konnetic.Sip.Headers.ViaHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.ViaHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Via" / "v" ) ":" via-parm *("," via-parm)</td></tr> 
            <tr><td style="border-bottom:none">via-parm = </td><td style="border-bottom:none">sent-protocol WHITESPACE sent-by *( SEMI via-params )</td></tr> 
            <tr><td style="border-bottom:none">via-params = </td><td style="border-bottom:none">via-ttl / via-maddr / via-received / via-branch / via-extension</td></tr> 
            <tr><td style="border-bottom:none">via-ttl = </td><td style="border-bottom:none">"ttl" EQUAL 1*3DIGIT ; 0 to 255</td></tr> 
            <tr><td style="border-bottom:none">via-maddr = </td><td style="border-bottom:none">"maddr" EQUAL host</td></tr>
            <tr><td style="border-bottom:none">via-received = </td><td style="border-bottom:none">"received" EQUAL (IPv4address / IPv6address)</td></tr>
            <tr><td style="border-bottom:none">via-branch = </td><td style="border-bottom:none">"branch" EQUAL token</td></tr>
            <tr><td style="border-bottom:none">via-extension = </td><td style="border-bottom:none">generic-param</td></tr>
            <tr><td style="border-bottom:none">sent-protocol = </td><td style="border-bottom:none">protocol-name SLASH protocol-version SLASH transport</td></tr>
            <tr><td style="border-bottom:none">protocol-name = </td><td style="border-bottom:none">"SIP" / token</td></tr>
            <tr><td style="border-bottom:none">protocol-version = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">transport = </td><td style="border-bottom:none">"UDP" / "TCP" / "TLS" / "SCTP" / other-transport</td></tr>
            <tr><td style="border-bottom:none">sent-by = </td><td style="border-bottom:none">host [ COLON port ]</td></tr> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Via HeaderField is "v".</note> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            In this example, the message originated from a multi-homed host with two addresses, 192.0.2.1 and 192.0.2.207. The sender guessed wrong as to which network interface would be used. Erlang.bell-telephone.com noticed the mismatch and added a parameter to the previous hop's Via HeaderField value, containing the address that the packet actually came from.
            <list type="bullet">
            <item>Via: SIP/2.0/UDP erlang.bell-telephone.com:5060;branch=z9hG4bK87asdks7</item> 
            <item>Via: SIP/2.0/UDP 192.0.2.1:5060 ;received=192.0.2.207;branch=z9hG4bK77asjd</item> 
            </list> 
            <para/>
            The host or network address and port number are not required to follow the SIP URI syntax. Specifically, WHITESPACE on either side of the ":" or "/" is allowed, as shown here: 
            <list type="bullet">
            <item>Via: SIP / 2.0 / UDP first.example.com: 4000;ttl=16;maddr=224.2.0.1 ;branch=z9hG4bKa7c6a8dlze.1</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.RecreateBranch">
            <summary>
            Recreates the branch.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ViaHeaderField.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.ViaHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.Branch">
            <summary>
            Gets or sets the branch.
            </summary>
            <value>The branch.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Branch"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.MulticastAddress">
            <summary>
            Gets or sets the multicast address.
            </summary>
            <value>The multicast address.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="MulticastAddress"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add characters not consistent with a host string.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.ProtocolName">
            <summary>
            Gets the name of the protocol.
            </summary>
            <value>The name of the protocol.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="ProtocolName"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.ProtocolVersion">
            <summary>
            Gets the protocol version.
            </summary>
            <value>The protocol version.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="ProtocolVersion"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.Received">
            <summary>
            Gets or sets the received.
            </summary>
            <value>The received.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Received"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add characters not consistent with an IPAddress.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.SentBy">
            <summary>
            Gets or sets the sent by.
            </summary>
            <value>The sent by.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="SentBy"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add characters not consistent with a host string.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>The time to live.</value> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ViaHeaderField.Transport">
            <summary>
            Gets or sets the transport.
            </summary>
            <value>The transport.</value>
        </member>
        <member name="T:Konnetic.Sip.SipException">
            <summary>The exception that is thrown when a generic SIP error occur.
            </summary>
            <remarks>
            The <see cref="T:Konnetic.Sip.SipException"/> class differentiates between exceptions defined by SIP versus exceptions defined by the system.</remarks>
        </member>
        <member name="M:Konnetic.Sip.SipException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to an empty string.
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipException"/> class with a specified error message and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to the passed <paramref name="message"/> argument. The content of <paramref name="message"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="message">The error message that explains the reason for this exception. </param>
        </member>
        <member name="M:Konnetic.Sip.SipException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipException"/> class with a specified error message and the exception that caused this exception and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to the passed <paramref name="message"/> argument. The content of <paramref name="message"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="message">The error message that explains the reason for this exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Konnetic.Sip.Headers.Priority">
            <summary>
            Indicates the urgency of the request as perceived by the client
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.Priority.None">
            <summary>
            The default enumeration. No priority.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.Priority.Emergency">
            <summary>
            When life, limb, or property are in imminent danger.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.Priority.Urgent">
            <summary>
            Compelling or requiring immediate action or attention.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.Priority.Normal">
            <summary>
            Typical priority.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.Priority.NonUrgent">
            <summary>
            Not urgent or informational.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.SipWarningCode">
            <summary>
            The Warning general-header field is used to carry additional information about the status or transformation of a message which might not be reflected in the message.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.None">
            <summary>
            The default enumeration.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.IncompatibleNetworkProtocol">
            <summary>
            One or more network protocols contained in the session description are not available.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.IncompatibleNetworkAddressFormats">
            <summary>
            One or more network address formats contained in the session description are not available.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.IncompatibleTransportProtocol">
            <summary>
            One or more transport protocols described in the session description are not available.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.IncompatibleBandwidthUnits">
            <summary>
            One or more bandwidth measurement units contained in the session description were not understood.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.MediaTypeNotAvailable">
            <summary>
            One or more media types contained in the session description are not available.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.IncompatibleMediaFormat">
            <summary>
            One or more media formats contained in the session description are not available.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.AttributeNotUnderstood">
            <summary>
            One or more of the media attributes in the session description are not supported.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.SessionDescriptionParameterNotUnderstood">
            <summary>
            A parameter other than those listed above was not understood.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.MulticastNotAvailable">
            <summary>
            The site where the user is located does not support multicast.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.UnicastNotAvailable">
            <summary>
            The site where the user is located does not support unicast communication.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.InsufficientBandwidth">
            <summary>
            The bandwidth specified in the session description or defined by the media exceeds that known to be available.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipWarningCode.MiscellaneousWarning">
            <summary>
            The warning text can include arbitrary information to be presented to a human user or logged.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase">
            <summary>
            The <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> provides Authorization credential information for HeaderFields. 
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616, RFC2617</b>
            <para/>
            The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> and <seealso cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/> headers.  
            <para/>
            The credentials contain the authentication information of the client for the realm of the resource being requested as well as parameters required in support of authentication and replay protection.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table > 
            <tr><td style="border-bottom:none">credentials = </td><td style="border-bottom:none">("Digest" WHITESPACE digest-response) / other-response</td></tr>
            <tr><td style="border-bottom:none">digest-response = </td><td style="border-bottom:none">dig-resp *("," dig-resp)</td></tr>
            <tr><td style="border-bottom:none">dig-resp = </td><td style="border-bottom:none">username / realm / nonce / digest-uri / dresponse / algorithm / cnonce / opaque / message-qop / nonce-count / auth-param</td></tr>
            <tr><td style="border-bottom:none">username = </td><td style="border-bottom:none">"username" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">digest-uri = </td><td style="border-bottom:none">"uri" EQUAL &lt; request-uri &gt;</td></tr>
            <tr><td style="border-bottom:none">message-qop = </td><td style="border-bottom:none">"qop" EQUAL "auth" / "auth-info" / token</td></tr>
            <tr><td style="border-bottom:none">cnonce = </td><td style="border-bottom:none">"cnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">nonce-count = </td><td style="border-bottom:none">"nc" EQUAL 8HEX</td></tr>
            <tr><td style="border-bottom:none">dresponse = </td><td style="border-bottom:none">"response" EQUAL DOUBLE_QUOTE 32HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table> 
            <para/>
            <example>
            <list type="bullet">
            <item>Authorization: Digest username="Alice", realm="atlanta.com", nonce="84a4cc6f3082121f32b42a2187831a9e", response="7587245234b3434cc3412213e5f113a5432"</item>
            <item>Proxy-Authorization: Digest username="Alice", realm="atlanta.com", nonce="c60f3082ee1212b402a21831ae", response="245f23415f11432b3434341c022"</item>  
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.SchemeHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/> 
        </member>
        <member name="T:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase">
            <summary> 
            The <see cref="T:Konnetic.Sip.Headers.SchemeHeaderFieldBase"/> provides Scheme and Authorization information for HeaderFields.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para>SIP provides a simple challenge-response authentication mechanism that MAY be used by a server to challenge a client request and by a client to provide authentication information. It uses an extensible, case-insensitive token to identify the authentication scheme, followed by a comma-separated list of attribute-value pairs which carry the parameters necessary for achieving authentication via that scheme.</para>
            <para>The 401 (Unauthorized) response message is used by a server to challenge the authorization of a user. This response MUST include a <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> header field containing at least one challenge applicable to the requested resource. The 407 (Proxy Authentication Required) response message is used by a proxy to challenge the authorization of a client and MUST include a <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> header field containing at least one challenge applicable to the proxy for the requested resource.</para>
            <para>The authentication parameter realm is defined for all authentication schemes</para>
            <para>When comparing header fields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular header field, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are casesensitive.</para>
            <note type="caution">"Quality values" is a misnomer, since these values merely represent relative degradation in desired quality.</note> 
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> and <see cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> headers.  
            <b>RFC 3261 Syntax:</b> 
            <table >  
            <tr><td style="border-bottom:none">auth-scheme = </td><td style="border-bottom:none">token</td></tr> 
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token "=" ( token | quoted-string )</td></tr> 
            <tr><td style="border-bottom:none">realm = </td><td style="border-bottom:none">"realm" "=" quoted-string</td></tr> 
            <tr><td style="border-bottom:none">algorithm = </td><td style="border-bottom:none">"algorithm" "=" ( "MD5" | "MD5-sess" | token )</td></tr> 
            <tr><td style="border-bottom:none">nonce = </td><td style="border-bottom:none">"nonce" "=" quoted-string</td></tr> 
            <tr><td style="border-bottom:none">opaque = </td><td style="border-bottom:none">"opaque"" "=" quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr> 
            </table>
            <example>
            <list type="bullet">
            <item>WWW-Authenticate: Digest realm="atlanta.com", domain="sip:boxesbybob.com", qop="auth", nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", algorithm=MD5</item>  
            <item>Proxy-Authenticate: Digest realm="atlanta.com" nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", stale=FALSE, algorithm=MD5</item>   
            </list>  
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> 
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.SecurityHeaderFieldBase" -->
        <member name="M:Konnetic.Sip.Headers.SecurityHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SecurityHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SecurityHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SecurityHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:SchemeHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:SchemeHeaderFieldBase"/> class.
            </summary>
            <param name="scheme">The scheme.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Equals(Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.SchemeHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.SchemeHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
            <remaks>A string indicating a pair of algorithms used to produce the digest and a checksum. If this is not present it is assumed to be "MD5". If the algorithm is not understood, the challenge should be ignored (and a different one used, if there is more than one).</remaks>
            <value>The algorithm.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Algorithm"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <remarks>A server-specified data string which should be uniquely generated each time a 401 response is made. It is recommended that this string be base64 or hexadecimal data. Specifically, since the string is passed in the header lines as a quoted string, the double-quote character is not allowed.</remarks>
            <value>The nonce.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Nonce"/>.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Opaque">
            <summary>
            Gets or sets the opaque.
            </summary>
            <remarks>A string of data, specified by the server, which should be returned by the client unchanged in the Authorization header of subsequent requests with URIs in the same protection space. It is recommended that this string be base64 or hexadecimal data.</remarks>
            <value>The opaque.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Opaque"/>.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Realm">
            <summary>
            Gets or sets the realm.
            </summary>
            <remarks>A string to be displayed to users so they know which username and password to use. This string should contain at least the name of the host performing the authentication and might additionally indicate the collection of users who might have access. An example might be "registered_users@gotham.news.com".</remarks>
            <value>The realm.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Opaque"/>.</exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.SchemeAuthHeaderFieldBase.Scheme">
            <summary>
            Gets or sets the scheme.
            </summary>
            <remarks>Note that due to its weak security, the usage of "Basic" authentication has been deprecated. Servers must not accept credentials using the "Basic" authorization scheme, and servers also must not challenge with "Basic".</remarks>
            <value>The scheme.</value>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when Basic authentication is applied.</exception> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Scheme"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> class.
            </summary>
            <param name="scheme">The scheme.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Equals(Konnetic.Sip.Headers.AuthorizationHeaderFieldBase)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table > 
            <tr><td style="border-bottom:none">credentials = </td><td style="border-bottom:none">("Digest" WHITESPACE digest-response) / other-response</td></tr>
            <tr><td style="border-bottom:none">digest-response = </td><td style="border-bottom:none">dig-resp *("," dig-resp)</td></tr>
            <tr><td style="border-bottom:none">dig-resp = </td><td style="border-bottom:none">username / realm / nonce / digest-uri / dresponse / algorithm / cnonce / opaque / message-qop / nonce-count / auth-param</td></tr>
            <tr><td style="border-bottom:none">username = </td><td style="border-bottom:none">"username" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">digest-uri = </td><td style="border-bottom:none">"uri" EQUAL &lt; request-uri &gt;</td></tr>
            <tr><td style="border-bottom:none">message-qop = </td><td style="border-bottom:none">"qop" EQUAL "auth" / "auth-info" / token</td></tr>
            <tr><td style="border-bottom:none">cnonce = </td><td style="border-bottom:none">"cnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">nonce-count = </td><td style="border-bottom:none">"nc" EQUAL 8HEX</td></tr>
            <tr><td style="border-bottom:none">dresponse = </td><td style="border-bottom:none">"response" EQUAL DOUBLE_QUOTE 32HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table> 
            <para/>
            <example>
            <list type="bullet">
            <item>Authorization: Digest username="Alice", realm="atlanta.com", nonce="84a4cc6f3082121f32b42a2187831a9e", response="7587245234b3434cc3412213e5f113a5432"</item>
            <item>Proxy-Authorization: Digest username="Alice", realm="atlanta.com", nonce="c60f3082ee1212b402a21831ae", response="245f23415f11432b3434341c022"</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.AuthParameters" -->
        <member name="P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.CNonce">
            <summary>
            Gets or sets the C nonce.
            </summary>
            <remarks>This must be specified if a qop directive is sent, and must not be specified if the server did not send a qop directive in the WWW-Authenticate header field. The cnonce-value is an opaque quoted string value provided by the client and used by both client and server to avoid chosen plaintext attacks, to provide mutual authentication, and to provide some message integrity protection. See the descriptions below of the calculation of the responsedigest and request-digest values.
            <para/>
            The CNonce value is always converted to a quoted-string for the HeaderFields.
            </remarks>
            <value>The CNonce.</value> 
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.NonceCount">
            <summary>
            Gets or sets the nonce count. The nc-value is the hexadecimal count of the number of requests (including the current request) that the client has sent with the nonce value in this request.
            </summary>
            <remarks>This must be specified if a qop directive is sent (see above), and must not be specified if the server did not send a qop directive in the WWW-Authenticate header field. 
            <example>In the first request sent in response to a given nonce value, the client sends "nc=00000001". </example><para/>The purpose of this directive is to allow the server to detect request replays by maintaining its own copy of this count - if the same nc-value is seen twice, then the request is a replay. See the description below of the construction of the request-digest value.</remarks>
            <value>The nonce count.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="NonceCount"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add a CNonce greater than 8 Hex chars <paramref name="NonceCount"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-Hex or numeric characters.<paramref name="NonceCount"/>.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.MessageQop">
            <summary>
            Gets or sets the message qop.
            </summary>
            <value>The message qop.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="MessageQop"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Response">
            <summary>
            Gets or sets the response.A string of 32 hex digits, which proves that the user knows a password
            </summary> 
            <remarks>The Response is always converted to a quoted-string in the HeaderField.</remarks>
            <value>The response.</value>
            <exception cref="T:Konnetic.Sip.SipException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Response"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add a CNonce greater than 8 Hex chars <paramref name="NonceCount"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add a quoted non-Hex or non-numeric character.<paramref name="NonceCount"/>.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Uri">
            <summary>
            Gets or sets the URI. The URI from Request-URI of the Request-Line; duplicated here because proxies are allowed to change the Request-Line in transit.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase.Username">
            <summary>
            Gets or sets the name of the user. The user's name in the specified realm.
            </summary>
            <remarks>The username is always converted to a quoted-string in the HeaderField.</remarks>
            <value>The name of the user.</value>
            <exception cref="T:Konnetic.Sip.SipException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="UserName"/>.</exception>  
        </member>
        <member name="T:Konnetic.Sip.Headers.SipParameter">
            <summary>
            Represents a parameter name/value pair on a HeaderField. Responsible for storing and representing the parameter correctly. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            Even though an arbitrary number of parameter pairs may be attached to a header field value, any given parameter-name must not appear more than once.
            <para/>
            Unless otherwise stated in the definition of a particular header field, parameter names, and parameter values are case-insensitive.
            <para/> 
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none">parameter = </td><td style="border-bottom:none">attribute "=" value</td></tr>
            <tr><td style="border-bottom:none">attribute = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">value = </td><td style="border-bottom:none">token | quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" ) </td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE </td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII </td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace </td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace </td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table> 
            <para/> 
            <example>
            <list type="bullet">
            <item>Contact: &lt;sip:alice@atlanta.com&gt;;expires=3600</item>
            <item>CONTACT: &lt;sip:alice@atlanta.com&gt;;ExPiReS=3600</item>
            <item>Contact: "Mr. Watson" &lt;sip:watson@worcester.bell-telephone.com&gt;;q=0.7; expires=3600</item> 
            </list>
            </example> 
            </remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipParameter._caseSensitiveComparison">
            <summary>
            Indicates that the parameter is case sensitive for comparisons
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipParameter._valueLessParameter">
            <summary>
            Indicates that the parameter deliberately has no value
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipParameter._name">
            <summary>
            The parameter name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipParameter._value">
            <summary>
            The parameter value.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> class.
            </summary>
            <param name="nameValuePair">The name value pair to parse.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="nameValuePair"/> parameter.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> class.
            </summary>
            <param name="name">The SipParameter name.</param>
            <param name="value">The SipParameter value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="name"/> parameter.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> class.
            </summary>
            <remarks>A null <paramref name="value"/> parameter indicates a valueless parameter</remarks>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <param name="isQuoted"> if set to <c>true</c> the parameter value is quoted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="name"/> parameter.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.op_Inequality(Konnetic.Sip.Headers.SipParameter,Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="header1">The first <see cref="T:Konnetic.Sip.Headers.SipParameter"/>HeaderParameter instance.</param>
            <param name="header2">The second <see cref="T:Konnetic.Sip.Headers.SipParameter"/>HeaderParameter instance.</param>
            <returns>The result of the inequality operation: <c>true</c> if the instances are not equal; otherwise, <c>false</c>.</returns>
            <threadsafety static="true" instance="false"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.op_Equality(Konnetic.Sip.Headers.SipParameter,Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="param1">The first <see cref="T:Konnetic.Sip.Headers.SipParameter"/>HeaderParameter instance.</param>
            <param name="param2">The second <see cref="T:Konnetic.Sip.Headers.SipParameter"/>HeaderParameter instance.</param>
            <returns>The result of the equality operation:<c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.SipParameter"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.Equals(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Compares the specified <see cref="T:Konnetic.Sip.Headers.SipParameter"/> param to this instance.
            </summary>
            <param name="other">A <see cref="T:Konnetic.Sip.Headers.SipParameter"/> instance to compare with this instance.</param>
            <returns>The result of the equality operation:<c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <threadsafety static="true" instance="false"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary> 
            <returns>
            	<c>true</c> if instance represents a valid SIP Parameter; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.Parse(System.String)">
            <summary>
            Parses string representation of the SipParameter.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none">parameter = </td><td style="border-bottom:none">attribute "=" value</td></tr>
            <tr><td style="border-bottom:none">attribute = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">value = </td><td style="border-bottom:none">token | quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" ) </td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE </td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII </td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace </td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace </td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table> 
            <para/> 
            <example>
            <list type="bullet">
            <item>Contact: &lt;sip:alice@atlanta.com&gt;;expires=3600</item>
            <item>CONTACT: &lt;sip:alice@atlanta.com&gt;;ExPiReS=3600</item>
            <item>Contact: "Mr. Watson" &lt;sip:watson@worcester.bell-telephone.com&gt;;q=0.7; expires=3600</item> 
            </list>
            </example> 
            </remarks>
            <param name="value">The SipParameter string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.ToBytes">
            <summary>
            Represents the parameter as a byte array. Encoding is UTF8.
            </summary>
            <returns>A byte array that represents this instance.</returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.ToChars">
            <summary>
            Returns the parameter as a char array.
            </summary>
            <returns>A char array that represents this instance.</returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance. Supports Valueless parameters such as 'lr'.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <value>Uses the format [parameter-name]=[parameter-value]</value>
            <specification>RFC3261: 7.3.1</specification>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.IsMediaParameter">
            <summary>
            Gets or sets a value indicating whether this instance is a media parameter.
            </summary>
            <value>
            	<c>true</c> if this instance is a media parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.CaseSensitiveComparison">
            <summary>
            Gets or sets a value indicating whether the Parameter uses case sensitive comparison.
            </summary>
            <value>
            	<c>true</c> if case sensitive comparison is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.IsEmpty">
            <summary>
            Gets a value indicating whether this collection is empty. 
            </summary>
            <value><c>true</c> if this collection is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.IsQuoted">
            <summary>
            Gets or sets a value indicating whether the Parameter value is quoted.
            </summary>
            <value><c>true</c> if the Parameter value is quoted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
            <value>The parameter name.</value>
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when the name value contains illegal characters.</exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <remarks>The value is quoted if it contains reserved characters. Quoted values employ case-sensitive comparison.</remarks>
            <value>The parameter value.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameter.ValuelessParameter">
            <summary>
            Gets or sets a value indicating whether the parameter deliberately has no value.
            </summary>
            <value><c>true</c> if the parameter has no value; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Konnetic.Sip.Syntax.AA_ALPHANUM">
            <summary>
            
            </summary> 
        </member>
        <member name="F:Konnetic.Sip.Syntax.AA_ESCAPED">
            <summary>
            
            </summary> 
        </member>
        <member name="F:Konnetic.Sip.Syntax.AA_MARK">
            <summary>
            
            </summary> 
        </member>
        <member name="F:Konnetic.Sip.Syntax.AA_RESERVED">
            <summary>
            
            </summary> 
        </member>
        <member name="F:Konnetic.Sip.Syntax.AA_TOKENMARKS">
            <summary>
            
            </summary> 
        </member>
        <member name="F:Konnetic.Sip.Syntax.ALLPARAMETERUNRESERVED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Syntax.HEADERUNRESERVED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Syntax.HOSTUNRESERVED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Syntax.PARAMETERUNRESERVED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Syntax.PASSWORDUNRESERVED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Syntax.USERUNRESERVED">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsReservedUriComponent(System.String,Konnetic.Sip.SipUriComponents)">
            <summary>
            Checks the is reserved.
            </summary>
            <param name="text">The text.</param>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsReservedUriComponent(System.Char,Konnetic.Sip.SipUriComponents)">
            <summary>
            Checks the is reserved.
            </summary>
            <param name="ch">The ch.</param>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsReservedUriComponent(System.String,System.String)">
            <summary>
            Checks the is reserved.
            </summary>
            <param name="text">The text.</param>
            <param name="component">The component.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsAlpha(System.String)">
            <summary>
            Determines whether the specified text is alpha.
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if the specified text is alpha; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsNumeric(System.String)">
            <summary>
            Determines whether the specified text is numeric.
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if the specified text is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsToken(System.String)">
            <summary>
            Determines whether the specified text is token.
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if the specified text is token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedAllParameter(System.String)">
            <summary>
            Determines whether [is un reserved all parameter] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if [is un reserved all parameter] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedHeader(System.String)">
            <summary>
            Determines whether [is un reserved header] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if [is un reserved header] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedHost(System.String)">
            <summary>
            Determines whether [is un reserved host] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if [is un reserved host] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedParameter(System.String)">
            <summary>
            Determines whether [is un reserved parameter] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if [is un reserved parameter] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedPassword(System.String)">
            <summary>
            Determines whether [is un reserved password] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if [is un reserved password] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedUserName(System.String)">
            <summary>
            Determines whether [is un reserved user name] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if [is un reserved user name] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsAlpha(System.Char)">
            <summary>
            Determines whether the specified c is alpha.
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if the specified c is alpha; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsNumeric(System.Char)">
            <summary>
            Determines whether the specified c is numeric.
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if the specified c is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsReserved(System.Char)">
            <summary>
            Determines whether the specified c is reserved.
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if the specified c is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsToken(System.Char)">
            <summary>
            Determines whether the specified c is token.
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if the specified c is token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedAllParameter(System.Char)">
            <summary>
            Determines whether [is un reserved all parameter] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is un reserved all parameter] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedHeader(System.Char)">
            <summary>
            Determines whether [is un reserved header] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is un reserved header] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedHost(System.Char)">
            <summary>
            Determines whether [is un reserved host] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is un reserved host] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedParameter(System.Char)">
            <summary>
            Determines whether [is un reserved parameter] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is un reserved parameter] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedPassword(System.Char)">
            <summary>
            Determines whether [is un reserved password] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is un reserved password] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Syntax.IsUnReservedUserName(System.Char)">
            <summary>
            Determines whether [is un reserved user name] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is un reserved user name] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Konnetic.Sip.Headers.MessageType">
            <summary>
            SIP messages consist of requests from client to server and responses from server to client.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MessageType.Request">
             <summary>
            A request message from a client to a server.
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MessageType.Response">
             <summary>
            A response message from a server to a client.
             </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.SupportedHeaderField">
            <summary>The Supported HeaderField enumerates all the extensions supported by the client or server. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Supported" / "k" ) ":" [option-tag *("," option-tag)]</td></tr>
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>Supported: 100rel </item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="T:Konnetic.Sip.Headers.OptionHeaderFieldBase">
            <summary>
            The <see cref="T:Konnetic.Sip.Headers.OptionHeaderFieldBase"/> provides the Options tag for HeaderFields.
            </summary>
            <remarks>
            <b>Standards: RFC3261</b>
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/>,<see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/>,<see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/> and <seealso cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/> headers.  
            <para/>
            Option tags are unique identifiers used to designate new options (extensions) in SIP. These tags are used in <see cref="T:Konnetic.Sip.Headers.RequestHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/> header fields. Note that these options appear as parameters in those header fields in an option-tag = token form. Option tags are defined in standards track RFCs. This is a change from past practice, and is instituted to ensure continuing multi-vendor interoperability. An IANA registry of option tags is used to ensure easy reference.
            <b>RFC 3261 Syntax:</b> 
            <table > 
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            </table>
            <example>
            <list type="bullet">
            <item>Unsupported: 100rel;option=rel</item> 
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.RequireHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/>  
            <seealso cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/>  
        </member>
        <member name="F:Konnetic.Sip.Headers.OptionHeaderFieldBase._option">
            <summary>
            Represents the field's parameter.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.OptionHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.OptionHeaderFieldBase"/> class.
            </summary>
            <param name="option">The option.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="option"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.Equals(Konnetic.Sip.Headers.OptionHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.OptionHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.OptionHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.OptionHeaderFieldBase.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.OptionHeaderFieldBase.Option">
            <summary>
            Gets or sets the option.
            </summary>
            <value>The option.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Option"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> class.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.SupportedHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.op_Explicit(Konnetic.Sip.Headers.SupportedHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SupportedHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.RequireHeaderField">
            <summary>The Require HeaderField is used by clients to tell servers about options that the client expects the server to support in order to process the request. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The Proxy-Require HeaderField is used by client to tell servers about options that the client expects the server to support in order to process the request. Although an optional HeaderField, the Proxy-Require must not be ignored if it is present.
            <para/>
            The Require HeaderField contains a list of option tags (see below). Each option tag defines a SIP extension that must be understood to process the request. Frequently, this is used to indicate that a specific set of extension HeaderFields need to be understood. A client compliant to the SIP specification must only include option tags corresponding to standards-track RFCs.
            <b>Option Tag</b>
            Option tags are unique identifiers used to designate new options (extensions) in SIP. These tags are used in <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderFieldBase"/> HeaderFields. Note that these options appear as parameters in those HeaderFields in an option-tag = token form.
            <para/> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Require" ":" option-tag *("," option-tag)</td></tr> 
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>  
            <example>
            <list type="bullet">
            <item>Require: 100rel</item> 
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.SupportedHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.UnsupportedHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.RequireHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequireHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequireHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/> class.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequireHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.RequireHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/> populated from the passed in string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequireHeaderField.op_Explicit(Konnetic.Sip.Headers.RequireHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequireHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RequireHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Require" ":" option-tag *("," option-tag)</td></tr> 
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>  
            <example>
            <list type="bullet">
            <item>Require: 100rel</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.ProxyRequireHeaderField">
            <summary>The Proxy-Require HeaderField is used to indicate proxy-sensitive features that must be supported by the proxy. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The Proxy-Require HeaderField is used by client to tell servers about options that the client expects the server to support in order to process the request. Although an optional HeaderField, the Proxy-Require must not be ignored if it is present.
            <para/>
            The Require HeaderField contains a list of option tags (see below). Each option tag defines a SIP extension that must be understood to process the request. Frequently, this is used to indicate that a specific set of extension HeaderFields need to be understood. A client compliant to the SIP specification must only include option tags corresponding to standards-track RFCs.
            <b>Option Tag</b>
            Option tags are unique identifiers used to designate new options (extensions) in SIP. These tags are used in <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderFieldBase"/> HeaderFields. Note that these options appear as parameters in those HeaderFields in an option-tag = token form.
            <para/> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Proxy-Require" ":" option-tag *("," option-tag)</td></tr>  
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Proxy-Require: foo</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.RequireHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.SupportedHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.UnsupportedHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.ProxyRequireHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/> class.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ProxyRequireHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.op_Explicit(Konnetic.Sip.Headers.ProxyRequireHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyRequireHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Proxy-Require" ":" option-tag *("," option-tag)</td></tr>  
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Proxy-Require: foo</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.SipUriFormatException">
            <summary>The exception that is thrown when a SIP formatting error occurs when dealing with the <see cref="T:Konnetic.Sip.SipUri"/> class.
            </summary>
            <remarks>
            <see cref="T:Konnetic.Sip.SipUriFormatException"/> is thrown when it is detected that an peration would result in illegal SIP Uri syntax or semantics.
            </remarks>
        </member>
        <member name="T:Konnetic.Sip.SipFormatException">
            <summary>The exception that is thrown when a SIP formatting error occurs. 
            </summary>
            <remarks>
            <see cref="T:Konnetic.Sip.SipFormatException"/> is thrown when a method is invoked and it is detected that the passed arguments would result in illegal SIP syntax or semantics.  
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipFormatException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to an empty string.
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipFormatException"/> class with a specified error message and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to the passed <paramref name="message"/> argument. The content of <paramref name="message"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="message">The error message that explains the reason for this exception. </param>
        </member>
        <member name="M:Konnetic.Sip.SipFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipFormatException"/> class with a specified error message and the exception that caused this exception and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to the passed <paramref name="message"/> argument. The content of <paramref name="message"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="message">The error message that explains the reason for this exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipFormatException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:Konnetic.Sip.SipUriFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriFormatException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to an empty string.
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipUriFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriFormatException"/> class with a specified error message and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to the passed <paramref name="message"/> argument. The content of <paramref name="message"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="message">The error message that explains the reason for this exception. </param>
        </member>
        <member name="M:Konnetic.Sip.SipUriFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriFormatException"/> class with a specified error message and the exception that caused this exception and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to the passed <paramref name="message"/> argument. The content of <paramref name="message"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="message">The error message that explains the reason for this exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipUriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriFormatException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipUriFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Konnetic.Sip.SipTransportException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipTransportException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipTransportException"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipTransportException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipTransportException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Konnetic.Sip.SipTransportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipTransportException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Konnetic.Sip.SipTransportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipTransportException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipTransportException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField">
            <summary>
            The Accept-Language request-HeaderField is similar to Accept, but restricts the set of natural languages that are preferred as a response to the request. The Accept-Language HeaderField is used in requests to indicate the preferred languages for reason phrases, session descriptions, or status responses carried as message bodies in the <see cref="T:Konnetic.Sip.Messages.Response"/>. 
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616, RFC1766</b> 
            <para/>
            The syntax and registry of SIP language tags is the same as that defined by RFC 1766. In summary, a language tag is composed of 1 or more parts: A primary language tag and a possibly empty series of subtag. White space is not allowed within the tag and all tags are case-insensitive. The name space of language tags is administered by the IANA (Internet Assigned Numbers Authority).
            <para/>
            The special "*" symbol in an Accept-Language field matches any available content-coding not explicitly listed in the HeaderField. If no Accept-Language HeaderField is present, the server should assume all languages are acceptable to the client.
            <para/>
            <b>Language Tags</b>
            <para/>
            A language tag identifies a natural language spoken, written, or otherwise conveyed by human beings for communication of information to other human beings. Computer languages are explicitly excluded. SIP uses language tags within the Accept-Language and Content-Language fields.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table > 
            <tr><td style="border-bottom:none">language-tag = </td><td style="border-bottom:none">primary-tag *( "-" subtag )</td></tr>    
            <tr><td style="border-bottom:none">primary-tag = </td><td style="border-bottom:none">1*8ALPHA</td></tr>
            <tr><td style="border-bottom:none">subtag = </td><td style="border-bottom:none">1*8ALPHA</td></tr>
            </table>
            <example>
            <i>en, en-US, en-cockney, i-cherokee, x-pig-latin</i>
            <para/>
            Where any two-letter primary-tag is an ISO-639 language abbreviation and any two-letter initial subtag is an ISO-3166 country code. (The last three tags above are not registered tags; all but the last are examples of tags which could be registered in future.)
            </example>
            <para/>
            <b>Quality</b>
            <para/>
            Each language-range may be given an associated quality value which represents an estimate of the user's preference for the languages specified by that range. The quality value defaults to "q=1".
            <para/> 
            <note type="caution">Each language-range may be given an associated quality value which represents an estimate of the user's preference for the languages specified by that range. The quality value defaults to "q=1".</note>
            The language quality factor assigned to a language-tag by the Accept-Language field is the quality value of the longest language-range in the field that matches the language-tag. If no language-range in the field matches the tag, the language quality factor assigned is 0. If no Accept-Language header is present in the request, the server should assume that all languages are equally acceptable. If an Accept-Language header is present, then all languages which are assigned a quality factor greater than 0 are acceptable.
            <para/>
            <b>Other</b>
            <para/>
            It might be contrary to the privacy expectations of the user to send an Accept-Language header with the complete linguistic preferences of the user in every request.
            <para/>
            As intelligibility is highly dependent on the individual user, it is recommended that client applications make the choice of linguistic preference available to the user. If the choice is not made available, then the Accept-Language HeaderField must not be given in the request.
            <para/>
            <note type="caution">When making the choice of linguistic preference available to the user, we remind implementors of the fact that users are not familiar with the details of language matching as described above, and should provide appropriate guidance. As an example, users might assume that on selecting "en-gb", they will be served any kind of English document if British English is not available. A user agent might suggest in such a case to add "en" to get the best matching behavior.</note>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Accept-Language" ":" [ language *("," language) ]</td></tr>
            <tr><td style="border-bottom:none">language = </td><td style="border-bottom:none">language-range *(SEMI accept-param)</td></tr>
            <tr><td style="border-bottom:none">language-range = </td><td style="border-bottom:none">( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )</td></tr>
            </table >
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Accept-Language: da, en-gb;q=0.8, en;q=0.7 </item>
            </list>
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> 
        </member>
        <member name="T:Konnetic.Sip.Headers.QValueHeaderFieldBase">
            <summary> 
            The <see cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/> provides the quality factor parameter for HeaderFields.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para>SIP content negotiation uses short "floating point" numbers to indicate the relative importance ("weight") of various negotiable parameters. A weight is normalized to a real number in the range 0 through 1, where 0 is the minimum and 1 the maximum value. If a parameter has a quality value of 0, then content with this parameter is ‘not acceptable’ for the client. SIP applications must not generate more than three digits after the decimal point. User configuration of these values SHOULD also be limited in this fashion.</para>
            <para>Quality factors allow the user or user agent to indicate the relative degree of preference for that headerfield value, using the qvalue scale from 0 to 1. The default value is q=1.</para>
            <para>When comparing header fields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular header field, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are casesensitive.</para>
            <note type="caution">"Quality values" is a misnomer, since these values merely represent relative degradation in desired quality.</note> 
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> headers.  
            <b>RFC 3261 Syntax:</b> 
            <table >  
            <tr><td style="border-bottom:none">qvalue = </td><td style="border-bottom:none">( "0" [ "." 0*3DIGIT ] ) | ( "1" [ "." 0*3("0") ] )</td></tr> 
            </table>
            <example>
            <list type="bullet">
            <item>Accept: audio/*; q=0.2, audio/basic</item> 
            <item>Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,text/html;level=2;q=0.4, */*;q=0.5</item>  
            </list> 
            The last example would cause the following values to be associated:
            <list type="number">
            <item>text/html;level=1 = 1</item> 
            <item>text/html = 0.7</item>  
            <item>text/plain = 0.3</item>  
            <item>image/jpeg = 0.5</item>  
            <item>text/html;level=2 = 0.4</item>  
            <item>text/html;level=3 = 0.7</item>  
            </list>
            </example>
            </remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.QValueHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.QValueHeaderFieldBase.#ctor(System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="!:QValueHeaderField"/> class.
            </summary>
            <param name="qValue">The q value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.QValueHeaderFieldBase.Equals(Konnetic.Sip.Headers.QValueHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.QValueHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.QValueHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.QValueHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.QValueHeaderFieldBase.QValue">
            <summary>
            Gets or sets the Q value.
            </summary>
            <remarks>Set value to null to remove from Parameter list. 
            <note type="caution">"Quality values" is a misnomer, since these values merely represent relative degradation in desired quality.</note> 
            </remarks>
            <value>The Q value.</value>
        </member>
        <member name="F:Konnetic.Sip.Headers.AcceptLanguageHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.AcceptLanguageHeaderField._languageRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> class.
            </summary>
            <param name="languageRange">The language range.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AcceptLanguageHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.op_Explicit(Konnetic.Sip.Headers.AcceptLanguageHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.Equals(Konnetic.Sip.Headers.AcceptLanguageHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.AcceptLanguageHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Accept-Language" ":" [ language *("," language) ]</td></tr>
            <tr><td style="border-bottom:none">language = </td><td style="border-bottom:none">language-range *(SEMI accept-param)</td></tr>
            <tr><td style="border-bottom:none">language-range = </td><td style="border-bottom:none">( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )</td></tr>
            </table >
            <example>
            <list type="bullet">
            <item>Accept-Language: da, en-gb;q=0.8, en;q=0.7 </item>
            </list>
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptLanguageHeaderField.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.AcceptLanguageHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.AcceptLanguageHeaderField.LanguageRange">
            <summary>
            Gets or sets the language range.
            </summary>
            <value>The language range.</value>
        </member>
        <member name="T:Konnetic.Sip.TransportType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransportType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransportType.Udp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransportType.Tcp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransportType.Tls">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransportType.Sctp">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Messages.Invite">
            <summary>
            Represents an Invite Request, which is responsible for representing valid data for an Invite Method.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Messages.Request">
            <summary>
            Represents a SIP Request.
            </summary>
            <remarks>SIP Methods are represented as Requests.</remarks>
        </member>
        <member name="T:Konnetic.Sip.Messages.SipMessage">
            <summary>
            Represents a SIP message that can be sents and received by the client.
            </summary>
            <remarks>
            Can be used to represent a packet.
            </remarks>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMessage._headerFields">
            <summary>
            Represents the header of the message. Responsible for listing the headerfields of the message.
            </summary>
            <remarks>The HeaderFields are similar to HTTP HeaderFields.</remarks>
            <standard>RFC3261: 7.3</standard>
            <standard>Conforms to RFC2234</standard>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMessage._body">
            <summary>
            Represents the data payload of the message. Responsible for storing the data for the message. 
            </summary>
            <remarks>Typically the body will be SDP (Session Description Protocol).</remarks>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.SipMessage"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.SipMessage"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.#ctor(Konnetic.Sip.Headers.HeaderFieldCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.SipMessage"/> class.
            </summary>
            <param name="headerFields">The HeaderFields.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.#ctor(Konnetic.Sip.Headers.HeaderFieldCollection,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.SipMessage"/> class.
            </summary>
            <param name="headerFields">The HeaderFields.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.GetBytes(System.Byte[]@)">
            <summary>
            Gets the bytes.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.GetHeader(System.String)">
            <summary>
            Finds the specified HeaderField.
            </summary>
            <param name="fieldName">The name of the HeaderField to find.</param>
            <returns>A HeaderField or null if no field is found. Only the first field is returned.</returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.GetHeaderBytes(System.Boolean)">
            <summary>
            Returns a byte array of the header.
            </summary> 
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.GetHeaderValue(System.String)">
            <summary>
            Finds the value associated with a field name.
            </summary>
            <param name="fieldName">The name of the HeaderField to find.</param>
            <returns>A string value or null if no field is found. Only the first field is returned.</returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.GetStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates stream from the instance.
            </summary>
            <param name="stream">The stream.</param>
            <param name="useCompactForm">if set to <c>true</c> the the stram uses the compact form for each filed name.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.RemoveHeader(System.String)">
            <summary>
            Removes the header.
            </summary>
            <param name="headerName">Name of the header.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.Set(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Sets the specified header.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMessage.TryAddHeader(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Adds a HeaderField to the header.
            </summary>
            <param name="field">The HeaderField.</param>
            <returns>
            	<c>true</c> if field was valid and added to the headers; otherwise, <c>false</c>.
            </returns>
            <remarks>The method first calls ValidateHeaderField to check if the field can be added.</remarks>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="field"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
        </member>
        <member name="P:Konnetic.Sip.Messages.SipMessage.Body">
            <summary>
            Gets or sets the body. Represents the data payload of the message. Responsible for storing the data for the message. 
            </summary>
            <value>The body.</value>
            <remarks>Typically the body will be SDP (Session Description Protocol).</remarks>
        </member>
        <member name="P:Konnetic.Sip.Messages.SipMessage.Headers">
            <summary>
            Represents the header of the message. Responsible for listing the headerfields of the message.
            </summary>
            <value>The header.</value>
            <remarks>The HeaderFields are similar to HTTP HeaderFields.</remarks>
            <standard>RFC3261: 7.3</standard>
            <standard>Conforms to RFC2234</standard>
        </member>
        <member name="P:Konnetic.Sip.Messages.SipMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <value>The type of the message.</value>
        </member>
        <member name="F:Konnetic.Sip.Messages.Request._requestLine">
            <summary>
            Represents the the SIP method associated with the Request.
            </summary> 
        </member>
        <member name="M:Konnetic.Sip.Messages.Request.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Request"/> class.
            </summary>
            <remarks>Calls CreateHeader() to add default HeaderFields.</remarks>
        </member>
        <member name="M:Konnetic.Sip.Messages.Request.#ctor(Konnetic.Sip.Messages.SipMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Request"/> class.
            </summary>
            <param name="method">A SIP method to assign to the Request.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Request.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Request"/> class.
            </summary>
            <param name="method">A SIP method to assign to the Request.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Request.GetHeaderBytes(System.Boolean)">
            <summary>
            Returns a byte array of the header.
            </summary>
            <param name="useCompactForm"></param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.Request.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.CSeq">
            <summary>
            Gets or sets the C seq.
            </summary>
            <value>The C seq.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.CallId">
            <summary>
            Gets or sets the Call-ID.
            </summary>
            <value>The Call-ID.</value>
            <remarks>A unique identifier. Use the static methods on CallIdHeaderField to generate a new value.</remarks>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.From">
            <summary>
            Gets or sets the From value.
            </summary>
            <value>The From value.</value>
            <remarks>Indicates the initiator of the request. Requests sent by the callee to the caller use the callee's address in the From HeaderField. The optional display-name is meant to be understood by a human. </remarks>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.MaxForwards">
            <summary>
            Gets or sets the max forwards.
            </summary>
            <value>The max forwards.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <value>The type of the message.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.Method">
            <summary>
            Gets or sets the SIP method. Represents the the SIP method associated with the Request.
            </summary>
            <value>The SIP method.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.RequestLine">
            <summary>
            Gets or sets the request line.
            </summary>
            <value>The request line.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.To">
            <summary>
            Gets or sets the To value.
            </summary>
            <value>The To value.</value>
            <remarks>Indicates the logical recipient of the request. The optional display-name is meant to be understood by a human. </remarks>
        </member>
        <member name="P:Konnetic.Sip.Messages.Request.Via">
            <summary>
            Gets or sets the via.
            </summary>
            <value>The via.</value>
        </member>
        <member name="M:Konnetic.Sip.Messages.Invite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Invite"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.Invite.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Invite"/> class.
            </summary>
            <param name="to">The logical recipient.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Invite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Invite"/> class.
            </summary>
            <param name="to">The logical recipient.</param>
            <param name="from">The initiator of the request.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Invite.#ctor(Konnetic.Sip.SipUri,Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Invite"/> class.
            </summary>
            <param name="to">The logical recipient.</param>
            <param name="from">The initiator of the request.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Invite.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Messages.Invite.ProxyAuthentication">
            <summary>
            Gets or sets the proxy authentication.
            </summary>
            <value>The proxy authentication.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Invite.Route">
            <summary>
            Gets or sets the route.
            </summary>
            <value>The route.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Invite.Supported">
            <summary>
            Gets or sets the supported.
            </summary>
            <value>The supported.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Invite.WwwAuthentication">
            <summary>
            Gets or sets the WWW authentication.
            </summary>
            <value>The WWW authentication.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.MessageFormatter">
            <summary>
            An abstract class used as a base class for other formatters, (for example Konnetic.Sip.Headers.RequestMessageFormatter).
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MessageFormatter._message">
            <summary>
            The Konnetic.Sip.Headers.SipMessage associated with the formatter.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MessageFormatter._combineMultipleValues">
            <summary>
            Indicates whether mutiple field headers should be combined into one HeaderField. The resulting output is condensed.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MessageFormatter._useCompactForm">
            <summary>
            Indicates whether the formatter should attempt to format the message using the short form for names.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MessageFormatter"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.#ctor(Konnetic.Sip.Messages.SipMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MessageFormatter"/> class.
            </summary>
            <param name="message">A Konnetic.Sip.Headers.SipMessage to associated with the formatter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.CanRead(System.Byte[])">
            <summary>
            Verifies whether the specified byte array contains a valid SipMessage item
            </summary>
            <param name="message">A byte array to check.</param>
            <returns>true, if the byte array contains a valid SIP Message, otherwise false.</returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.ReadFrom(System.Byte[])">
            <summary>
            Reads in a Konnetic.Sip.Headers.SipMessage from the specified byte array.
            </summary>
            <param name="stream">A byte array ro read.</param>
            <returns>A Konnetic.Sip.Headers.SipMessage created from the byte array.</returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.WriteTo(System.Byte[]@)">
            <summary>
            Writes the SipMessage associated with the formatter to the specified byte array.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.WriteTo(Konnetic.Sip.Messages.SipMessage,System.Byte[])">
            <summary>
            Writes the SipMessage to the specified byte array.
            </summary>
            <param name="message">A Konnetic.Sip.Headers.SipMessage to write out to a byte array.</param>
            <param name="stream">A byte array to populate from the SipMessage</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.MessageFormatter.SetMessage(Konnetic.Sip.Messages.SipMessage)">
            <summary>
            Associates a SipMessage instance with the MessageFormatter.
            </summary>
            <param name="message">A Konnetic.Sip.Headers.SipMessage to associated with the formatter.</param>
        </member>
        <member name="P:Konnetic.Sip.Headers.MessageFormatter.CombineMultipleValues">
            <summary>
            Gets or sets a value indicating whether the formatter should combine multiple values if possible.
            </summary>
            <value>
            	<c>true</c> if combine multiple values is on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Konnetic.Sip.Headers.MessageFormatter.Message">
            <summary>
            Gets Konnetic.Sip.Headers.SipMessage associated with the formatter.
            </summary>
            <value>The Konnetic.Sip.Headers.SipMessage associated with the formatter.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.MessageFormatter.UseCompactForm">
            <summary>
            Gets or sets a value indicating whether the formatter should attempt to format names using the short form.
            </summary>
            <value><c>true</c> if the formatter uses the short form; otherwise, <c>false</c>.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.ToHeaderField" -->
        <member name="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase">
            <summary> 
            The <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> provides the Tag parameter to header fields.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para>The tag parameter is used in the To and From header fields of SIP messages. It serves as a general mechanism to identify a dialog, which is the combination of the Call-ID along with two tags, one from each participant in the dialog. When a client sends a request outside of a dialog, it contains a From tag only, providing "half" of the dialog ID. The dialog is completed from the response(s), each of which contributes the second half in the To header field. The forking of SIP requests means that multiple dialogs can be established from a single request. This also explains the need for the two-sided dialog identifier; without a contribution from the recipients, the originator could not disambiguate the multiple dialogs established from a single request.</para> 
            <para>When a tag is generated by a client for insertion into a request or response, it MUST be globally unique and cryptographically random with at least 32 bits of randomness. A property of this selection requirement is that a client will place a different tag into the From header of an INVITE than it would place into the To header of the response to the same INVITE. This is needed in order for a client to invite itself to a session, a common case for "hairpinning" of calls in PSTN gateways. Similarly, two INVITEs for different calls will have different From tags, and two responses for different calls will have different To tags.</para>
            <para>Besides the requirement for global uniqueness, the algorithm for generating a tag is implementation-specific. Tags are helpful in fault tolerant systems, where a dialog is to be recovered on an alternate server after a failure. A server can select the tag in such a way that a backup can recognize a request as part of a dialog on the failed server, and therefore determine that it should attempt to recover the dialog and any other state associated with it.</para>
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> headers.  
            <b>RFC 3261 Syntax:</b> 
            <table >  
            <tr><td style="border-bottom:none">tag-param = </td><td style="border-bottom:none">"tag" EQUAL token</td></tr>  
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>  
            </table>  
            <example>
            <list type="bullet">
            <item>From: sip:+12125551212@server.phone2net.com;tag=887s</item> 
            </list>  
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.FromHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ToHeaderField"/> 
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.AddressedHeaderFieldBase" -->
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.SipUriHeaderFieldBase" -->
        <member name="F:Konnetic.Sip.Headers.SipUriHeaderFieldBase._uri">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipUriHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has three overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipUriHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipUriHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.Equals(Konnetic.Sip.Headers.SipUriHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.SipUriHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.SipUriHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriHeaderFieldBase.Init(Konnetic.Sip.SipUri)">
            <summary>
            Initializes the specified type.
            </summary>
            <param name="uri">The Sip-URI.</param>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriHeaderFieldBase.Uri">
            <summary>
            Gets or sets the Sip-URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriHeaderFieldBase.UriSet">
            <summary>
            Gets or sets a value indicating whether the URI has been set.
            </summary>
            <value><c>true</c> if the URI has been set; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Konnetic.Sip.Headers.AddressedHeaderFieldBase._displayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AddressedHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has five overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The initiator's URI string.</param> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The recipient's URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.#ctor(Konnetic.Sip.SipUri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The recipient's URI.</param>
            <param name="displayName">The recipient's display name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="displayName"/>.</exception> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.Parse(System.String)" -->
        <member name="M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AddressedHeaderFieldBase.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.AddressedHeaderFieldBase.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <remarks>The Display Name is always converted to a quoted string.</remarks>
            <value>The display name.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="DisplayName"/>.</exception> 
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has six overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.#ctor(Konnetic.Sip.SipUri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.#ctor(Konnetic.Sip.SipUri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.NewTag">
            <summary>
            Creates a new Tag. 
            </summary>
            <returns>A random string.</returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.RecreateTag">
            <summary>
            Regenerates the Tag for this instance.
            </summary> 
        </member>
        <member name="P:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Tag"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="F:Konnetic.Sip.Headers.ToHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ToHeaderField.ShortName">
            <summary>
            The short form of the name.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has four overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI string.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.#ctor(Konnetic.Sip.SipUri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI.</param>
            <param name="displayName">The initiator's display name.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.#ctor(Konnetic.Sip.SipUri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI.</param>
            <param name="displayName">The initiator's display name.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ToHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.op_Explicit(Konnetic.Sip.Headers.ToHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ToHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "To" / "t" ) ":" ( name-addr / addr-spec ) *( SEMI to-param )</td></tr> 
            <tr><td style="border-bottom:none">to-param = </td><td style="border-bottom:none">"tag" EQUAL token / generic-param</td></tr>
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr> 
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the To HeaderField is "t".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>To: The Operator &#060;sip:operator&#064;cs.columbia.edu&#062;;tag=287447</item> 
            <item>t: sip:+12125551212@server.phone2net.com</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ToHeaderField.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.ToHeaderField.GenericParameters" -->
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.HeaderFieldGroup`1" -->
        <member name="F:Konnetic.Sip.Headers.HeaderFieldGroup`1._headers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldGroup`1._seperator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.CopyTo(Konnetic.Sip.Headers.HeaderFieldGroup{`0})">
            <summary>
            Copies the contents of the collection to the <paramref name="headers"/> parameter.
            </summary>
            <param name="headers">A <see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup"/> to populate.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup`1"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>        
            <exception cref="T:Konnetic.Sip.SipException">Is raised when the HeaderField is marked as not allowing multiple HeaderFields.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup`1"/> class.
            </summary>
            <param name="seperator">The seperator used to seperate the HeaderFields.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="seperator"/> is null.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when the HeaderField is marked as not allowing multiple HeaderFields.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Add(`0)">
            <summary>
            Adds the specified HeaderField.
            </summary>
            <param name="header">The new HeaderField.</param>
            <returns>The position of the inserted HeaderField</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="header"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Clear">
            <summary>
            Clears this instance of all HeaderFields.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the HeaderField group. This method ensures a deep copy of the group, when a message is cloned the group can be modified without effecting the original group or HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Contains(System.String)" -->
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Contains(`0)">
            <summary>
            Checks if the collection contains a HeaderField matching the one supplied.
            </summary>
            <param name="headerField">The HeaderField to match against.</param>
            <returns>
            	<c>true</c> if the collection contains the specified HeaderField; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="headerField"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="array"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Equals(Konnetic.Sip.Headers.HeaderFieldGroup{`0})" -->
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns>
            	<c>true</c> if <paramref name="other"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.
            </returns>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive.
            </remarks>
            <overloads>
            	<summary>This method is overloaded.</summary>
            	<remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>.
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive.
            </remarks>
            <overloads>
            	<summary>This method is overloaded.</summary>
            	<remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.GetHeaderField(System.Int32)">
            <summary>
            Returns the HeaderField at the specified index value.
            </summary>
            <returns>A HeaderField.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified HeaderField at the index.
            </summary>
            <param name="index">The index position to insert the new header.</param>
            <param name="header">The HeaderField.</param>
            <threadsafety static="true" instance="false"/>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="header"/> is null.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">header = header-name HCOLON header-value *(SEPERATOR header-value)</td></tr> 
            </table>
            <para/>
            The SEPERATOR is typically the comma (","), but can be whitespace. 
            </remarks>
            <example>
            <list type="bullet">
            <item>Route: &lt;sip:alice@atlanta.com&gt;, &lt;sip:bob@biloxi.com&gt;, &lt;sip:carol@chicago.com&gt;</item>
            <item>Server: HomeServer v2</item>
            </list> 
            </example>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Remove(System.String)">
            <summary>
            Removes the specified HeaderField from the collection.
            </summary>
            <param name="fieldValue">The HeaderField value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="fieldValue"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Remove(`0)">
            <summary>
            Removes the specified header.
            </summary>
            <param name="header">The header.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="header"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.RemoveAt(System.Int32)">
            <summary>
            Removes the HeaderField at the specified index.
            </summary>
            <param name="index">The index.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.Set(`0,`0)">
            <summary>
            Adds or updates specified HeaderField value.
            </summary>
            <param name="oldHeader">The old HeaderField.</param>
            <param name="newHeader">The new HeaderField.</param>
            <threadsafety static="true" instance="false"/>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="oldHeader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="newHeader"/> is null.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.ToUriString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a format suitable for URIs.
            </summary>        
            <remarks>The string is escaped.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.GetStringValue">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the group of HeaderFields.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the group of HeaderFields.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.ToUriString(System.String[])">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a format suitable for URIs.
            </summary>
            <param name="exclude">The exclude.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>The string is escaped.</remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldGroup`1.ThrowOnSecurityGroup">
            <summary>
            Throws if the user attempts to instantiate the generic class with a security HeaderField.
            </summary>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when the user attempts to instantiate generic class with a security HeaderField.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>The count.</value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value>Whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized.</value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>The synchronized object.</value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.Seperator">
            <summary>
            Gets or sets the seperator.
            </summary>
            <value>The seperator.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="E:Konnetic.Sip.Headers.HeaderFieldGroup`1.OnChange">
            <summary>
            Occurs when the collection is altered (add, update or delete).
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value>The HeaderField at the <param name="index"/> index in the collection.</value> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.Item(System.String)">
            <summary>
            Gets or sets the specified HeaderField from collection. Returns null if parameter with specified name doesn't exist.
            </summary>
            <value>
            The HeaderField matching the <param name="fieldValue"/> parameter.
            </value>
            <returns>Returns parameter with specified name or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="fieldValue"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldGroup`1.Item(System.String,System.StringComparison)">
            <summary>
            Gets or sets the <see cref="!:T"/> with the specified field value. Returns null if parameter with specified name doesn't exist.
            </summary>
            <param name="comparisonType">The string comparision algorithm.</param>
            <value>
            The HeaderField matching the <param name="fieldValue"/> parameter.
            </value>
            <returns>Returns parameter with specified name or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="fieldValue"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Konnetic.Sip.ClientTransactionState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.WaitingToStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Calling">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Trying">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Proceeding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Confirmed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Terminated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ClientTransactionState.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.DateHeaderField">
            <summary> The Date HeaderField contains the date and time. The Date HeaderField reflects the time when the request or response is first sent.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC1123</b>
            <para/>
            SIP restricts the time zone in SIP-date to "GMT". Format: ddd, dd MMM yyyy HH':'mm':'ss 'GMT'. The date is case-sensitive.
            <para/>
            <note type="implementnotes">The Date HeaderField can be used by simple end systems without a battery-backed clock to acquire a notion of current time. However, in its GMT form, it requires clients to know their offset from GMT.</note> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Date" ":" wkday "," SPACE date1 SPACE time SPACE "GMT"</td></tr>
            <tr><td style="border-bottom:none">date1 = </td><td style="border-bottom:none">2DIGIT SPACE month SPACE 4DIGIT; day month year (e.g., 02 Jun 1982)</td></tr>
            <tr><td style="border-bottom:none">time = </td><td style="border-bottom:none">2DIGIT ":" 2DIGIT ":" 2DIGIT; 00:00:00 - 23:59:59</td></tr> 
            <tr><td style="border-bottom:none">wkday = </td><td style="border-bottom:none">"Mon" / "Tue" / "Wed" / "Thu" / "Fri" / "Sat" / "Sun"</td></tr> 
            <tr><td style="border-bottom:none">month = </td><td style="border-bottom:none">"Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"</td></tr>  
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Date: Sat, 13 Nov 2010 23:29:00 GMT</item>  
            </list> 
            </example>
            </remarks>  
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.DateHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.op_Explicit(Konnetic.Sip.Headers.DateHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.Equals(Konnetic.Sip.Headers.DateHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.DateHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Date" ":" wkday "," SPACE date1 SPACE time SPACE "GMT"</td></tr>
            <tr><td style="border-bottom:none">date1 = </td><td style="border-bottom:none">2DIGIT SPACE month SPACE 4DIGIT; day month year (e.g., 02 Jun 1982)</td></tr>
            <tr><td style="border-bottom:none">time = </td><td style="border-bottom:none">2DIGIT ":" 2DIGIT ":" 2DIGIT; 00:00:00 - 23:59:59</td></tr> 
            <tr><td style="border-bottom:none">wkday = </td><td style="border-bottom:none">"Mon" / "Tue" / "Wed" / "Thu" / "Fri" / "Sat" / "Sun"</td></tr> 
            <tr><td style="border-bottom:none">month = </td><td style="border-bottom:none">"Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"</td></tr>  
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Date: Sat, 13 Nov 2010 23:29:00 GMT</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.SetDate(System.DateTime)">
            <summary>
            Sets the date.
            </summary>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.DateHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.DateHeaderField.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.ErrorInfoHeaderField">
            <summary>The Error-Info HeaderField provides a pointer to additional information about the error status <see cref="T:Konnetic.Sip.Messages.Response"/>.
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            A client may treat a SIP or SIPS URI in an Error-Info HeaderField as if it were a <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> in a redirect and generate a new INVITE, resulting in a recorded announcement session being established. A non-SIP URI may be rendered to the user.
            <para/>
            <note type="implementnotes">SIP clients have user interface capabilities ranging from pop-up windows and audio on PC softclients to audio-only on "black" phones or endpoints connected via gateways. Rather than forcing a server generating an error to choose between sending an error status code with a detailed reason phrase and playing an audio recording, the Error-Info HeaderField allows both to be sent. The client then has the choice of which error indicator to render to the caller.</note>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Error-Info" ":" error-uri *("," error-uri)</td></tr> 
            <tr><td style="border-bottom:none">error-uri = </td><td style="border-bottom:none">&lt; absoluteURI &gt; *( SEMI generic-param )</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet"> 
            <item>Error-Info: &lt;sip:not-in-service-recording@atlanta.com&gt;</item> 
            </list> 
            </example>
            </remarks>  
            <seealso cref="T:Konnetic.Sip.Headers.ContactEncodingHeaderField"/> 
        </member>
        <member name="F:Konnetic.Sip.Headers.ErrorInfoHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ErrorInfoHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.op_Explicit(Konnetic.Sip.Headers.ErrorInfoHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ErrorInfoHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ErrorInfoHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Error-Info" ":" error-uri *("," error-uri)</td></tr> 
            <tr><td style="border-bottom:none">error-uri = </td><td style="border-bottom:none">&lt; absoluteURI &gt; *( SEMI generic-param )</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet"> 
            <item>Error-Info: &lt;sip:not-in-service-recording@atlanta.com&gt;</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.ErrorInfoHeaderField.GenericParameters" -->
        <member name="T:Konnetic.Sip.Headers.MinExpiresHeaderField">
            <summary>The Min-Expires HeaderField conveys the minimum refresh interval supported for soft-state elements managed by that server.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            <b>Error Responses</b>
            <para/>
            If a client receives a 423 (Interval Too Brief) response, it may retry the registration after making the expiration interval of all contact addresses in the REGISTER request equal to or greater than the expiration interval within the Min-Expires HeaderField of the 423 (Interval Too Brief) response.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Min-Expires" ":" 1*DIGIT</td></tr>  
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <para/>
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Min-Expires: 60</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.ContactHeaderFieldBase"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.SecondsHeaderFieldBase" -->
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SecondsHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SecondsHeaderFieldBase"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.Equals(Konnetic.Sip.Headers.SecondsHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.SecondsHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.SecondsHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SecondsHeaderFieldBase.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.SecondsHeaderFieldBase.MaxSeconds">
            <summary>
            Gets the max seconds allowed.
            </summary>
            <value>The max seconds.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SecondsHeaderFieldBase.MinSeconds">
            <summary>
            Gets the min seconds allowed.
            </summary>
            <value>The min seconds.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SecondsHeaderFieldBase.Seconds">
            <summary>
            Gets or sets the seconds value. A value between 0 and (2^32)-1.
            </summary>
            <value>The seconds.</value>
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MinExpiresHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MinExpiresHeaderField"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.MinExpiresHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.MinExpiresHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.MinExpiresHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.op_Explicit(Konnetic.Sip.Headers.MinExpiresHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.MinExpiresHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.MinExpiresHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.MinExpiresHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Min-Expires" ":" 1*DIGIT</td></tr>  
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <para/>
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Min-Expires: 60</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.ContentDispositionHeaderField">
            <summary>
            The Content-Disposition HeaderField describes how the message body or, for multipart messages, a message body part is to be interpreted by the client or server. 
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            A mechanism is needed to allow the sender to transmit presentational information to the recipient; the Content-Disposition header provides this mechanism, allowing each component of a message to be tagged with an indication of its desired presentation semantics. 
            <para/>
            This SIP HeaderField extends the MIME Content-Type. Several new disposition-types of the Content-Disposition header are defined by SIP. The value session indicates that the body part describes a session, for either calls or early (pre-call) media. The value render indicates that the body part should be displayed or otherwise rendered to the user. Note that the value render is used rather than inline to avoid the connotation that the MIME body is displayed as a part of the rendering of the entire message (since the MIME bodies of SIP messages oftentimes are not displayed to users). For backward-compatibility, if the Content-Disposition HeaderField is missing, the server should assume bodies of Content-Type "application/sdp" are the disposition session, while other content types are render. 
            <para/>
            The disposition type icon indicates that the body part contains an image suitable as an iconic representation of the caller or callee that could be rendered informationally by a user agent when a message has been received, or persistently while a dialog takes place. The value alert indicates that the body part contains information, such as an audio clip, that should be rendered by the user agent in an attempt to alert the user to the receipt of a request, generally a request that initiates a dialog; this alerting body could for example be rendered as a ring tone for a phone call after a 180 Ringing provisional response has been sent.
            <para/>
            Any MIME body with a disposition-type that renders content to the user should only be processed when a message has been properly authenticated. 
            <para/>
            The handling parameter describes how the server should react if it receives a message body whose content type or disposition type it does not understand. The parameter has defined values of optional and required. If the handling parameter is missing, the value required should be assumed.    
            <para/>
            If this HeaderField is missing, the MIME type determines the default content disposition. If there is none, "render" is assumed.
             <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Content-Disposition" ":" disp-type *( SEMI disp-param )</td></tr>
            <tr><td style="border-bottom:none">disp-type = </td><td style="border-bottom:none">"render" / "session" / "icon" / "alert" / token</td></tr>
            <tr><td style="border-bottom:none">disp-param = </td><td style="border-bottom:none">handling-param / generic-param</td></tr>
            <tr><td style="border-bottom:none">handling-param = </td><td style="border-bottom:none">"handling" EQUAL ( "optional" / "required" / token )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Content-Disposition: session</item> 
            </list> 
            </example>
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has three overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> class.
            </summary>
            <param name="dispositionType">Type of the disposition.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.#ctor(Konnetic.Sip.Headers.DispositionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> class.
            </summary>
            <param name="dispositionType">Type of the disposition.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.#ctor(Konnetic.Sip.Headers.DispositionType,Konnetic.Sip.Headers.ContentDispositionHandling)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> class.
            </summary>
            <param name="dispositionType">Type of the disposition.</param>
            <param name="handling">The handling.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ContentDispositionHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.op_Explicit(Konnetic.Sip.Headers.ContentDispositionHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.Equals(Konnetic.Sip.Headers.ContentDispositionHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Content-Disposition" ":" disp-type *( SEMI disp-param )</td></tr>
            <tr><td style="border-bottom:none">disp-type = </td><td style="border-bottom:none">"render" / "session" / "icon" / "alert" / token</td></tr>
            <tr><td style="border-bottom:none">disp-param = </td><td style="border-bottom:none">handling-param / generic-param</td></tr>
            <tr><td style="border-bottom:none">handling-param = </td><td style="border-bottom:none">"handling" EQUAL ( "optional" / "required" / token )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            </table>
            <para/> 
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Content-Disposition: session</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentDispositionHeaderField.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.ContentDispositionHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.ContentDispositionHeaderField.DispositionType">
            <summary>
            Gets or sets the type of the disposition.
            </summary>
            <value>The type of the disposition.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="DispositionType"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.<paramref name="DispositionType"/>.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.ContentDispositionHeaderField.Handling">
            <summary>
            Gets or sets the handling.
            </summary>
            <value>The handling.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Handling"/>.</exception> 
        </member>
        <member name="T:Konnetic.Sip.Messages.SipMethod">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Konnetic.Sip.Messages.SipMethod.Ack" -->
        <member name="F:Konnetic.Sip.Messages.SipMethod.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Invite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Message">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Notify">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Ok">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Options">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Prack">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Publish">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Refer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Register">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Subscribe">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.SipMethod.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.SipMethod"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.op_Implicit(System.String)~Konnetic.Sip.Messages.SipMethod">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Messages.SipMethod"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns> 
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.op_Implicit(Konnetic.Sip.Messages.SipMethod)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Konnetic.Sip.Messages.SipMethod"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.op_Inequality(Konnetic.Sip.Messages.SipMethod,Konnetic.Sip.Messages.SipMethod)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="s1">The first <see cref="T:Konnetic.Sip.Messages.SipMethod"/> instance.</param>
            <param name="s2">The second <see cref="T:Konnetic.Sip.Messages.SipMethod"/> instance.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.op_Equality(Konnetic.Sip.Messages.SipMethod,Konnetic.Sip.Messages.SipMethod)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="s1">The first <see cref="T:Konnetic.Sip.Messages.SipMethod"/> instance.</param>
            <param name="s2">The second <see cref="T:Konnetic.Sip.Messages.SipMethod"/> instance.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.Equals(Konnetic.Sip.Messages.SipMethod)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.SipMethod.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Messages.SipMethod.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:Konnetic.Sip.SipStyleUriParser">
            <summary>
            A customizable parser based on the SIP scheme.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._headers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._host">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._lr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._maddr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._method">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._parameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._password">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._port">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._scheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._transport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._ttl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._user">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._userinfoReplace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipStyleUriParser._userparam">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipStyleUriParser"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.#ctor(System.GenericUriParserOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipStyleUriParser"/> class.
            </summary>
            <remarks>This constructor initializes the <see cref="T:System.GenericUriParserOptions"/> enumeration of the base class to the passed <paramref name="options"/> argument.</remarks>
            <param name="options">The options for this <see cref="T:System.GenericUriParser"/>.</param>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.ParseHeaders(System.String,Konnetic.Sip.Headers.HeaderFieldCollection@)">
            <summary>
            Parses the parameters and returns a collection of header fields.
            </summary>
            <param name="uri">The <see cref="T:System.String"/> containing a URI.</param>
            <returns>A collection of Headers</returns>        
            <overloads>
            <summary>The method has two overloads.</summary>
            <remarks>Overloads allow for accepting a <see cref="T:System.String"/> or <see cref="T:Konnetic.Sip.SipUri"/>.</remarks>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.ParseHeaders(Konnetic.Sip.SipUri,Konnetic.Sip.Headers.HeaderFieldCollection@)">
            <summary>
            Parses the headers.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns> 
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.ParseParameters(System.String,Konnetic.Sip.Headers.SipUriParameterCollection@)">
            <summary>
            Parses the parameters and returns a collection of parameters.
            </summary>
            <param name="uri">The <see cref="T:System.String"/> containing a URI.</param>
            <returns>A collection of SipParamaters</returns>        
            <overloads>
            <summary>The method has two overloads.</summary>
            <remarks>Overloads allow for accepting a <see cref="T:System.String"/> or <see cref="T:Konnetic.Sip.SipUri"/>.</remarks>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.ParseParameters(Konnetic.Sip.SipUri,Konnetic.Sip.Headers.SipUriParameterCollection@)">
            <summary>
            Parses the parameters.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns> 
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.GetComponents(Konnetic.Sip.SipUri,Konnetic.Sip.SipUriComponents)">
            <summary>
            Gets the components from a <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <param name="uri">The <see cref="T:Konnetic.Sip.SipUri"/> to parse.</param>
            <param name="components">The <see cref="T:Konnetic.Sip.SipUriComponents"/> to retrieve from the URI.</param>
            <returns>A string that contains the components.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="uri"/> property is null.</exception>
            <overloads>
            <summary>The method has three overload.</summary>
            <remarks>Overloads allow for accepting a <see cref="T:System.String"/>, <see cref="T:Konnetic.Sip.SipUri"/> or <see cref="T:System.Uri"/>.</remarks>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.GetComponents(System.String,Konnetic.Sip.SipUriComponents)">
            <summary>
            Gets the components from a <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <param name="uri">The <see cref="T:Konnetic.Sip.SipUri"/> to parse.</param>
            <param name="components">The <see cref="T:Konnetic.Sip.SipUriComponents"/> to retrieve from the URI.</param>
            <returns>A string that contains the components.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="uri"/> property is null.</exception>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
            <summary>
            Gets the components from a URI.
            </summary>
            <param name="uri">The URI to parse.</param>
            <param name="components">The <see cref="T:System.UriComponents"/> to retrieve from <paramref name="uri"/>.</param>
            <param name="format">One of the <see cref="T:System.UriFormat"/> values that controls how special characters are escaped.</param>
            <returns>A string that contains the components.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="uriFormat"/> is invalid.
            - or -
            <paramref name="uriComponents"/> is not a combination of valid <see cref="T:System.UriComponents"/> values.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="uri"/> is not an absolute URI. Relative URIs cannot be used with this method.
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
            <summary>
            Initialize the state of the parser and validate the URI.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to validate.</param>
            <param name="parsingError">Validation errors, if any.</param>
        </member>
        <member name="M:Konnetic.Sip.SipStyleUriParser.OnRegister(System.String,System.Int32)">
            <summary>
            Invoked by the Framework when a <see cref="T:System.UriParser"/> method is registered.
            </summary>
            <param name="schemeName">The scheme that is associated with this <see cref="T:System.UriParser"/>.</param>
            <param name="defaultPort">The port number of the scheme.</param>
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.DefaultPort">
            <summary>
            Gets or sets the default port for the scheme.
            </summary>
            <value>The default port.</value>
            <exception cref="T:Konnetic.Sip.SipOutOfRangeException">Thrown when <paramref name="DefaultPort"/> is not between zero and 65535.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.Password">
            <summary>
            Gets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.Scheme">
            <summary>
            Gets the scheme.
            </summary>
            <value>The scheme.</value>
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Konnetic.Sip.SipStyleUriParser.InternalSyncObject">
            <summary>
            Gets the internal sync object.
            </summary>
            <value>The internal sync object.</value>
        </member>
        <member name="T:Konnetic.Sip.SipUriComponents">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Password">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Host">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.UserParameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Method">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.MulticastAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.TimeToLive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Transport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.LooseRouter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Headers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.UserInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.AbsoluteUri">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.SipRequestUrl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.HostPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Scheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Fragment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.SerializationInfoString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.HttpRequestUrl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.SchemeAndServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.PathAndQuery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Path">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.KeepDelimiter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.Query">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.StrongAuthority">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipUriComponents.StrongPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.HeaderFieldCollection">
            <summary>
            A collection of HeaderFields used by SIP messages to process zero or more HeaderFields 
            </summary>
            <remarks>
            Multiple HeaderFields of the same field name whose value is a comma-separated list can be combined into one HeaderField. Clients should use the <see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/> to combine multiple HeaderFields.    /// <para/>
            <note type="caution">Duplicate HeaderFields are not allowed. Use <see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup"/> to combine multiple HeaderFields of the same type.</note>
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.HeaderFieldCollection"/> class.
            </summary>
            <remarks>The default constructor.</remarks> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.HeaderFieldCollection.Add(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.HeaderFieldCollection.Add(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.HeaderFieldCollection.Add(Konnetic.Sip.Headers.HeaderFieldBase)" -->
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Clear">
            <summary>
            Clears this instance of all HeaderFields.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Contains(System.String)">
            <summary>
            Checks if the collection contains a HeaderField with the specified name.
            </summary>
            <param name="name">The HeaderField name.</param>        
            <returns>
            	<c>true</c> if the collection contains the HeaderField specified; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref name="name"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Contains(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Checks if the collection contains a HeaderField.
            </summary>
            <param name="field">The HeaderField to match against.</param>
            <returns>
            	<c>true</c> if the collection contains the HeaderField specified; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref name="field"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.System#Collections#Generic#IEnumerable{Konnetic#Sip#Headers#HeaderFieldBase}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Remove(System.String)">
            <summary>
            Removes the HeaderField specified from the collection.
            </summary>
            <param name="name">The HeaderField name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref name="name"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Set(System.String,System.String)">
            <summary>
            Adds or updates specified HeaderField.
            </summary>
            <param name="name">The HeaderField name.</param>
            <param name="value">The HeaderField value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref name="name"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="value"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Set(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Adds or updates specified HeaderField.
            </summary>
            <param name="field">The HeaderField to add or update.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="field"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="useCompactForm">if set to <c>true</c> then the output used the compact form for applicable HeaderFields.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.ToUriString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a format suitable for URIs.
            </summary>        
            <remarks>The string is escaped.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.Update(System.String,System.String)">
            <summary>
            Updates the header found matching the <paramref name="name">name</paramref> using the new <paramref name="value">value</paramref>.
            </summary>
            <param name="name">Name of the HeaderField.</param>
            <param name="value">The new HeaderField value.</param>
            <returns>
            	<c>true</c> if the HeaderField was updated; otherwise, <c>false</c>.
            </returns> 
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="name"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="value"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldCollection.ToUriString(System.String[])">
            <summary>
            Toes the URI string.
            </summary>
            <param name="exclude">The exclude.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="value"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldCollection.Fields(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> at the specified index.
            </summary>
            <value>The HeaderField</value>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when the change would create a duplicate entry.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldCollection.Fields(System.String)">
            <summary>
            Gets or sets the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> with the specified name.
            </summary>
            <value>The HeaderField</value>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="name"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when the change would create a duplicate entry.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldCollection.Fields(System.String,System.StringComparison)">
            <summary>
            Gets or sets the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> with the specified field name.
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="name"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Konnetic.Sip.TransactionRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransactionRegistry._supportedMethods">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransactionRegistry._supportedScheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransactionRegistry._clientTransactions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransactionRegistry._dialogs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.TransactionRegistry._serverTransactions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.RegisterClientTransaction(Konnetic.Sip.ClientTransaction)">
            <summary>
            Registers the client transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.RegisterDialog(Konnetic.Sip.Dialog)">
            <summary>
            Registers the dialog.
            </summary>
            <param name="dialog">The dialog.</param>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.RegisterServerTransaction(Konnetic.Sip.ServerTransaction)">
            <summary>
            Registers the server transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.GetRequestKey(Konnetic.Sip.Messages.Request)">
            <summary>
            Gets the request key.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.MatchClientTransaction(Konnetic.Sip.Messages.Response,Konnetic.Sip.ClientTransaction@)">
            <summary>
            Matches the client transaction.
            </summary>
            <param name="response">The response.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.MatchDialog(Konnetic.Sip.Messages.Request,Konnetic.Sip.Dialog@)">
            <summary>
            Matches the dialog.
            </summary>
            <param name="request">The request.</param>
            <param name="dialog">The dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.MatchDialog(Konnetic.Sip.Messages.Response,Konnetic.Sip.Dialog@)">
            <summary>
            Matches the dialog.
            </summary>
            <param name="response">The response.</param>
            <param name="dialog">The dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.MatchServerTransaction(Konnetic.Sip.Messages.Request,Konnetic.Sip.ServerTransaction@)">
            <summary>
            Matches the server transaction.
            </summary>
            <param name="request">The request.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.PacketRecieved(Konnetic.Sip.PacketReceivedEventArgs)">
            <summary>
            Packets the recieved.
            </summary>
            <param name="e">The <see cref="T:Konnetic.Sip.PacketReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.ProcessRequest(System.String,System.IO.StreamReader,System.Net.IPEndPoint,Konnetic.Sip.TransportType)">
            <summary>
            Processes the request.
            </summary>
            <param name="RLine">The R line.</param>
            <param name="reader">The reader.</param>
            <param name="endPoint">The end point.</param>
            <param name="transport">The transport.</param>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.ProcessResponse(System.String,System.IO.StreamReader,Konnetic.Sip.TransportType)">
            <summary>
            Processes the response.
            </summary>
            <param name="RLine">The R line.</param>
            <param name="reader">The reader.</param>
            <param name="transport">The transport.</param>
        </member>
        <member name="M:Konnetic.Sip.TransactionRegistry.StringArrayContains(System.Array,System.String)">
            <summary>
            Strings the array contains.
            </summary>
            <param name="a">A.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="E:Konnetic.Sip.TransactionRegistry.NewRequest">
            <summary>
            Occurs when [new request].
            </summary>
        </member>
        <member name="E:Konnetic.Sip.TransactionRegistry.UnMatchedResponse">
            <summary>
            Occurs when [un matched response].
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.SubjectHeaderField">
            <summary>The Subject HeaderField provides a summary or indicates the nature of the call, allowing call filtering without having to parse the session description. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The session description does not have to use the same subject indication as the invitation.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Subject" / "s" ) ":" [TRIMMED_UTF8_TEXT]</td></tr>  
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Subject HeaderField is "s".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Subject: Need more boxes</item> 
            <item>s: Tech Support</item> 
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.SubjectHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.op_Explicit(Konnetic.Sip.Headers.SubjectHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.Equals(Konnetic.Sip.Headers.SubjectHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.SubjectHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Subject" / "s" ) ":" [TRIMMED_UTF8_TEXT]</td></tr>  
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Subject HeaderField is "s".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Subject: Need more boxes</item> 
            <item>s: Tech Support</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SubjectHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.SubjectHeaderField.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.ServerHeaderField">
            <summary>The Server HeaderField contains information about the software used by the server to handle the request. 
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The field can contain multiple product tokens and comments identifying the server and any significant subproducts. The product tokens are listed in order of their significance for identifying the application. If the response is being forwarded through a proxy, the proxy application must not modify the Server response-header. Instead, it should include a Via field.
            <para/>
            Revealing the specific software version of the server might allow the server to become more vulnerable to attacks against software that is known to contain security holes. Implementers should make the Server HeaderField a configurable option.
            <para/>
            <b>RFC 3261 Syntax:</b>
            <table>
            <tr><td colspan="2" style="border-bottom:none">"Server" ":" server-val *(LWS server-val)</td></tr>  
            <tr><td style="border-bottom:none">server-val = </td><td style="border-bottom:none">token [SLASH token] / comment</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>Server: HomeServer v2</item>
            </list>
            </example>
            </remarks>
        </member>
        <member name="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase">
            <summary> 
            The <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> contains information about the software used by the server to handle the request.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para>Revealing the specific software version of the server might allow the server to become more vulnerable to attacks against software that is known to contain security holes. Implementers should make the Server header field a configurable option.</para> 
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.ServerHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> headers.  
            <b>RFC 3261 Syntax:</b> 
            <table >  
            <tr><td style="border-bottom:none">server-val = </td><td style="border-bottom:none">product / comment</td></tr> 
            <tr><td style="border-bottom:none">product = </td><td style="border-bottom:none">token [SLASH product-version]</td></tr> 
            <tr><td style="border-bottom:none">product-version = </td><td style="border-bottom:none">token</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            </table>  
            <example>
            <list type="bullet">
            <item>User-Agent: Softphone Beta1.5</item>
            <item>Server: HomeServer v2</item>
            </list>  
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.ServerHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> 
        </member>
        <member name="F:Konnetic.Sip.Headers.ServerValueHeaderFieldBase._comment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ServerValueHeaderFieldBase._productName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ServerValueHeaderFieldBase._productVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has three overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> class.
            </summary>
            <param name="productName">Name of the product.</param>
            <param name="productVersion">The product version.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> class.
            </summary>
            <param name="productName">Name of the product.</param>
            <param name="productVersion">The product version.</param>
            <param name="comment">A comment.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> class.
            </summary>
            <param name="comment">A comment.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.Equals(Konnetic.Sip.Headers.ServerValueHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.ServerValueHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Comment"/>.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>The name of the product.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="ProductName"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.ServerValueHeaderFieldBase.ProductVersion">
            <summary>
            Gets or sets the product version.
            </summary>
            <value>The product version.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="ProductVersion"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SecondsHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ServerHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ServerHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ServerHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.op_Explicit(Konnetic.Sip.Headers.ServerHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ServerHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ServerHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ServerHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Server" ":" server-val *(LWS server-val)</td></tr>  
            <tr><td style="border-bottom:none">server-val = </td><td style="border-bottom:none">token [SLASH token] / comment</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>  
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Server: HomeServer v2</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.DialogState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.DialogState.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.DialogState.Confirmed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.DialogState.Terminating">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.DialogState.Terminated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.DialogState.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.DialogState.Invalid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.HeaderFieldFactory">
            <summary>
            Represents a simple factory creating HeaderFields. 
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldFactory.CreateHeaderField(System.String)">
            <summary>
            Creates a new HeaderField. A simple factory that returns a <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance given the name of the field.
            </summary>
            <param name="name">The name of the HeaderField.</param>
            <returns>A <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> HeaderField instance. A GenericHeaderField is returned if there is no match on the name.</returns>
            <exception cref="T:Konnetic.Sip.SipFormatException">Is raised when <paramref value="name"/> is not recognied and is not a valid token.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldFactory.CreateHeaderFieldFromLine(System.String)">
            <summary>
            Creates the HeaderField from a message-header line (i.e., a line with ending with a CRLF).
            </summary>
            <param name="headerLine">The message-header line.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.RequestLineHeaderField" -->
        <member name="F:Konnetic.Sip.Headers.RequestLineHeaderField._method">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.RequestLineHeaderField._uri">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.RequestLineHeaderField._scheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.RequestLineHeaderField._version">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RequestLineHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RequestLineHeaderField"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.RequestLineHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.RequestLineHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.RequestLineHeaderField"/> populated from the passed in string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.op_Explicit(Konnetic.Sip.Headers.RequestLineHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.RequestLineHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.RequestLineHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">Method SPACE Request-URI SPACE SIP-Version CRLF</td></tr> 
            <tr><td style="border-bottom:none">Request-URI = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">absoluteURI = </td><td style="border-bottom:none">scheme ":" ( ( "//" authority [ abs-path ] / "/" path-segments ) [ "?" query ] / opaque-part )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>INVITE sip:bob@192.0.2.4 SIP/2.0</item> 
            <item>REGISTER sip:registrar.biloxi.com SIP/2.0</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestLineHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary> 
            <returns>
            	<c>true</c> if instance represents a valid RequestLine; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.RequestLineHeaderField.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.RequestLineHeaderField.RequestUri">
            <summary>
            Gets or sets the request URI.
            </summary>
            <value>The request URI.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.RequestLineHeaderField.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.RequestLineHeaderField.Scheme">
            <summary>
            Gets or sets the scheme.
            </summary>
            <value>The scheme.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField">
            <summary> 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"WWW-Authenticate" ":" ("Digest" WHITESPACE digest-cln *("," digest-cln)) / other-challenge</td></tr> 
            <tr><td style="border-bottom:none">other-challenge = </td><td style="border-bottom:none">token WHITESPACE auth-param *("," auth-param)</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">digest-cln = </td><td style="border-bottom:none">realm / domain / nonce / opaque / stale / algorithm / qop-options / auth-param</td></tr>
            <tr><td style="border-bottom:none">realm = </td><td style="border-bottom:none">"realm" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">domain = </td><td style="border-bottom:none">"domain" EQUAL " URI *( 1*SP URI ) "</td></tr>
            <tr><td style="border-bottom:none">nonce = </td><td style="border-bottom:none">"nonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">opaque = </td><td style="border-bottom:none">"opaque" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">stale = </td><td style="border-bottom:none">"stale" EQUAL ( "true" / "false" )</td></tr>
            <tr><td style="border-bottom:none">algorithm = </td><td style="border-bottom:none">"algorithm" EQUAL ( "MD5" / "MD5-sess" / token )</td></tr>
            <tr><td style="border-bottom:none">qop-options = </td><td style="border-bottom:none">"qop" EQUAL ""auth" / "auth-int" / token *("," "auth" / "auth-int" / token) "</td></tr>
            
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note> 
            <para/>
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>WWW-Authenticate: Digest realm="atlanta.com", domain="sip:boxesbybob.com", qop="auth", nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", stale=FALSE, algorithm=MD5</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase">
            <summary>
            The <see cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> provides Authorization credential information for HeaderFields. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616, RFC2617</b>
            <para/>
            The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> and <seealso cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> headers.  
            <para/>
            SIP provides a simple challenge-response authentication mechanism that may be used by a server to challenge a client request and by a client to provide authentication information. 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td style="border-bottom:none">other-challenge = </td><td style="border-bottom:none">token WHITESPACE auth-param *("," auth-param)</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">digest-cln = </td><td style="border-bottom:none">realm / domain / nonce / opaque / stale / algorithm / qop-options / auth-param</td></tr>
            <tr><td style="border-bottom:none">realm = </td><td style="border-bottom:none">"realm" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">domain = </td><td style="border-bottom:none">"domain" EQUAL " URI *( 1*SP URI ) "</td></tr>
            <tr><td style="border-bottom:none">nonce = </td><td style="border-bottom:none">"nonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">opaque = </td><td style="border-bottom:none">"opaque" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">stale = </td><td style="border-bottom:none">"stale" EQUAL ( "true" / "false" )</td></tr>
            <tr><td style="border-bottom:none">algorithm = </td><td style="border-bottom:none">"algorithm" EQUAL ( "MD5" / "MD5-sess" / token )</td></tr>
            <tr><td style="border-bottom:none">qop-options = </td><td style="border-bottom:none">"qop" EQUAL ""auth" / "auth-int" / token *("," "auth" / "auth-int" / token) "</td></tr>
            
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>    
            <example>
            <list type="bullet">
            <item>WWW-Authenticate: Digest realm="atlanta.com", domain="sip:boxesbybob.com", qop="auth", nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", algorithm=MD5</item>  
            <item>Proxy-Authenticate: Digest realm="atlanta.com" nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", stale=FALSE, algorithm=MD5</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.SchemeHeaderFieldBase"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> class.
            </summary>
            <param name="scheme">The scheme.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.Equals(Konnetic.Sip.Headers.ChallengeHeaderFieldBase)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td style="border-bottom:none">other-challenge = </td><td style="border-bottom:none">token WHITESPACE auth-param *("," auth-param)</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">digest-cln = </td><td style="border-bottom:none">realm / domain / nonce / opaque / stale / algorithm / qop-options / auth-param</td></tr>
            <tr><td style="border-bottom:none">realm = </td><td style="border-bottom:none">"realm" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">domain = </td><td style="border-bottom:none">"domain" EQUAL " URI *( 1*SP URI ) "</td></tr>
            <tr><td style="border-bottom:none">nonce = </td><td style="border-bottom:none">"nonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">opaque = </td><td style="border-bottom:none">"opaque" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">stale = </td><td style="border-bottom:none">"stale" EQUAL ( "true" / "false" )</td></tr>
            <tr><td style="border-bottom:none">algorithm = </td><td style="border-bottom:none">"algorithm" EQUAL ( "MD5" / "MD5-sess" / token )</td></tr>
            <tr><td style="border-bottom:none">qop-options = </td><td style="border-bottom:none">"qop" EQUAL ""auth" / "auth-int" / token *("," "auth" / "auth-int" / token) "</td></tr>
            
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>    
            <example>
            <list type="bullet">
            <item>WWW-Authenticate: Digest realm="atlanta.com", domain="sip:boxesbybob.com", qop="auth", nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", stale=FALSE, algorithm=MD5</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.AuthParameters" -->
        <member name="P:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <remarks>A quoted, space-separated list of URIs, as specified in RFC XURI, that define the protection space. If a URI is an abs_path, it is relative to the canonical root URL of the server being accessed. An absoluteURI in this list may refer to a different server than the one being accessed. The client can use this list to determine the set of URIs for which the same authentication information may be sent: any URI that has a URI in this list as a prefix (after both have been made absolute) may be assumed to be in the same protection space. If this directive is omitted or its value is empty, the client should assume that the protection space consists of all URIs on the responding server.</remarks>
            <value>The domain.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.MessageQop">
            <summary>
            Gets or sets the message qop. Indicates what "quality of protection" the client has applied to the message.
            </summary>
            <remarks>Indicates what "quality of protection" the client has applied to the message. If present, its value must be one of the alternatives the server indicated it supports in the WWW-Authenticate header. These values affect the computation of the request-digest. Note that this is a single token, not a quoted list of alternatives as in WWW- Authenticate. This directive is optional in order to preserve backward compatibility with a minimal implementation of RFC 2069, but SHOULD be used if the server indicated that qop is supported by providing a qop directive in the WWW-Authenticate header field.</remarks>
            <value>The message qop.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="MessageQop"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.<paramref name="MessageQop"/>.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.Stale">
            <summary>
            Gets or sets a value indicating the stale value. It is a flag, indicating that the previous request from the client was rejected because the nonce value was stale.
            </summary>
            <remarks>A flag, indicating that the previous request from the client was rejected because the nonce value was stale. If stale is TRUE (case-insensitive), the client may wish to simply retry the request with a new encrypted response, without reprompting the user for a new username and password. The server should only set stale to TRUE if it receives a request for which the nonce is invalid but with a valid digest for that nonce (indicating that the client knows the correct username/password). If stale is FALSE, or anything other than TRUE, or the stale directive is not present, the username and/or password are invalid, and new values must be obtained.</remarks>
            <value><c>true</c> if stale; otherwise, <c>false</c>.</value>
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when the underlying parameter string cannot be converted to a bool.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.ChallengeHeaderFieldBase.DomainSet">
            <summary>
            Gets or sets a value indicating whether the domain has been set.
            </summary>
            <value><c>true</c> if the domain has been set; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> class.
            </summary>
            <param name="scheme">The scheme.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.WwwAuthenticateHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.op_Explicit(Konnetic.Sip.Headers.WwwAuthenticateHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.WwwAuthenticateHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.InReplyToHeaderField">
            <summary>The In-Reply-To HeaderField enumerates the Call-IDs that this call references or returns.
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            The enumerated Call-IDs may have been cached by the client then included in this HeaderField in a return call. 
            <para/>
            <note type="implementnotes">Caching allows automatic call distribution systems to route return calls to the originator of the first call. This also allows callees to filter calls, so that only return calls for calls they originated will be accepted. This field is not a substitute for request authentication.</note> 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"In-Reply-To" ":" callid *("," callid)</td></tr> 
            <tr><td style="border-bottom:none">callid = </td><td style="border-bottom:none">word [ "@" word ]</td></tr> 
            <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>In-Reply-To: 70710@saturn.bell-tel.com, 17320@saturn.bell-tel.com</item>  
            </list> 
            </example>
            </remarks>  
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> class.
            </summary>
            <param name="callId">The call id.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.InReplyToHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.op_Explicit(Konnetic.Sip.Headers.InReplyToHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.InReplyToHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.InReplyToHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"In-Reply-To" ":" callid *("," callid)</td></tr> 
            <tr><td style="border-bottom:none">callid = </td><td style="border-bottom:none">word [ "@" word ]</td></tr> 
            <tr><td style="border-bottom:none">word = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" / "(" / ")" / "&lt;" / "&gt;" / ":" / "\\" / DOUBLE_QUOTE / "/" / "[" / "]" / "?" / "{" / "}" )</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>In-Reply-To: 70710@saturn.bell-tel.com, 17320@saturn.bell-tel.com</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.CallInfoHeaderField">
            <summary>
            The Call-Info HeaderField provides additional information about the caller or callee, depending on whether it is found in a <see cref="T:Konnetic.Sip.Messages.Request"/> or <see cref="T:Konnetic.Sip.Messages.Response"/>. 
            </summary>
            <remarks>
            <b>Standards: RFC3261</b>
            <para/>
            The purpose of the URI is described by the purpose parameter. The icon parameter designates an image suitable as an iconic representation of the caller or callee. The info parameter describes the caller or callee in general, for example, through a web page. The card parameter provides a business card, for example, in vCard [37] or LDIF [38] formats. Additional tokens can be registered using IANA (Internet Assigned Numbers Authority).
            <b>Security</b>
            <para/>
            Use of the Call-Info HeaderField can pose a security risk. If a callee fetches the URIs provided by a malicious caller, the callee may be at risk for displaying inappropriate or offensive content, dangerous or illegal content, and so on. Therefore, it is recommended by the SIP standard that a client only render the information in the Call-Info HeaderField if it can verify the authenticity of the element that originated the HeaderField and trusts that element. This need not be the peer client; a proxy can insert this HeaderField into requests.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Call-Info" ":" info *("," info)</td></tr>
            <tr><td style="border-bottom:none">info = </td><td style="border-bottom:none">&lt; absoluteURI &gt; *( SEMI info-param)</td></tr>
            <tr><td style="border-bottom:none">absoluteURI = </td><td style="border-bottom:none">scheme ":" ( ( net-path / abs-path ) [ "?" query ] / opaque-part )</td></tr>
            <tr><td style="border-bottom:none">info-param = </td><td style="border-bottom:none">( "purpose" EQUAL ( "icon" / "info" / "card" / token ) ) / generic-param</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Call-Info: &lt;http://wwww.example.com/alice/photo.jpg&gt;;purpose=icon,&lt;http://www.example.com/alice/&gt; ;purpose=info</item> 
            </list> 
            </example>
            </remarks>
        </member>
        <member name="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase">
            <summary>
            The <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> provides URI information for HeaderFields.
            </summary>
            <remarks>
            <b>Standards: RFC3261</b>
            <para>The <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> header field is not consigned to SIP-URIs.</para>
            <para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> and <seealso cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/> headers.  
            <para/>
            Use of the URI in header fields can pose a security risk. If a callee fetches the URIs provided by a malicious caller, the callee may be at risk for displaying inappropriate or offensive content, dangerous or illegal content, and so on. Therefore, it is recommended that a client only render the information in the Call-Info and Alert-Info header fields if it can verify the authenticity of the element that originated the header field and trusts that element. This need not be the peer client; a proxy can insert this header field into requests.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table > 
            <tr><td style="border-bottom:none">absoluteURI = </td><td style="border-bottom:none">scheme ":" ( ( net-path / abs-path ) [ "?" query ] / opaque-part )</td></tr>
            </table>
            <example>
            <list type="bullet">
            <item>Alert-Info: &lt;http://www.example.com/sounds/moo.wav&gt;</item>
            <item>Call-Info: &lt;http://wwww.example.com/alice/photo.jpg&gt;;purpose=icon,&lt;http://www.example.com/alice/&gt; ;purpose=info</item> 
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.SipUriHeaderFieldBase"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> 
        </member>
        <member name="F:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.DEFAULTURI">
            <summary>
            The default URI used for non-SIP URIs.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase._uri">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase._uriSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has three overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The string URI.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="obj"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> class.
            </summary>
            <param name="uri">The URI.</param>		
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="obj"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.Equals(Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table > 
            <tr><td style="border-bottom:none">absoluteURI = </td><td style="border-bottom:none">scheme ":" ( ( net-path / abs-path ) [ "?" query ] / opaque-part )</td></tr>
            </table>
            <example>
            <list type="bullet">
            <item>Alert-Info: &lt;http://www.example.com/sounds/moo.wav&gt;</item>
            <item>Call-Info: &lt;http://wwww.example.com/alice/photo.jpg&gt;;purpose=icon,&lt;http://www.example.com/alice/&gt; ;purpose=info</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.AbsoluteUri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase.AbsoluteUriSet">
            <summary>
            Gets or sets a value indicating whether the absolute URI has been set.
            </summary>
            <value>
            	<c>true</c> if the absolute URI has been set; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Konnetic.Sip.Headers.CallInfoHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has four overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.#ctor(System.String,Konnetic.Sip.Headers.CallInfoPurpose)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="purpose">The purpose.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.#ctor(System.Uri,Konnetic.Sip.Headers.CallInfoPurpose)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="purpose">The purpose.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.CallInfoHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>   
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.op_Explicit(Konnetic.Sip.Headers.CallInfoHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CallInfoHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.CallInfoHeaderField.Parse(System.String)" -->
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.CallInfoHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.CallInfoHeaderField.Purpose">
            <summary>
            Gets or sets the purpose.
            </summary>
            <value>The purpose.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Purpose"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.<paramref name="Purpose"/>.</exception> 
        </member>
        <member name="T:Konnetic.Sip.Messages.RequestFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.RequestFactory.CreateRequest(System.String)">
            <summary>
            Creates the request.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.RequestFactory.CreateRequest(Konnetic.Sip.Headers.RequestLineHeaderField)">
            <summary>
            Creates the request.
            </summary>
            <param name="requestLine">The request line.</param>
            <returns></returns>
        </member>
        <member name="T:Konnetic.Sip.Headers.PriorityHeaderField">
            <summary>The Priority HeaderField indicates the urgency of the request as perceived by the client.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2076</b>
            <para/>
            The Priority HeaderField describes the priority that the SIP request should have to the receiving human or its agent. For example, it may be factored into decisions about call routing and acceptance. For these decisions, a message containing no Priority HeaderField should be treated as if it specified a Priority of normal. The Priority HeaderField does not influence the use of communications resources such as packet forwarding priority in routers or access to circuits in PSTN gateways. The HeaderField can have the values non-urgent, normal, urgent, and emergency, but additional values can be defined elsewhere. It is recommended by the SIP standard that the value of emergency only be used when life, limb, or property are in imminent danger. Otherwise, there are no semantics defined for this HeaderField.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Priority" ":" "emergency" / "urgent" / "normal" / "non-urgent" / token</td></tr>  
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>  
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Priority: emergency</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.#ctor(Konnetic.Sip.Headers.Priority)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> class.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.PriorityHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.op_Explicit(Konnetic.Sip.Headers.PriorityHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.Equals(Konnetic.Sip.Headers.PriorityHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.PriorityHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />         
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Priority" ":" "emergency" / "urgent" / "normal" / "non-urgent" / token</td></tr>  
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>  
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Priority: emergency</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.PriorityHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.PriorityHeaderField.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Priority"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.<paramref name="Priority"/>.</exception> 
        </member>
        <member name="T:Konnetic.Sip.Headers.SipParameterCollectionEnumerator">
            <summary>
            Implements the Iterator pattern for the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollectionEnumerator"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.#ctor(Konnetic.Sip.Headers.SipParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollectionEnumerator"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:Konnetic.Sip.Headers.DispositionType">
            <summary>
            Describes how the message body or, for multipart messages, a message body part is to be interpreted by the client or server.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.None">
            <summary>
            The default enumeration
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.Render">
            <summary>
            Indicates that the body part should be displayed or otherwise rendered to the user.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.Session">
            <summary>
            Indicates that the body part describes a session, for either calls or early (pre-call) media.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.Icon">
            <summary>
            Indicates that the body part contains an image suitable as an iconic representation of the caller or callee
            </summary>
            <remarks>The body could be rendered informationally by a user agent when a message has been received, or persistently while a dialog takes place.</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.Alert">
            <summary>
            Indicates that the body part contains information, such as an audio clip
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.Inline">
            <summary>
            The bodypart is intended to be displayed automatically upon display of the message.
            </summary>
            <remarks>The body should be rendered by the user agent in an attempt to alert the user to the receipt of a request, generally a request that initiates a dialog; this alerting body could for example be rendered as a ring tone for a phone call after a 180 Ringing provisional response has been sent.</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.DispositionType.Attachment">
            <summary> 
            Indicates that they are separate from the main body of the mail message, and that their display should not be automatic, but contingent upon some further action of the user.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.ContentDispositionHandling">
            <summary>
            Describes how the server should react if it receives a message body whose <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/> or <see cref="T:Konnetic.Sip.Headers.ContentDispositionHeaderField"/> it does not understand.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ContentDispositionHandling.None">
            <summary>
            The default enumeration.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ContentDispositionHandling.Optional">
            <summary>
            The server must ignore the message body.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ContentDispositionHandling.Required">
            <summary>
            The server must return 415 (Unsupported Media Type)
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.AuthorizationHeaderField">
            <summary>
            The Authorization HeaderField contains authentication credentials of a client.  
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            <b>Syntax</b> 
            <para/>
            The values of the opaque and algorithm fields must be those supplied in the WWW-Authenticate response header for the entity being requested. 
            <list type="bullet">
            <item><i>response</i>: A string of 32 hex digits computed as defined below, which proves that the user knows a password.</item>
            <item><i>username</i>: The user's name in the specified realm.</item>
            <item><i>digest-uri</i>: The URI from Request-URI of the Request-Line; duplicated here because proxies are allowed to change the Request-Line in transit.</item>
            <item><i>qop</i>: Indicates what "quality of protection" the client has applied to the message. If present, its value must be one of the alternatives the server indicated it supports in the <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> header. These values affect the computation of the request-digest. Note that this is a single token, not a quoted list of alternatives as in <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/>. This directive is optional in order to preserve backward compatibility with a minimal implementation of RFC 2069, but should be used if the server indicated that qop is supported by providing a qop directive in the <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> HeaderField.</item>
            <item><i>cnonce</i>: This must be specified if a qop directive is sent (see above), and must not be specified if the server did not send a qop directive in the <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> HeaderField. The cnonce-value is an opaque quoted string value provided by the client and used by both client and server to avoid chosen plaintext attacks, to provide mutual authentication, and to provide some message integrity protection. See the descriptions below of the calculation of the responsedigest and request-digest values.</item>
            <item><i>nonce-count</i>: This must be specified if a qop directive is sent (see above), and must not be specified if the server did not send a qop directive in the <see cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/> HeaderField. The nc-value is the hexadecimal count of the number of requests (including the current request) that the client has sent with the nonce value in this request. For example, in the first request sent in response to a given nonce value, the client sends "nc=00000001". The purpose of this directive is to allow the server to detect request replays by maintaining its own copy of this count - if the same nc-value is seen  twice, then the request is a replay. See the description below of the construction of the request-digest value.</item>
            <item><i>auth-param</i>: This directive allows for future extensions. Any unrecognized directive must be ignored.</item> 
            </list>  
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Authorization" ":" credentials</td></tr>
            <tr><td style="border-bottom:none">credentials = </td><td style="border-bottom:none">("Digest" WHITESPACE digest-response) / other-response</td></tr>
            <tr><td style="border-bottom:none">digest-response = </td><td style="border-bottom:none">dig-resp *("," dig-resp)</td></tr>
            <tr><td style="border-bottom:none">dig-resp = </td><td style="border-bottom:none">username / realm / nonce / digest-uri / dresponse / algorithm / cnonce / opaque / message-qop / nonce-count / auth-param</td></tr>
            <tr><td style="border-bottom:none">username = </td><td style="border-bottom:none">"username" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">digest-uri = </td><td style="border-bottom:none">"uri" EQUAL &lt; request-uri &gt;</td></tr>
            <tr><td style="border-bottom:none">message-qop = </td><td style="border-bottom:none">"qop" EQUAL "auth" / "auth-info" / token</td></tr>
            <tr><td style="border-bottom:none">cnonce = </td><td style="border-bottom:none">"cnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">nonce-count = </td><td style="border-bottom:none">"nc" EQUAL 8HEX</td></tr>
            <tr><td style="border-bottom:none">dresponse = </td><td style="border-bottom:none">"response" EQUAL DOUBLE_QUOTE 32HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note> 
            <para/>
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Authorization: Digest username="Alice", realm="atlanta.com", nonce="84a4cc6f3082121f32b42a2187831a9e", response="7587245234b3434cc3412213e5f113a5432"</item>
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.AuthorizationHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> class.
            </summary>
            <param name="scheme">The scheme.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AuthorizationHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.op_Explicit(Konnetic.Sip.Headers.AuthorizationHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthorizationHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Authorization" ":" credentials</td></tr>
            <tr><td style="border-bottom:none">credentials = </td><td style="border-bottom:none">("Digest" WHITESPACE digest-response) / other-response</td></tr>
            <tr><td style="border-bottom:none">digest-response = </td><td style="border-bottom:none">dig-resp *("," dig-resp)</td></tr>
            <tr><td style="border-bottom:none">dig-resp = </td><td style="border-bottom:none">username / realm / nonce / digest-uri / dresponse / algorithm / cnonce / opaque / message-qop / nonce-count / auth-param</td></tr>
            <tr><td style="border-bottom:none">username = </td><td style="border-bottom:none">"username" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">digest-uri = </td><td style="border-bottom:none">"uri" EQUAL &lt; request-uri &gt;</td></tr>
            <tr><td style="border-bottom:none">message-qop = </td><td style="border-bottom:none">"qop" EQUAL "auth" / "auth-info" / token</td></tr>
            <tr><td style="border-bottom:none">cnonce = </td><td style="border-bottom:none">"cnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">nonce-count = </td><td style="border-bottom:none">"nc" EQUAL 8HEX</td></tr>
            <tr><td style="border-bottom:none">dresponse = </td><td style="border-bottom:none">"response" EQUAL DOUBLE_QUOTE 32HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note> 
            <example>
            <list type="bullet">
            <item>Authorization: Digest username="Alice", realm="atlanta.com", nonce="84a4cc6f3082121f32b42a2187831a9e", response="7587245234b3434cc3412213e5f113a5432"</item>
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.SipUriBuilder">
            <summary>
            Provides a custom constructor for SIP uniform resource identifiers (URIs) and modifies SIP URIs for the <see cref="T:Konnetic.Sip.SipUri"/> class.
            </summary>
            <remarks>
            The <see cref="T:Konnetic.Sip.SipUri"/> class provides a convenient way to modify the contents of a Uri instance without creating a new <see cref="T:Konnetic.Sip.SipUri"/> instance for each modification.
            <para/>
            The <see cref="T:Konnetic.Sip.SipUri"/> properties provide read/write access to the read-only <see cref="T:Konnetic.Sip.SipUri"/> properties so that they can be modified.
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriBuilder"/> class with the specified SipUri.
            </summary>
            <param name="uri">The URI.</param>
            <overloads>
            <summary>The method has two overload.</summary>
            <remarks>Overloads allow for initialising the SipUri.</remarks>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriBuilder"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUriBuilder"/> class with the specified <see cref="T:Konnetic.Sip.SipUri"/> instance..
            </summary>
            <param name="uri">An instance of the <see cref="T:Konnetic.Sip.SipUri"/> class.</param> 
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="uri"/> parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.ToString">
            <summary>
            Returns a display <see cref="T:System.String"/> for this instance.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the unescaped display string of the <see cref="T:Konnetic.Sip.SipUri"/> class.
            </returns>
            <remarks>The display string always contains the <see cref="P:Konnetic.Sip.SipUriBuilder.Port"/> property value, even if it is the default port for the <see cref="P:Konnetic.Sip.SipUriBuilder.Scheme"/>. The <see cref="T:System.String"/> returned by the <see cref="M:Konnetic.Sip.SipUri.ToString()"/> method only contains the port if it is not the default port for the scheme.</remarks>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.init(System.String)">
            <summary>
            Initializes the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <exception cref="T:System.SipUriFormatException">Thrown when the <paramref name="uri"/> parameter is invalid.</exception>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.RemoveHeader(System.String)">
            <summary>
            Removes the header from the header collection.
            </summary>
            <param name="headerfieldName">The name of the header.</param> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerfieldName"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="headerfieldName"/>.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.ClearHeaders">
            <summary>
            Clears the headers.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.AddHeader(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>
            Adds a header to the SipUri.
            </summary>
            <param name="header">The header to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="header"/>.</exception>
            <threadsafety static="true" instance="false"/>  
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.RemoveParameter(System.String)">
            <summary>
            Removes the parameter from the parameter collection.
            </summary>
            <param name="parameterName">The name of the parameter.</param> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameterName"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown on empty <paramref name="parameterName"/>.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.ClearParameters">
            <summary>
            Clears the parameters.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.SipUriBuilder.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds a generic parameter to the SipUri.
            </summary>
            <param name="parameter">The parameter to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="parameter"/>.</exception> 
            <threadsafety static="true" instance="false"/>  
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Headers">
            <summary>
            Gets the <see cref="T:Konnetic.Sip.HeaderFieldCollection"/> collection of header fields to be included in a request constructed from the SipUri.
            </summary>
            <remarks>The return value is a read/write collection. Headers fields in the SIP request can be specified with the "?" mechanism within a URI. The header names and values are encoded in ampersand separated hname = hvalue pairs. The special hname "body" indicates that the associated hvalue is the message-body of the SIP request.</remarks>
            <value>The <see cref="T:Konnetic.Sip.HeaderFieldCollection"/> headers.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Headers"/>.</exception>  
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Parameters">
            <summary>
            Gets the <see cref="T:Konnetic.Sip.SipUriParameterCollection"/> parameters affecting a request constructed from the URI.
            </summary>
            <remarks>The return value is a read/write collection.</remarks>
            <value>The <see cref="T:Konnetic.Sip.SipUriParameterCollection"/> parameters affecting a request constructed from the URI.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Parameters"/>.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Host">
            <summary>
            Gets or sets the Domain Name System (DNS) host name or IP address of the host providing the SIP resource.
            </summary>
            <remarks>The Host property contains the fully qualified DNS host name or IP address of the host providing the SIP resource. The host part contains either a fully-qualified domain name or numeric IPv4 or IPv6 address. Using the fully-qualified domain name form is RECOMMENDED whenever possible.</remarks>
            <value>The DNS host name or IP address of the host providing the SIP resource.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Host"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add characters not consistent with a host string.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.LooseRouter">
            <summary>
            Gets or sets a value indicating whether the Uri represents a loose router ("lr").
            </summary>
            <remarks>Indicating whether the Uri represents a loose router ("lr").</remarks>
            <value><c>true</c> if the Uri represents a loose router; otherwise, <c>false</c>.</value> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.MulticastAddress">
            <summary>
            Gets or sets the multicast address ("maddr") which indicates the server address to be contacted for this user, overriding any address derived from the host field..
            </summary>
            <remarks>The IP address for the multicast address ("maddr"). The maddr parameter indicates the server address to be contacted for this user, overriding any address derived from the host field. When an maddr parameter is present, the port and transport components of the URI apply to the address indicated in the maddr parameter value.</remarks>
            <value>The multicast address ("maddr").</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Maddr"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add characters not consistent with a host string.</exception>  
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Method">
            <summary>
            Gets or sets the SIP <see cref="T:Konnetic.Sip.Messages.SipMethod"/> of the SipUri.
            </summary>
            <remarks>The SIP <see cref="T:Konnetic.Sip.Messages.SipMethod"/> of the SipUri.</remarks>
            <value>The SIP <see cref="T:Konnetic.Sip.Messages.SipMethod"/> of the SipUri.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Method"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipUriFormatException">Thrown when a user attempts to add non-token characters.</exception>  
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Password">
            <summary>
            Gets or sets the password associated with the user that accesses the <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <remarks>While the SIP and SIPS URI syntax allows this field to be present, its use is NOT RECOMMENDED , because the passing of authentication information in clear text (such as URIs) has proven to be a security risk in almost every case where it has been used. For instance, transporting a PIN number in this field exposes the PIN.</remarks>
            <value>The password of the user that accesses the <see cref="T:Konnetic.Sip.SipUri"/>.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Password"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipUriFormatException">Is raised when <paramref name="Password"/> contains invalid characters for a password.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Port">
            <summary>
            Gets or sets the port number of the <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <value>The port number of the <see cref="T:Konnetic.Sip.SipUri"/>.</value>
            <exception cref="T:Konnetic.Sip.SipOutOfRangeException">Thrown when <paramref name="Port"/> is not between zero and 65535.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Scheme">
            <summary>
            Gets or sets the scheme name of the <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <value>The scheme name of the <see cref="T:Konnetic.Sip.SipUri"/>.</value>
            <remarks>Valid scheme names for the <see cref="P:Konnetic.Sip.SipUriBuilder.Scheme"/> property are "sip" and "sips". The property is case-insensive.</remarks>       
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.TimeToLive">
            <summary>
            Gets or sets the time-to-live ("ttl") used by the <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <value>The time-to-live ("ttl") used by the <see cref="T:Konnetic.Sip.SipUri"/>. The ttl parameter determines the time-to-live value of the UDP multicast packet and MUST only be used if maddr is a multicast address and the transport protocol is UDP</value>
            <remarks>The time-to-live ("ttl") used by the <see cref="T:Konnetic.Sip.SipUri"/>. A null value removes the property from the <see cref="T:Konnetic.Sip.SipUri"/>.</remarks>
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.Transport">
            <summary>
            Gets or sets the transport type used by the <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <value>The transport type used by the <see cref="T:Konnetic.Sip.SipUri"/>.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Transport"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipUriFormatException">Thrown when a user attempts to add invalid characters for the Transport.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.UserName">
            <summary>
            The user name associated with the user that accesses the <see cref="T:Konnetic.Sip.SipUri"/>.
            </summary>
            <value>The user name associated with the user that accesses the <see cref="T:Konnetic.Sip.SipUri"/>.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="UserName"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipUriFormatException">Is raised when <paramref name="UserName"/> contains invalid characters for a username.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.UserParameter">
            <summary>
            Gets or sets the identifier of a particular resource at the host being addressed.
            </summary>
            <value>The identifier of a particular resource at the host being addressed.</value>
            <remarks>The identifier of a particular resource at the host being addressed. The term "host" in this context frequently refers to a domain. The userinfo of a URI consists of this user field, the password field, and the @ sign following them. The userinfo part of a URI is optional and MAY be absent when the destination host does not have a notion of users or when the host itself is the resource being identified. If the @ sign is present in a SIP or SIPS URI, the user field MUST NOT be empty.
            <para/>
            If the host being addressed can process telephone numbers, for instance, an Internet telephony gateway, a telephone- subscriber field defined in RFC 2806 MAY be used to populate the user field.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="UserParameter"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="P:Konnetic.Sip.SipUriBuilder.SipUri">
            <summary>
            Gets the <see cref="T:Konnetic.Sip.SipUri"/> instance constructed by the specified <see cref="T:Konnetic.Sip.SipUriBuilder"/> instance.
            </summary>
            <value>A <see cref="T:Konnetic.Sip.SipUri"/> instance constructed by the specified <see cref="T:Konnetic.Sip.SipUriBuilder"/> instance.</value>
        </member>
        <member name="T:Konnetic.Sip.SipScheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipScheme.Sip">
            <summary>
            Is a Sip message. Not secure.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipScheme.Sips">
            <summary>
            Is a Sip message. Secure transport.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipScheme.Unknown">
            <summary>
            Is a an unknown scheme.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.ServerTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.NewRequestEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.SendingResponseReceivedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.SentResponseReceivedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.UnmatchedResponseEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.PacketReceivedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.UserAgentHeaderField">
            <summary>The User-Agent HeaderField contains information about the client originating the request. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The User-Agent request-HeaderField contains information about the user agent originating the request. This is for statistical purposes, the tracing of protocol violations, and automated recognition of user agents for the sake of tailoring responses to avoid particular user agent limitations. User agents should include this field with requests. The field can contain multiple product tokens (section 3.8) and comments identifying the agent and any subproducts which form a significant part of the user agent. By convention, the product tokens are listed in order of their significance for identifying the application.
            <para/>
            Revealing the specific software version of the user agent might allow the user agent to become more vulnerable to attacks against software that is known to contain security holes. Implementers should make the User-Agent HeaderField a configurable option.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"User-Agent" ":" server-val *(LWS server-val)</td></tr> 
            <tr><td style="border-bottom:none">server-val = </td><td style="border-bottom:none">token [SLASH token] / comment</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>User-Agent: Softphone Beta1.5</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> class.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> class.
            </summary>
            <param name="productName">Name of the product.</param>
            <param name="productVersion">The product version.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.UserAgentHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.op_Explicit(Konnetic.Sip.Headers.UserAgentHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.UserAgentHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.UserAgentHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"User-Agent" ":" server-val *(LWS server-val)</td></tr> 
            <tr><td style="border-bottom:none">server-val = </td><td style="border-bottom:none">token [SLASH token] / comment</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>User-Agent: Softphone Beta1.5</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField">
            <summary>
            The Authentication-Info HeaderField provides for mutual authentication with HTTP Digest. A server may include this HeaderField in a 2xx response to a request that was successfully authenticated using digest based on the <see cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> HeaderField.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            The <seealso cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> header is used by the server to communicate some information regarding the successful authentication in the response.
            <para/>
            <b>Syntax</b>
            The value of the nextnonce directive is the nonce the server wishes the client to use for a future authentication response. The server may send the Authentication-Info header with a nextnonce field as a means of implementing one-time or otherwise changing nonces. If the nextnonce field is present the client should use it when constructing the Authorization header for its next request. Failure of the client to do so may result in a request to re-authenticate from the server with the "stale=TRUE".
            <para/>
            <note type="implementnotes">Server implementations should carefully consider the performance implications of the use of this mechanism; pipelined requests will not be possible if every response includes a nextnonce directive that must be used on the next request received by the server. Consideration should be given to the performance vs. security tradeoffs of allowing an old nonce value to be used for a limited time to permit request pipelining. Use of the nonce-count can retain most of the security advantages of a new server nonce without the deleterious affects on pipelining.</note> 
            The Message-Qop parameter indicates the "quality of protection" options applied to the response by the server. The value "auth" indicates authentication; the value "auth-int" indicates authentication with integrity protection. The server should use the same value for the messageqop directive in the response as was sent by the client in the corresponding request.
            <para/>
            The optional response digest in the "response-auth" directive supports mutual authentication -- the server proves that it knows the user's secret, and with qop=auth-int also provides limited integrity protection of the response. The "response-digest" value is calculated as for the "request-digest" in the Authorization header, except that if "qop=auth" or is not specified in the Authorization header for the request, <i>A2 = ":" digest-uri-value</i> and if "qop=auth-int", then <i>A2 = ":" digest-uri-value ":" H(entity-body)</i>. Where "digest-uri-value" is the value of the "uri" directive on the Authorization header in the request. The "cnonce-value" and "ncvalue" must be the ones for the client request to which this message is the response. The "response-auth", "cnonce", and "nonce-count" directives must be present if "qop=auth" or "qop=auth-int" is specified.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Authentication-Info" ":" ainfo *("," ainfo)</td></tr>
            <tr><td style="border-bottom:none">ainfo = </td><td style="border-bottom:none">nextnonce / message-qop / response-auth / cnonce / nonce-count</td></tr>
            <tr><td style="border-bottom:none">nextnonce = </td><td style="border-bottom:none">"nextnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">response-auth = </td><td style="border-bottom:none">"rspauth" EQUAL response-digest</td></tr>
            <tr><td style="border-bottom:none">response-digest = </td><td style="border-bottom:none">DOUBLE_QUOTE *HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Authentication-Info: nextnonce="47364c23432d2e131a5fb210812c"</item>
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.SecurityHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/> 
        </member>
        <member name="F:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AuthenticationInfoHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.op_Explicit(Konnetic.Sip.Headers.AuthenticationInfoHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">Authentication-Info = "Authentication-Info" ":" ainfo *("," ainfo)</td></tr>
            <tr><td style="border-bottom:none">ainfo = </td><td style="border-bottom:none">nextnonce / message-qop / response-auth / cnonce / nonce-count</td></tr>
            <tr><td style="border-bottom:none">nextnonce = </td><td style="border-bottom:none">"nextnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">response-auth = </td><td style="border-bottom:none">"rspauth" EQUAL response-digest</td></tr>
            <tr><td style="border-bottom:none">response-digest = </td><td style="border-bottom:none">DOUBLE_QUOTE *HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Authentication-Info: nextnonce="47364c23432d2e131a5fb210812c"</item>
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.CNonce">
            <summary>
            Gets or sets the CNonce.
            </summary>
            <value>The CNonce.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="CNonce"/>.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.MessageQop">
            <summary>
            Gets or sets the message qop.
            </summary>
            <value>The message qop.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="MessageQop"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.NextNonce">
            <summary>
            Gets or sets the next nonce.
            </summary>
            <value>The next nonce.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="NextNonce"/>.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.NonceCount">
            <summary>
            Gets or sets the nonce count.
            </summary>
            <value>The nonce count.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="NonceCount"/>.</exception>  
        </member>
        <member name="P:Konnetic.Sip.Headers.AuthenticationInfoHeaderField.ResponseAuth">
            <summary>
            Gets or sets the response auth.
            </summary>
            <value>The response auth.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="ResponseAuth"/>.</exception>
        </member>
        <member name="T:Konnetic.Sip.SipParseException">
            <summary>The exception that is thrown when an error occurs whilst parsing. 
            </summary>
            <remarks>
            <see cref="T:Konnetic.Sip.SipParseException"/> is thrown when the parse method is invoked and it is detected that the passed arguments would result in illegal SIP syntax or semantics. It does not signify an invalid object.  
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.SipParseException.#ctor" -->
        <member name="M:Konnetic.Sip.SipParseException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipParseException"/> class with the name of the property that caused the parsing error and a specified error message.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:Konnetic.Sip.SipParseException.PropertyName"/> property of the new instance to the passed <paramref name="propertyName"/> argument. The content of <paramref name="propertyName"/> is intended to be understood by administrators examining this exception.
            <para>This constructor initializes the base <see cref="P:System.Exception.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks>
            <param name="propertyName">The property that caused the parsing error.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.SipParseException.#ctor(System.String,System.Exception)" -->
        <member name="M:Konnetic.Sip.SipParseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipParseException"/> class with the name of the property that caused the parsing error and a specified error message and the exception that caused this exception.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:Konnetic.Sip.SipParseException.PropertyName"/> property of the new instance to the passed <paramref name="propertyName"/> argument. The content of <paramref name="propertyName"/> is intended to be understood by administrators examining this exception.
            <para>This constructor initializes the base <see cref="P:System.Exception.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks>
            <param name="propertyName">The property that caused the parsing error.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipParseException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Konnetic.Sip.SipParseException.PropertyName">
            <summary>
            Gets or sets the name of the property that was being parsed when the error occured.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Konnetic.Sip.SipParseException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary> 
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Konnetic.Sip.SipDuplicateItemException">
            <summary>
            The exception that is thrown when an item is passed to a method that would result in an illegal duplicate item in a collection.  
            </summary>
            <remarks>
            <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> is thrown when a method is invoked and it is detected that the passed arguments would result in illegal duplication within a collection.  
            </remarks>
        </member>
        <member name="F:Konnetic.Sip.SipDuplicateItemException._duplicatedItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:Konnetic.Sip.SipDuplicateItemException.DuplicatedItem"/> property of the new instance to an empty string.
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> class with the name of the item that would have caused the duplication.
            </summary>
            <remarks>This constructor initializes the <see cref="P:Konnetic.Sip.SipDuplicateItemException.DuplicatedItem"/> property of the new instance to the passed <paramref name="item"/> argument. The content of <paramref name="item"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="item">The name of the parameter that caused the duplication.</param>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> class with the name of the item that would have caused the duplication and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:Konnetic.Sip.SipDuplicateItemException.DuplicatedItem"/> property of the new instance to the passed <paramref name="item"/> argument. The content of <paramref name="item"/> is intended to be understood by administrators examining this exception.</remarks>
            <param name="item">The item that caused the duplication.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> class with the name of the item that would have caused the duplication and a specified error message and the exception that caused this exception.
            </summary>
            <remarks>This constructor initializes the <see cref="P:Konnetic.Sip.SipDuplicateItemException.DuplicatedItem"/> property of the new instance to the passed <paramref name="item"/> argument. The content of <paramref name="item"/> is intended to be understood by administrators examining this exception.
            <para>This constructor initializes the base <see cref="P:Konnetic.Sip.SipException.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks>
            <param name="item">The item that caused the duplication.</param>
            <param name="message">The error message that explains the reason for this exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> class with the name of the item that would have caused the duplication and a specified error message.
            </summary>
            <remarks>This constructor initializes the <see cref="P:Konnetic.Sip.SipDuplicateItemException.DuplicatedItem"/> property of the new instance to the passed <paramref name="item"/> argument. The content of <paramref name="item"/> is intended to be understood by administrators examining this exception.
            <para>This constructor initializes the base <see cref="P:Konnetic.Sip.SipException.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks>
            <param name="item">The item that caused the duplication.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipDuplicateItemException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipDuplicateItemException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Konnetic.Sip.SipDuplicateItemException.DuplicatedItem">
            <summary>
            Gets or sets the name of the HeaderField.
            </summary>
            <value>The name of the HeaderField.</value>
        </member>
        <member name="P:Konnetic.Sip.SipDuplicateItemException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Konnetic.Sip.Headers.UnsupportedHeaderField">
            <summary>The Unsupported HeaderField lists the features not supported by the server. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            The Unsupported HeaderField contains a list of option tags (see below). Each option tag defines a SIP extension that is not supported by the process. The server must add an Unsupported HeaderField, and list in it those options it does not understand amongst those in the Require HeaderField of the request. A client compliant to the SIP specification must only include option tags corresponding to standards-track RFCs.
            <b>Option Tag</b>
            Option tags are unique identifiers used to designate new options (extensions) in SIP. These tags are used in <see cref="T:Konnetic.Sip.Headers.RequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.ProxyRequireHeaderField"/>, <see cref="T:Konnetic.Sip.Headers.SupportedHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderFieldBase"/> HeaderFields. Note that these options appear as parameters in those HeaderFields in an option-tag = token form.
            <para/>  
            <b>Request Validation</b>
            If the request contains a Proxy-Require HeaderField with one or more option-tags this element does not understand, the element must return a 420 (Bad Extension) response. The response must include an Unsupported HeaderField listing those option-tags the element did not understand.
            <para/>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Unsupported" ":" option-tag *("," option-tag)</td></tr> 
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>Unsupported: foo</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.UnsupportedHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/> class.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.UnsupportedHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.op_Explicit(Konnetic.Sip.Headers.UnsupportedHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.UnsupportedHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.UnsupportedHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Unsupported" ":" option-tag *("," option-tag)</td></tr> 
            <tr><td style="border-bottom:none">option-tag = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>Unsupported: foo</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.NoneInviteServerTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.ContentEncodingHeaderField">
            <summary>
            The Content-Encoding HeaderField is used as a modifier to the media-type. When present, its value indicates what additional content codings have been applied to the entity-body, and thus what decoding mechanisms must be applied in order to obtain the media-type referenced by the Content-Type HeaderField. Content-Encoding is primarily used to allow a body to be compressed without losing the identity of its underlying media type.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            Frequently, the entity is stored in coded form, transmitted directly, and only decoded by the recipient.
            <para/>Content coding values indicate an encoding transformation that has been or can be applied to an entity. Content codings are primarily used to allow a document to be compressed or otherwise usefully transformed without losing the identity of its underlying media type and without loss of information. Frequently, the entity is stored in coded form, transmitted directly, and only decoded by the recipient.
            <para/>All content-coding values are case-insensitive. Although the value describes the content coding, what is more important is that it indicates what decoding mechanism will be required to remove the encoding.
            <para/>The Internet Assigned Numbers Authority (IANA) acts as a registry for content-coding value tokens. Initially, the registry contains the following tokens:
            <list type="bullet">
            <item><i>gzip</i>: An encoding format produced by the file compression program "gzip" (GNU zip) as described in RFC 1952. This format is a Lempel-Ziv coding (LZ77) with a 32 bit CRC.</item>
            <item><i>compress</i>: The encoding format produced by the common UNIX file compression program "compress". This format is an adaptive Lempel-Ziv-Welch coding (LZW).
            Use of program names for the identification of encoding formats is not desirable and is discouraged for future encodings. Their use here is representative of historical practice, not good design. For compatibility with previous implementations of HTTP, applications should consider "x-gzip" and "x-compress" to be equivalent to "gzip" and "compress" respectively.</item>
            <item><i>deflate</i>: The "zlib" format defined in RFC 1950 in combination with the "deflate" compression mechanism described in RFC 1951.</item>
            <item><i>identity</i>: The default (identity) encoding; the use of no transformation whatsoever. This content-coding is used only in the Accept-Encoding header, and should not be used in the Content-Encoding header.</item>
            </list>
            If multiple encodings have been applied to an entity-body, the content codings must be listed in the order in which they were applied. Clients may apply content encodings to the body in requests. A server may apply content encodings to the bodies in responses. The server must only use encodings listed in the Accept-Encoding HeaderField in the request.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Content-Encoding" / "e" ) ":" token *("," token)</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">The compact form of the Content-Encoding HeaderField is "e".</note> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Content-Encoding: gzip</item> 
            <item>e: tar</item> 
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.AcceptEncodingTypeHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ContentTypeHeaderFieldBase"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> class.
            </summary>
            <param name="contentEncoding">The content encoding.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ContentEncodingHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.op_Explicit(Konnetic.Sip.Headers.ContentEncodingHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.Equals(Konnetic.Sip.Headers.ContentEncodingHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Content-Encoding" / "e" ) ":" token *("," token)</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">The compact form of the Content-Encoding HeaderField is "e".</note> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Content-Encoding: gzip</item> 
            <item>e: tar</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentEncodingHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.ContentEncodingHeaderField.ContentEncoding">
            <summary>
            Gets or sets the content encoding.
            </summary>
            <value>The content encoding.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="ContentEncoding"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="M:Konnetic.Sip.TransportClient.Send(Konnetic.Sip.Messages.Request)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Konnetic.Sip.Enum`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Konnetic.Sip.Enum`1.Description(`0)">
            <summary>
            Descriptions the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Enum`1.ValueOf(System.String)">
            <summary>
            Values the of.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:Konnetic.Sip.InviteServerTransactionState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.InviteServerTransactionState.Started">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.InviteServerTransactionState.Proceeding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.InviteServerTransactionState.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.InviteServerTransactionState.Confirmed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.InviteServerTransactionState.Terminated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.InviteServerTransactionState.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Messages.Response">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.Response._responseClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.Response._statusLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Response"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.#ctor(Konnetic.Sip.Messages.Request)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Response"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.#ctor(Konnetic.Sip.Messages.Request,Konnetic.Sip.Messages.StandardResponseCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Response"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.#ctor(Konnetic.Sip.Messages.Request,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Response"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.#ctor(Konnetic.Sip.Messages.Response,Konnetic.Sip.Messages.StandardResponseCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Messages.Response"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.CopyHeaderFields(Konnetic.Sip.Headers.HeaderFieldCollection)">
            <summary>
            Copies the HeaderFields.
            </summary>
            <param name="headers">The headers.</param>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.GetHeaderBytes(System.Boolean)">
            <summary>
            Returns a byte array of the header.
            </summary>
            <param name="useCompactForm"></param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.Response.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.CSeq">
            <summary>
            Gets or sets the C seq.
            </summary>
            <value>The C seq.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.CallId">
            <summary>
            Gets or sets the call id.
            </summary>
            <value>The call id.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.Class">
            <summary>
            Gets or sets the class.
            </summary>
            <value>The class.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <value>The type of the message.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.ReasonPhrase">
            <summary>
            Gets or sets the reason phrase.
            </summary>
            <value>The reason phrase.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.StatusLine">
            <summary>
            Gets or sets the status line.
            </summary>
            <value>The status line.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.To">
            <summary>
            Gets or sets to.
            </summary>
            <value>To.</value>
        </member>
        <member name="P:Konnetic.Sip.Messages.Response.Via">
            <summary>
            Gets or sets the via.
            </summary>
            <value>The via.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.CSeqHeaderField">
            <summary> A CSeq HeaderField in a request contains a single decimal sequence number and the request method.
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            The sequence number must be expressible as a 32-bit unsigned integer. The method part of CSeq is case-sensitive. The CSeq HeaderField serves to order transactions within a dialog, to provide a means to uniquely identify transactions, and to differentiate between new requests and request retransmissions. Two CSeq HeaderFields are considered equal if the sequence number and the request method are identical.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"CSeq" ":" 1*DIGIT WHITESPACE Method</td></tr> 
            <tr><td style="border-bottom:none">Method = </td><td style="border-bottom:none">INVITE / ACK / OPTIONS / BYE / CANCEL / REGISTER / token</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>CSeq: 4711 INVITE</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.CSeqHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.CSeqHeaderField._sequence">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.CSeqHeaderField._method">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <remarks>Defaults: 
            <list type="bullet">
            <item><c>Sequence</c> is set to a new valid sequence number.</item> 
            </list> </remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> class.
            </summary>
            <param name="cseq">The cseq.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.#ctor(System.Nullable{System.Int64},Konnetic.Sip.Messages.SipMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> class.
            </summary>
            <param name="cseq">The cseq.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.CSeqHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.op_Explicit(Konnetic.Sip.Headers.CSeqHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.NewSequence">
            <summary>
            News the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.Equals(Konnetic.Sip.Headers.CSeqHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.Next">
            <summary>
            Nexts this instance.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"CSeq" ":" 1*DIGIT WHITESPACE Method</td></tr> 
            <tr><td style="border-bottom:none">Method = </td><td style="border-bottom:none">INVITE / ACK / OPTIONS / BYE / CANCEL / REGISTER / token</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>CSeq: 4711 INVITE</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.RecreateSequence">
            <summary>
            Recreates the sequence.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.CSeqHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.CSeqHeaderField.MaxSequence">
            <summary>
            Gets the max sequence.
            </summary>
            <value>The max sequence.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.CSeqHeaderField.MinSequence">
            <summary>
            Gets the min sequence.
            </summary>
            <value>The min sequence.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.CSeqHeaderField.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.CSeqHeaderField.Sequence">
            <summary>
            Gets or sets the sequence.
            </summary>
            <value>The sequence.</value>
        </member>
        <member name="T:Konnetic.Sip.Messages.ProvisionalResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Messages.ProvisionalResponse.Contact">
            <summary>
            Gets or sets the contact.
            </summary>
            <value>The contact.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField">
            <summary>A Proxy-Authenticate HeaderField value contains an authentication challenge.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The Proxy-Authenticate response-HeaderField must be included as part of a 407 (Proxy Authentication Required) response. The field value consists of a challenge that indicates the authentication scheme and parameters applicable to the proxy for this Request-URI.
            <para/>
            Unlike WWW-Authenticate, the Proxy-Authenticate HeaderField applies only to the current connection and should not be passed on to downstream clients. However, an intermediate proxy might need to obtain its own credentials by requesting them from the downstream client, which in some circumstances will appear as if the proxy is forwarding the Proxy-Authenticate HeaderField.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <para/>
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Proxy-Authenticate" ":" ("Digest" WHITESPACE digest-cln *("," digest-cln)) / other-challenge</td></tr> 
            <tr><td style="border-bottom:none">other-challenge = </td><td style="border-bottom:none">token WHITESPACE auth-param *("," auth-param)</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">digest-cln = </td><td style="border-bottom:none">realm / domain / nonce / opaque / stale / algorithm / qop-options / auth-param</td></tr>
            <tr><td style="border-bottom:none">realm = </td><td style="border-bottom:none">"realm" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">domain = </td><td style="border-bottom:none">"domain" EQUAL " URI *( 1*SP URI ) "</td></tr>
            <tr><td style="border-bottom:none">nonce = </td><td style="border-bottom:none">"nonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">opaque = </td><td style="border-bottom:none">"opaque" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">stale = </td><td style="border-bottom:none">"stale" EQUAL ( "true" / "false" )</td></tr>
            <tr><td style="border-bottom:none">algorithm = </td><td style="border-bottom:none">"algorithm" EQUAL ( "MD5" / "MD5-sess" / token )</td></tr>
            <tr><td style="border-bottom:none">qop-options = </td><td style="border-bottom:none">"qop" EQUAL ""auth" / "auth-int" / token *("," "auth" / "auth-int" / token) "</td></tr>
            
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note> 
            <example>
            <list type="bullet">
            <item>Proxy-Authenticate: Digest realm="atlanta.com", domain="sip:ss1.carrier.com", qop="auth", nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", stale=FALSE, algorithm=MD5</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.ChallengeHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.LongName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> class.
            </summary>
            <param name="scheme">The scheme.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ProxyAuthenticateHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.op_Explicit(Konnetic.Sip.Headers.ProxyAuthenticateHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <para/>
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Proxy-Authenticate" ":" ("Digest" WHITESPACE digest-cln *("," digest-cln)) / other-challenge</td></tr> 
            <tr><td style="border-bottom:none">other-challenge = </td><td style="border-bottom:none">token WHITESPACE auth-param *("," auth-param)</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">digest-cln = </td><td style="border-bottom:none">realm / domain / nonce / opaque / stale / algorithm / qop-options / auth-param</td></tr>
            <tr><td style="border-bottom:none">realm = </td><td style="border-bottom:none">"realm" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">domain = </td><td style="border-bottom:none">"domain" EQUAL " URI *( 1*SP URI ) "</td></tr>
            <tr><td style="border-bottom:none">nonce = </td><td style="border-bottom:none">"nonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">opaque = </td><td style="border-bottom:none">"opaque" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">stale = </td><td style="border-bottom:none">"stale" EQUAL ( "true" / "false" )</td></tr>
            <tr><td style="border-bottom:none">algorithm = </td><td style="border-bottom:none">"algorithm" EQUAL ( "MD5" / "MD5-sess" / token )</td></tr>
            <tr><td style="border-bottom:none">qop-options = </td><td style="border-bottom:none">"qop" EQUAL ""auth" / "auth-int" / token *("," "auth" / "auth-int" / token) "</td></tr>
            
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note>  
            <example>
            <list type="bullet">
            <item>Proxy-Authenticate: Digest realm="atlanta.com", domain="sip:ss1.carrier.com", qop="auth", nonce="f84f1cec41e6cbe5aea9c8e88d359", opaque="", stale=FALSE, algorithm=MD5</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase">
            <summary>
            The <see cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/> provides Media and Media Subtype information for HeaderFields.
            </summary>
            <remarks>
            	<b>Standards: RFC3261</b>
            	<para/>The abstract base class is used by <see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/>.
            <para/>
            SIP uses Internet Media Types in order to provide open and extensible data typing and type negotiation. HeaderFields may follow the type/subtype in the form of attribute/value pairs. The type, subtype, and parameter attribute names are case-insensitive. Parameter values might or might not be casesensitive, depending on the semantics of the parameter name. Linear white space (LWS) must not be used between the type and subtype, nor between an attribute and its value. The presence or absence of a parameter might be significant to the processing of a media-type, depending on its definition within the media type registry. Note that some older SIP applications do not recognize media type parameters. When sending data to older SIP applications, implementations SHOULD only use media type parameters when they are required by that type/subtype definition. Media-type values are registered with the Internet Assigned Number Authority.
            <para/>
            	<b>RFC 3261 Syntax:</b>
            	<table>
            		<tr><td style="border-bottom:none">media-type = </td><td style="border-bottom:none">m-type SLASH m-subtype *(SEMI m-parameter)</td></tr>
            		<tr><td style="border-bottom:none">m-type = </td><td style="border-bottom:none">discrete-type / composite-type</td></tr>
            		<tr><td style="border-bottom:none">discrete-type = </td><td style="border-bottom:none">"text" / "image" / "audio" / "video" / "application" / extension-token</td></tr>
            		<tr><td style="border-bottom:none">composite-type = </td><td style="border-bottom:none">"message" / "multipart" / extension-token</td></tr>
            		<tr><td style="border-bottom:none">extension-token = </td><td style="border-bottom:none">ietf-token / "x-" token</td></tr>
            		<tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            	</table>
            	<example>
            		<list type="bullet">
            			<item>Content-Type: application/sdp</item>
            			<item>Accept: application/sdp;level=1, application/x-private, text/html</item>
            		</list>
            	</example>
            	<seealso cref="T:Konnetic.Sip.Headers.ParamatizedHeaderFieldBase"/>
            	<seealso cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/>
            	<seealso cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/>
            </remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase._mediaSubType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase._mediaType">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.AddMediaParameter(Konnetic.Sip.Headers.SipParameter)" -->
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.RemoveMediaParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Removes a media parameter.
            </summary>
            <remarks>Media parameters are present on <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/> and <see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/> header fields. They are seperated from Generic parameters (if any) by the 'q' parameter.</remarks>
            <param name="parameter">The parameter to remove.</param>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/> class.
            </summary>
            <param name="mediaType">The media.</param>
            <param name="mediaSubType">The media subtype.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="mediaSubType"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="mediaType"/>.</exception> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.#ctor(Konnetic.Sip.Headers.MediaType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/> class.
            </summary>
            <param name="mediaType">The media.</param>
            <param name="mediaSubType">The media subtype.</param>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="mediaSubType"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="mediaType"/>.</exception> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.Equals(Konnetic.Sip.Headers.MediaTypeHeaderFieldBase)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td style="border-bottom:none">media-type = </td><td style="border-bottom:none">m-type SLASH m-subtype *(SEMI m-parameter)</td></tr> 
            <tr><td style="border-bottom:none">m-type = </td><td style="border-bottom:none">discrete-type / composite-type</td></tr> 
            <tr><td style="border-bottom:none">discrete-type = </td><td style="border-bottom:none">"text" / "image" / "audio" / "video" / "application" / extension-token</td></tr> 
            <tr><td style="border-bottom:none">composite-type = </td><td style="border-bottom:none">"message" / "multipart" / extension-token</td></tr> 
            <tr><td style="border-bottom:none">extension-token = </td><td style="border-bottom:none">ietf-token / "x-" token</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            </table >
             <example>
            <list type="bullet">
            <item>Content-Type: application/sdp</item>  
            <item>Accept: application/sdp;level=1, application/x-private, text/html</item>   
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.MediaParameters" -->
        <member name="P:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.MediaSubType">
            <summary>
            Gets or sets the media subtype.
            </summary>
            <value>The type of the media subtype.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="MediaType"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="P:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase.MediaType">
            <summary>
            Gets or sets the type of the media.
            </summary>
            <value>The type of the media.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="MediaType"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception> 
        </member>
        <member name="T:Konnetic.Sip.Headers.HeaderFieldEventArgs">
            <summary>
            Provides data for the HeaderFieldChange event. 
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldEventArgs._cancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldEventArgs._headerFieldName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.HeaderFieldEventArgs"/> class.
            </summary>
            <param name="cancel">If set to <c>true</c> cancel the operation.</param>
            <param name="headerFieldName">Name of the HeaderField.</param>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.HeaderFieldEventArgs.HeaderFieldName">
            <summary>
            Gets or sets the name of the HeaderField.
            </summary>
            <value>The name of the HeaderField.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.SipParameterCollection">
            <summary>
            A collection of SIPParameters used by SIP HeaderFields to process zero or more parameters 
            </summary>
            <remarks>
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none" colspan="2">field-name: field-value *(;parameter-name=parameter-value)</td></tr> 
            </table> 
            <para/> 
            <example>
            <list type="bullet"> 
            <item>Contact: "Mr. Watson" &lt;sip:watson@worcester.bell-telephone.com&gt;;q=0.7; expires=3600</item> 
            </list>
            </example>
            </remarks> 
        </member>
        <member name="F:Konnetic.Sip.Headers.SipParameterCollection._seperator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> collection instance.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.CopyTo(Konnetic.Sip.Headers.SipParameterCollection)">
            <summary>
            Copies the contents of the collection to the <paramref name="parameters"/> of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.
            </summary>
            <param name="parameters">A <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> to populate.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the collection to the <paramref name="parameters"/>
            	<see cref="T:System.Array"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> class.
            </summary>
            <param name="seperator">The seperator.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.#ctor(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> class.
            </summary>
            <param name="parameter">Initialises and populates the collection with the first <see cref="T:Konnetic.Sip.Headers.SipParameter"/>.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.SipParameterCollection.Add(System.String,System.String)" -->
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Add(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the specified parameter to the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.
            </summary>
            <param name="parameter">The parameter to add.</param>
            <returns></returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Clear">
            <summary>
            Clears this instance of all SipParameters.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Contains(System.String)">
            <summary>
            Checks if the collection contains a parameter with the specified name.
            </summary>
            <param name="name">The parameter name.</param>        
            <returns>
            	<c>true</c> if the collection contains the parameter specified; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Contains(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Checks if the collection contains a parameter.
            </summary>
            <param name="parameter">The parameter to match against.</param>
            <returns>
            	<c>true</c> if the collection contains the specified parameter; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Equals(Konnetic.Sip.Headers.SipParameterCollection)">
            <summary>
            Compare this <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> for equality with another <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> object.</summary>
            <remarks>
            All SipParameters in each collection must match, as well as the collection counts. All parameters are compared using object equality that is each parameter in the collection is used for comparision. Unless otherwise stated in the definition of a particular parameter, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIPParameter collection as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> and <see cref="T:System.Object"/>.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>.
            All SipParameters in each collection must match, as well as the collection counts. All parameters are compared using object equality that is each parameter in the collection is used for comparision. Unless otherwise stated in the definition of a particular parameter, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts the parameter name\value at the index.
            </summary>
            <param name="index">The index position to insert the new parameter.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <threadsafety static="true" instance="false"/>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="name"/> is null.</exception>
            <exception cref="T:Konnetic.Sip.SipOutOfRangeException">Is raised when <paramref value="index"/> is out of the collection bounds.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when the addition of the parameter would cause a duplicate.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Parse(System.String)">
            <summary>
            Parses string representation of the Parameter.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table> 
            <tr><td style="border-bottom:none" colspan="2">field-name: field-value *(;parameter-name=parameter-value)</td></tr> 
            </table> 
            <para/> 
            <example>
            <list type="bullet"> 
            <item>Contact: "Mr. Watson" &lt;sip:watson@worcester.bell-telephone.com&gt;;q=0.7; expires=3600</item> 
            </list>
            </example>
            </remarks> 
            <param name="value">The parameter string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.ArgumentException">Thrown when the <paramref name="nameValuePair"/> is not formatted correctly as parameter-name[=parameter-value].</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="name">The SipParameter name.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Remove(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="parameter">The parameter to remove.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Set(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a parameter with a specified name/value.
            </summary>
            <param name="index">The index position to insert the new parameter.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Set(System.String,System.String)">
            <summary>
            Adds or updates a parameter with a specified name/value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Set(System.Int32,Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds or updates the specified parameter to the collection.
            </summary>
            <param name="parameter">The parameter to add or update.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.Set(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds or updates the specified parameter to the collection.
            </summary>
            <param name="parameter">The parameter to add or update.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.ToUriString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a format suitable for URIs.
            </summary>        
            <remarks>The string is escaped.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <returns>
            	<c>true</c> if instance represents a valid parameter collection; otherwise, <c>false</c>.
            </returns> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipParameterCollection.ToString(System.String[])">
            <summary>
            Returns the collection as a SIP URI string.
            </summary>
            <param name="exclude">The excluded parameters.</param>
            <returns>A string representation of the collection as a SIP URI.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exclude</b> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollection.Seperator">
            <summary>
            Gets the seperator between parameters.
            </summary>
            <value>The seperator between parameters.</value>
        </member>
        <member name="E:Konnetic.Sip.Headers.SipParameterCollection.OnChange">
            <summary>
            Occurs when the collection is altered (add, update or delete).
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollection.Parameters(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> at the specified index.
            </summary>
            <remarks>Returns null if parameter with specified name doesn't exist.</remarks>
            <value>The <see cref="T:Konnetic.Sip.Headers.SipParameter"/> at the <param name="index"/> index in the collection.</value>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollection.Parameters(System.String)">
            <summary>
            Gets specified parameter from collection. 
            </summary>
            <remarks>Returns null if parameter with specified name doesn't exist.</remarks>
            <param name="parameterName">The parameter name.</param>
            <returns>Returns parameter with specified name or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="fieldName"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipParameterCollection.Parameters(System.String,System.StringComparison)">
            <summary>
            Gets specified parameter from collection.
            </summary>
            <value></value>
            <remarks>Returns null if parameter with specified name doesn't exist.</remarks>
            <returns>Returns parameter with specified name or null if not found.</returns>
            <param name="parameterName">The parameter name.</param>
            <param name="comparisonType">The string comparision type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="parameterName"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Konnetic.Sip.SipStack">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.MediaType">
            <summary>
            Internet Media Types are used in the HeaderField in order to provide open and extensible data typing and type negotiation.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.All">
            <summary>
            The default enumeration. Equates to STAR (*).
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Text">
            <summary>
            Textual information.
            </summary>
            <remarks>The subtype "plain" in particular indicates plain text containing no formatting commands or directives of any sort. Plain text is intended to be displayed "as-is". No special software is required to get the full meaning of the text, aside from support for the indicated character set. Other subtypes are to be used for enriched text in forms where application software may enhance the appearance of the text, but such software must not be required in order to get the general idea of the content.  Possible subtypes of "text" thus include any word processor format that can be read without resorting to software that understands the format.  In particular, formats that employ embeddded binary formatting information are not considered directly readable. A very simple and portable subtype, "richtext", was defined in RFC 1341, with a further revision in RFC 1896 under the name "enriched".</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Image">
            <summary>
            Image data.  
            </summary>
            <remarks>"Image" requires a display device (such as a graphical display, a graphics printer, or a FAX machine) to view the information. An initial subtype is defined for the widely-used image format JPEG. Subtypes are defined for two widely used image formats, jpeg and gif.</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Audio">
            <summary>
            Audio data.
            </summary>
            <remarks>"Audio" requires an audio output device (such as a speaker or a telephone) to "display" the contents.  An initial subtype "basic" is defined in this document.</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Video">
            <summary>
            Video data.
            </summary>
            <remarks>"Video" requires the capability to display moving images, typically including specialized hardware and software.  An initial subtype "mpeg" is defined in this document.</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Message">
            <summary>
            An encapsulated message.
            </summary>
            <remarks>A body of media type "message" is itself all or a portion of some kind of message object.  Such objects may or may not in turn contain other entities.  The "rfc822" subtype is used when the encapsulated content is itself an RFC 822 message.  The "partial" subtype is defined for partial RFC 822 messages, to permit the fragmented transmission of bodies that are thought to be too large to be passed through transport facilities in one piece.  Another subtype, "external-body", is defined for specifying large bodies by reference to an external data source.</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Multipart">
            <summary>
            Data consisting of multiple entities of independent data types.
            </summary>
            <remarks>Four subtypes are initially defined, including the basic "mixed" subtype specifying a generic mixed set of parts, "alternative" for representing the same data in multiple formats, "parallel" for parts intended to be viewed simultaneously, and "digest" for multipart entities in which each part has a default type of "message/rfc822".</remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.MediaType.Application">
            <summary>
            Some other kind of data, typically either uninterpreted binary data or information to be processed by an application.
            </summary>
            <remarks>The subtype "octet-stream" is to be used in the case of uninterpreted binary data, in which case the simplest recommended action is to offer to write the information into a file for the user.  The "PostScript" subtype is also defined for the transport of PostScript material.  Other expected uses for "application" include spreadsheets, data for mail-based scheduling systems, and languages for "active" (computational) messaging, and word processing formats that are not directly readable. Note that security considerations may exist for some types of application data, most notably "application/ PostScript" and any form of active messaging.</remarks>
        </member>
        <member name="T:Konnetic.Sip.Headers.MimeVersionHeaderField">
            <summary>Indicates what version of the MIME protocol was used to construct the message.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616, RFC2045</b>
            <para/>
            SIP is not a MIME-compliant protocol. However, SIP messages may include a single MIME-Version general-HeaderField to indicate what version of the MIME protocol was used to construct the message. Use of the MIME-Version HeaderField indicates that the message is in full compliance with the MIME protocol (as defined in RFC 2045).
            <para/>
            MIME version "1.0" is the default.
            <para/>
            <note type="implementnotes">SIP message parsing and semantics are defined by RFC3261 and not the MIME specification.</note> 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"MIME-Version" ":" 1*DIGIT "." 1*DIGIT</td></tr>  
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>MIME-Version: 1.0</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Methods.Options"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.MimeVersionHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <remarks>Defaults: 
            <list type="bullet">
            <item><c>MajorVersion</c> is set to 1 (one).</item>
            <item><c>MinorVersion</c> is set to 0 (zero).</item>
            </list> </remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.#ctor(System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/> class.
            </summary>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.MimeVersionHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.op_Explicit(Konnetic.Sip.Headers.MimeVersionHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.Equals(Konnetic.Sip.Headers.MimeVersionHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.MimeVersionHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"MIME-Version" ":" 1*DIGIT "." 1*DIGIT</td></tr>  
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>MIME-Version: 1.0</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MimeVersionHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.MimeVersionHeaderField.MajorVersion">
            <summary>
            Gets or sets the major version.
            </summary>
            <value>The major version.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.MimeVersionHeaderField.MinorVersion">
            <summary>
            Gets or sets the minor version.
            </summary>
            <value>The minor version.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.AllowHeaderField">
            <summary>
            The Allow HeaderField lists the set of methods supported by the client generating the message.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            All methods, including ACK and CANCEL, understood by the client must be included in the list of methods in the Allow HeaderField, when present. The absence of an Allow HeaderField msut not be interpreted to mean that the client sending the message supports no methods. Rather, it implies that the client is not providing any information on what methods it supports. 
            <para/>Supplying an Allow HeaderField in responses to methods other than OPTIONS reduces the number of messages needed.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Allow" ":" [Method *("," Method)]</td></tr>
            <tr><td style="border-bottom:none">Method = </td><td style="border-bottom:none">INVITE / ACK / OPTIONS / BYE / CANCELm / REGISTER / extension-method</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Allow: INVITE, ACK, OPTIONS, CANCEL, BYE</item>
            </list> 
            </example>
            </remarks>
        </member>
        <member name="F:Konnetic.Sip.Headers.AllowHeaderField._method">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.#ctor(Konnetic.Sip.Messages.SipMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.CSeqHeaderField"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AllowHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.op_Explicit(Konnetic.Sip.Headers.AllowHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.Equals(Konnetic.Sip.Headers.AllowHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.AllowHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive.
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns> 
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>    
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AllowHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.AllowHeaderField.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:Konnetic.Sip.PacketReceivedEventArgs">
            <summary>
            This class provides data for <b>OnPacketReceived</b> event.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.OrganizationHeaderField">
            <summary>The Organization HeaderField conveys the name of the organization to which the SIP element issuing the request or response belongs. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The field may be used by client software to filter calls.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Organization" ":" [TRIMMED_UTF8_TEXT]; The TRIMMED_UTF8_TEXT rule is used for descriptive field contents that are not quoted strings, where leading and trailing whitespace is not meaningful.</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Organization: Boxes by Bob</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/> class.
            </summary>
            <param name="organization">The organization.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.OrganizationHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.op_Explicit(Konnetic.Sip.Headers.OrganizationHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.Equals(Konnetic.Sip.Headers.OrganizationHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.OrganizationHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Organization" ":" [TRIMMED_UTF8_TEXT]; The TRIMMED_UTF8_TEXT rule is used for descriptive field contents that are not quoted strings, where leading and trailing whitespace is not meaningful.</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Organization: Boxes by Bob</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.OrganizationHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField">
            <summary>The Proxy-Authorization HeaderField allows the client to identify itself (or its user) to a proxy that requires authentication. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            When a client sends a request to a proxy server, the proxy server may authenticate the originator before the request is processed. If no credentials (in the Proxy-Authorization HeaderField) are provided in the request, the proxy can challenge the originator to provide credentials by rejecting the request with a 407 (Proxy Authentication Required) status code.
            <para/>
            A Proxy-Authorization field value consists of credentials containing the authentication information of the user agent for the proxy and/or realm of the resource being requested. Unlike Authorization, the Proxy-Authorization HeaderField applies only to the next outbound proxy that demanded authentication using the Proxy-Authenticate field. When multiple proxies are used in a chain, the Proxy-Authorization HeaderField is consumed by the first outbound proxy that was expecting to receive credentials. A proxy may relay the credentials from the client request to the next proxy if that is the mechanism by which the proxies cooperatively authenticate a given request.
            <para/>
            All 407 (Proxy Authentication Required) responses must be forwarded upstream toward the client following the procedures for any other response. It is the client's responsibility to add the Proxy-Authorization HeaderField value containing credentials for the realm of the proxy that has asked for authentication.
            <para/>
            <note type="implementnotes">Proxies must not add values to the Proxy-Authorization HeaderField.</note>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Proxy-Authorization" ":" credentials</td></tr> 
            <tr><td style="border-bottom:none">credentials = </td><td style="border-bottom:none">("Digest" WHITESPACE digest-response) / other-response</td></tr>
            <tr><td style="border-bottom:none">digest-response = </td><td style="border-bottom:none">dig-resp *("," dig-resp)</td></tr>
            <tr><td style="border-bottom:none">dig-resp = </td><td style="border-bottom:none">username / realm / nonce / digest-uri / dresponse / algorithm / cnonce / opaque / message-qop / nonce-count / auth-param</td></tr>
            <tr><td style="border-bottom:none">username = </td><td style="border-bottom:none">"username" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">digest-uri = </td><td style="border-bottom:none">"uri" EQUAL &lt; request-uri &gt;</td></tr>
            <tr><td style="border-bottom:none">message-qop = </td><td style="border-bottom:none">"qop" EQUAL "auth" / "auth-info" / token</td></tr>
            <tr><td style="border-bottom:none">cnonce = </td><td style="border-bottom:none">"cnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">nonce-count = </td><td style="border-bottom:none">"nc" EQUAL 8HEX</td></tr>
            <tr><td style="border-bottom:none">dresponse = </td><td style="border-bottom:none">"response" EQUAL DOUBLE_QUOTE 32HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note> 
            <example>
            <list type="bullet">
            <item>Proxy-Authorization: Digest username="Alice", realm="atlanta.com", nonce="c60f3082ee1212b402a21831ae", response="245f23415f11432b3434341c022"</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthorizationHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.AuthenticationInfoHeaderField"/> 
            <seealso cref="T:Konnetic.Sip.Headers.ProxyAuthenticateHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.WwwAuthenticateHeaderField"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ProxyAuthorizationHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.op_Explicit(Konnetic.Sip.Headers.ProxyAuthorizationHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Proxy-Authorization" ":" credentials</td></tr> 
            <tr><td style="border-bottom:none">credentials = </td><td style="border-bottom:none">("Digest" WHITESPACE digest-response) / other-response</td></tr>
            <tr><td style="border-bottom:none">digest-response = </td><td style="border-bottom:none">dig-resp *("," dig-resp)</td></tr>
            <tr><td style="border-bottom:none">dig-resp = </td><td style="border-bottom:none">username / realm / nonce / digest-uri / dresponse / algorithm / cnonce / opaque / message-qop / nonce-count / auth-param</td></tr>
            <tr><td style="border-bottom:none">username = </td><td style="border-bottom:none">"username" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">digest-uri = </td><td style="border-bottom:none">"uri" EQUAL &lt; request-uri &gt;</td></tr>
            <tr><td style="border-bottom:none">message-qop = </td><td style="border-bottom:none">"qop" EQUAL "auth" / "auth-info" / token</td></tr>
            <tr><td style="border-bottom:none">cnonce = </td><td style="border-bottom:none">"cnonce" EQUAL quoted-string</td></tr>
            <tr><td style="border-bottom:none">nonce-count = </td><td style="border-bottom:none">"nc" EQUAL 8HEX</td></tr>
            <tr><td style="border-bottom:none">dresponse = </td><td style="border-bottom:none">"response" EQUAL DOUBLE_QUOTE 32HEX DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">auth-param = </td><td style="border-bottom:none">token EQUAL ( token / quoted-string )</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">quoted-pair = </td><td style="border-bottom:none">"\\" (%x00-09 / %x0B-0C / %x0E-7F)</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField, along with <see cref="T:Konnetic.Sip.Headers.ProxyAuthorizationHeaderField"/>, breaks the general rules about multiple HeaderField values. Although not a comma-separated list, this HeaderField name may be present multiple times, and must not be combined into a single header line using the usual rules. See <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup{T}"/> for grouping of this HeaderField..</note> 
            <example>
            <list type="bullet">
            <item>Proxy-Authorization: Digest username="Alice", realm="atlanta.com", nonce="c60f3082ee1212b402a21831ae", response="245f23415f11432b3434341c022"</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.ContentTypeHeaderField">
            <summary> 
            The Content-Type HeaderField indicates the media type of the message-body sent to the recipient. The "media-type" element is defined in. SIP uses Internet Media Types in the Content-Type and Accept HeaderFields in order to provide open and extensible data typing and type negotiation.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
             <para/>
            The Content-Type HeaderField must be present if the body is not empty. If the body is empty, and a Content-Type HeaderField is present, it indicates that the body of the specific type has zero length (for example, an empty audio file). 
            <para/>
            The type, subtype, and parameter attribute names are case-insensitive. Parameter values might or might not be casesensitive, depending on the semantics of the parameter name. Linear white space (LWS) must not be used between the type and subtype, nor between an attribute and its value. The presence or absence of a parameter might be significant to the processing of a media-type, depending on its definition within the media type registry.
            <para/>
            The asterisk "*" character is used to group media types into ranges, with "*/*" indicating all media types and "type/*" indicating all subtypes of that type. The media-range may include media type parameters that are applicable to that range.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Content-Type" / "c" ) ":" media-type</td></tr>  
            <tr><td style="border-bottom:none">media-type = </td><td style="border-bottom:none">m-type SLASH m-subtype *(SEMI m-parameter)</td></tr>
            <tr><td style="border-bottom:none">m-type = </td><td style="border-bottom:none">"text" / "image" / "audio" / "video" / "application" / token / composite-type</td></tr>
            <tr><td style="border-bottom:none">composite-type = </td><td style="border-bottom:none">"message" / "multipart" / token</td></tr>
            <tr><td style="border-bottom:none">m-parameter = </td><td style="border-bottom:none">token EQUAL token / quoted-string</td></tr>  
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Content-Type HeaderField is "c".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Content-Type: application/sdp</item> 
            <item>c: text/html; charset=ISO-8859-4</item> 
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.AllowHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.ContentTypeHeaderField.#ctor" -->
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <param name="mediaSubType">Type of the media sub.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.#ctor(Konnetic.Sip.Headers.MediaType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <param name="mediaSubType">Type of the media sub.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ContentTypeHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.op_Explicit(Konnetic.Sip.Headers.ContentTypeHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ContentTypeHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentTypeHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Content-Type" / "c" ) ":" media-type</td></tr>  
            <tr><td style="border-bottom:none">media-type = </td><td style="border-bottom:none">m-type SLASH m-subtype *(SEMI m-parameter)</td></tr>
            <tr><td style="border-bottom:none">m-type = </td><td style="border-bottom:none">"text" / "image" / "audio" / "video" / "application" / token / composite-type</td></tr>
            <tr><td style="border-bottom:none">composite-type = </td><td style="border-bottom:none">"message" / "multipart" / token</td></tr>
            <tr><td style="border-bottom:none">m-parameter = </td><td style="border-bottom:none">token EQUAL token / quoted-string</td></tr>  
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Content-Type HeaderField is "c".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Content-Type: application/sdp</item> 
            <item>c: text/html; charset=ISO-8859-4</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.TransportServer">
            <summary>
            Represents the SIP Transport. Brokers between the underlying OSI Network and Transport layers and the higher level SIP logic.
            </summary>	
        </member>
        <member name="M:Konnetic.Sip.TransportServer.UdpMessageArrive(System.IAsyncResult)">
            <summary>
            UDPs the message arrive.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="T:Konnetic.Sip.Headers.MaxForwardsHeaderField">
            <summary>The Max-Forwards HeaderField must be used with any SIP method to limit the number of proxies or gateways that can forward the request to the next downstream server.</summary>
            <remarks>  
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The Max-Forwards HeaderField can also be useful when the client is attempting to trace a request chain that appears to be failing or looping in mid-chain.
            <para/>
            The Max-Forwards value is an integer in the range 0-255 indicating the remaining number of times this request message is allowed to be forwarded. This count is decremented by each server that forwards the request. The recommended initial value is 70.
            <para/>
            This HeaderField should be inserted by elements that can not otherwise guarantee loop detection. For example, a server/client should insert a Max-Forwards HeaderField.
            <para/>
            <b>Validation</b>
            <para/>
            The Max-Forwards HeaderField is used to limit the number of elements a SIP request can traverse according to the following rules.
            <list type="number">
            <item>If the request does not contain a Max-Forwards HeaderField, this check is passed.</item>
            <item>If the request contains a Max-Forwards HeaderField with a field value greater than zero, the check is passed.</item>
            <item>If the request contains a Max-Forwards HeaderField with a field value of zero (0), the element must not forward the request. If the request was for OPTIONS, the element may act as the final recipient and respond (see next secion). Otherwise, the element must return a 483 (Too many hops) response.</item>
            </list>
            <para/>
            <b>OPTIONS</b>
            <para/>
            The SIP method OPTIONS allows a client to query another client or a proxy server as to its capabilities. The Max-Forwards request-HeaderField provides a mechanism with the OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server. This can be useful when the client is attempting to trace a request chain which appears to be failing or looping in mid-chain. A server receiving an OPTIONS request with a Max-Forwards HeaderField value of 0 may respond to the request regardless of the Request-URI.
            <para/>
            As is the case for general client behavior, the transaction layer can return a timeout error if the OPTIONS yields no response. This may indicate that the target is unreachable and hence unavailable. An OPTIONS request may be sent as part of an established dialog to query the peer on capabilities that may be utilized later in the dialog.
            <para/>
            <note type="implementnotes">This behavior is common with HTTP/1.1. This behavior can be used as a "traceroute" functionality to check the capabilities of individual hop servers by sending a series of OPTIONS requests with incremented Max-Forwards values.</note> 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Max-Forwards" ":" 1*DIGIT</td></tr>  
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Max-Forwards: 6</item>  
            </list> 
            </example>
            </remarks>  
        </member>
        <member name="F:Konnetic.Sip.Headers.MaxForwardsHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.MaxForwardsHeaderField._maxForwards">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <remarks>Defaults: 
            <list type="bullet">
            <item><c>MaxForwards</c> is set to 70.</item> 
            </list> </remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.#ctor(System.Nullable{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/> class.
            </summary>
            <param name="forwards">The forwards.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.MaxForwardsHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.op_Explicit(Konnetic.Sip.Headers.MaxForwardsHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.Equals(Konnetic.Sip.Headers.MaxForwardsHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.MaxForwardsHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Max-Forwards" ":" 1*DIGIT</td></tr>  
            </table>   
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Max-Forwards: 6</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.MaxForwardsHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.MaxForwardsHeaderField.MaxForwards">
            <summary>
            Gets or sets the max forwards.
            </summary>
            <value>The max forwards.</value>
        </member>
        <member name="T:Konnetic.Sip.NoneInviteServerTransactionState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.NoneInviteServerTransactionState.Started">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.NoneInviteServerTransactionState.Trying">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.NoneInviteServerTransactionState.Proceeding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.NoneInviteServerTransactionState.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.NoneInviteServerTransactionState.Terminated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.NoneInviteServerTransactionState.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.RecordRouteHeaderField">
            <summary>The Record-Route HeaderField is inserted by proxies in a request to force future requests in the dialog to be routed through the proxy. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Record-Route" ":" rec-route *("," rec-route)</td></tr> 
            <tr><td style="border-bottom:none">rec-route = </td><td style="border-bottom:none">name-addr *( SEMI generic-param )</td></tr>
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>
            <para/>     
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Record-Route: &lt;sip:server10.biloxi.com;lr&gt;, &lt;sip:bigbox3.site3.atlanta.com;lr&gt;</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.RouteHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.RecordRouteHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RecordRouteHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.RecordRouteHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.RecordRouteHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.RecordRouteHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.op_Explicit(Konnetic.Sip.Headers.RecordRouteHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.RecordRouteHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.RecordRouteHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>Equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Record-Route" ":" rec-route *("," rec-route)</td></tr> 
            <tr><td style="border-bottom:none">rec-route = </td><td style="border-bottom:none">name-addr *( SEMI generic-param )</td></tr>
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>
            <para/>     
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Record-Route: &lt;sip:server10.biloxi.com;lr&gt;, &lt;sip:bigbox3.site3.atlanta.com;lr&gt;</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RecordRouteHeaderField.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.RecordRouteHeaderField.GenericParameters">
            <summary>
            Gets the generic parameters.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection&lt;SipParameter&gt;"/> field parameter.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.ReplyToHeaderField">
            <summary>The Reply-To HeaderField contains a logical return URI that may be different from the From HeaderField. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            the URI may be used to return missed calls or unestablished sessions. If the user wished to remain anonymous, the HeaderField should either be omitted from the request or populated in such a way that does not reveal any private information.
            <para/>
            Even if the display-name is empty, the name-addr form must be used if the addr-spec contains a comma, question mark, or semicolon.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Reply-To" ":" ( name-addr / addr-spec ) *( SEMI generic-param )</td></tr> 
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] LAQUOT addr-spec RAQUOT</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Reply-To: Bob &lt;sip:bob@biloxi.com&gt;</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.ReplyToHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ReplyToHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ReplyToHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ReplyToHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ReplyToHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.op_Explicit(Konnetic.Sip.Headers.ReplyToHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ReplyToHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ReplyToHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Reply-To" ":" ( name-addr / addr-spec ) *( SEMI generic-param )</td></tr> 
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] LAQUOT addr-spec RAQUOT</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Reply-To: Bob &lt;sip:bob@biloxi.com&gt;</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ReplyToHeaderField.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.ReplyToHeaderField.GenericParameters">
            <summary>
            Gets the generic parameters.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection&lt;SipParameter&gt;"/> field parameter.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.AlertInfoHeaderField">
            <summary>
            When present in an INVITE request, the Alert-Info HeaderField specifies an alternative ring tone to the server. When present in a 180 (Ringing) response, the Alert-Info HeaderField specifies an alternative ringback tone to the client. A typical usage is for a proxy to insert this HeaderField to provide a distinctive ring feature.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            The Alert-Info HeaderField can introduce security risks. If a callee fetches the URIs provided by a malicious caller, the callee may be at risk for displaying inappropriate or offensive content, dangerous or illegal content, and so on. Therefore, it is recommended that a client only render the information in the Alert-Info HeaderField if it can verify the authenticity of the element that originated the HeaderField and trusts that element. This need not be the peer client; a proxy can insert this HeaderField into requests. 
            <para/>
            <note type="implementnotes">In addition, a user should be able to disable this feature selectively.</note> 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Alert-Info" ":" alert-param *("," alert-param)</td></tr>
            <tr><td style="border-bottom:none">alert-param = </td><td style="border-bottom:none">"&lt;" absoluteURI "&gt;" *( SEMI generic-param )</td></tr>
            </table>
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Alert-Info: &lt;http://www.example.com/sounds/moo.wav&gt;</item>
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.AbsoluteUriHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/> class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AlertInfoHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.op_Explicit(Konnetic.Sip.Headers.AlertInfoHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AlertInfoHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AlertInfoHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>   
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Alert-Info" ":" alert-param *("," alert-param)</td></tr>
            <tr><td style="border-bottom:none">alert-param = </td><td style="border-bottom:none">"&lt;" absoluteURI "&gt;" *( SEMI generic-param )</td></tr>
            </table>
            <example>
            <list type="bullet">
            <item>Alert-Info: &lt;http://www.example.com/sounds/moo.wav&gt;</item>
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.AlertInfoHeaderField.GenericParameters">
            <summary>
            Gets the generic parameters.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection&lt;SipParameter&gt;"/> field parameter.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.FromHeaderField">
            <summary>The From HeaderField indicates the initiator of the request.
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            The initiator of the request may be different from the initiator of the dialog. Requests sent by the callee to the caller use the callee's address in the From HeaderField.
            <para/>
            The optional display-name is meant to be rendered by a human user interface. A system should use the display name "Anonymous" if the identity of the client is to remain hidden. Even if the display-name is empty, the name-addr form must be used if the addr-spec contains a comma, question mark, or semicolon.
            <para/>
            The display name can be tokens, or a quoted string, if a larger character set is desired. Even if the display-name is empty, the name-addr form must be used if the addr-spec contains a comma, semicolon, or question mark. There may or may not be WHITESPACE between the display-name and the "&lt;". These rules for parsing a display name, URI and URI parameters, and header parameters also apply for the HeaderFields To and From.
            <para/>
            Two From HeaderFields are equivalent if their URIs match, and their parameters match. Extension parameters in one HeaderField, not present in the other are ignored for the purposes of comparison. This means that the display name and presence or absence of angle brackets do not affect matching.
            <para/>
            <b>URI</b>
            The Contact, From, and To HeaderFields contain a URI. If the URI contains a comma, question mark or semicolon, the URI must be enclosed in angle brackets (&lt; and &gt;). Any URI parameters are contained within these brackets. If the URI is not enclosed in angle brackets, any semicolon-delimited parameters are header-parameters, not URI parameters.
            <para/>
            <b>Tag Parameter</b>
            <para/>
            The tag parameter is used in the To and From HeaderFields of SIP messages. It serves as a general mechanism to identify a dialog, which is the combination of the Call-ID along with two tags, one from each participant in the dialog. When a client sends a request outside of a dialog, it contains a From tag only, providing "half" of the dialog ID. The dialog is completed from the response(s), each of which contributes the second half in the To HeaderField. The forking of SIP requests means that multiple dialogs can be established from a single request. This also explains the need for the two-sided dialog identifier; without a contribution from the recipients, the originator could not disambiguate the multiple dialogs established from a single request.
            <para/>
            When a tag is generated by a client for insertion into a request or response, it must be globally unique and cryptographically random with at least 32 bits of randomness. A property of this selection requirement is that a client will place a different tag into the From header of an INVITE than it would place into the To header of the response to the same INVITE. This is needed in order for a client to invite itself to a session, a common case for "hairpinning" of calls in PSTN gateways. Similarly, two INVITEs for different calls will have different From tags, and two responses for different calls will have different To tags. 
            <para/>
            Besides the requirement for global uniqueness, the algorithm for generating a tag is implementation-specific. Tags are helpful in fault tolerant systems, where a dialog is to be recovered on an alternate server after a failure. A server can select the tag in such a way that a backup can recognize a request as part of a dialog on the failed server, and therefore determine that it should attempt to recover the dialog and any other state associated with it.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "From" / "f" ) ":" ( name-addr / addr-spec ) *( SEMI from-param )</td></tr> 
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">from-param = </td><td style="border-bottom:none">"tag" EQUAL token / generic-param</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the From HeaderField is "f".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>From: "A. G. Bell" &lt;sip:agb@bell-telephone.com&gt; ;tag=a48s</item> 
            <item>From: sip:+12125551212@server.phone2net.com;tag=887s</item> 
            <item>f: Anonymous &lt;sip:c8oqz84zk7z@privacy.org&gt;;tag=hyh8</item> 
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.TagAddressedHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ToHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ContactHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.FromHeaderField.CompareName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.FromHeaderField.CompareShortName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.FromHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.FromHeaderField.ShortName">
            <summary>
            The short form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.FromHeaderField._remainHidden">
            <summary>
            Represents whether the user wishes to remain hidden.
            </summary>
            <remarks>The system will display the name "Anonymous" if the user is hidden.</remarks>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> class.
            </summary>
            <remarks>The default constructor. <para/>
            <b>Default Initializations:</b>
            <list type="bullet">
            <item><see cref="P:Sip.Konnetic.Headers.FromHeaderField.Tag"/> is set to a new random value.</item>  
            </list> </remarks>
            <overloads>
            <summary>The method has four overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI string.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.#ctor(Konnetic.Sip.SipUri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI.</param>
            <param name="displayName">The initiator's display name.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.#ctor(Konnetic.Sip.SipUri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> class.
            </summary>
            <param name="uri">The initiator's URI.</param>
            <param name="displayName">The initiator's display name.</param>
            <param name="tag">The tag parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.FromHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.op_Explicit(Konnetic.Sip.Headers.FromHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.FromHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "From" / "f" ) ":" ( name-addr / addr-spec ) *( SEMI from-param )</td></tr> 
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">from-param = </td><td style="border-bottom:none">"tag" EQUAL token / generic-param</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the From HeaderField is "f".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>From: "A. G. Bell" &lt;sip:agb@bell-telephone.com&gt; ;tag=a48s</item> 
            <item>From: sip:+12125551212@server.phone2net.com;tag=887s</item> 
            <item>f: Anonymous &lt;sip:c8oqz84zk7z@privacy.org&gt;;tag=hyh8</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.FromHeaderField.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.FromHeaderField.GenericParameters">
            <summary>
            Gets the generic parameters.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection&lt;SipParameter&gt;"/> field parameter.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.FromHeaderField.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.FromHeaderField.RemainHidden">
            <summary>
            Gets or sets a value indicating whether [remain hidden].
            </summary>
            <value><c>true</c> if remain hidden; otherwise, <c>false</c>.</value>
            <remarks>The system will display the name "Anonymous" if the user is hidden.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.RouteHeaderField" -->
        <member name="F:Konnetic.Sip.Headers.RouteHeaderField.LongName">
            <summary>
            The long form of the name.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.RouteHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.op_Explicit(Konnetic.Sip.Headers.RouteHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.RouteHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Route" ":" route-param *("," route-param)</td></tr>  
            <tr><td style="border-bottom:none">rec-route = </td><td style="border-bottom:none">name-addr *( SEMI generic-param )</td></tr>
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Route: &lt;sip:bigbox3.site3.atlanta.com;lr&gt;,&lt;sip:server10.biloxi.com;lr&gt;</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RouteHeaderField.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.RouteHeaderField.GenericParameters" -->
        <member name="T:Konnetic.Sip.ResponseClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.Unknown">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.Provisional">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.Successful">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.Redirection">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.RequestFailure">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.ServerFailure">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.ResponseClass.GlobalFailure">
             <summary>
            
             </summary>
        </member>
        <member name="T:Konnetic.Sip.AfterSendingResponseEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.AfterSendingResponseEventArgs._response">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.AfterSendingResponseEventArgs.#ctor(Konnetic.Sip.Messages.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.AfterSendingResponseEventArgs"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="P:Konnetic.Sip.AfterSendingResponseEventArgs.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="T:Konnetic.Sip.ClientTransaction">
            <remarks>
            Represents a SIP ClientTransaction. Each conversation is made up of one or more transactions (an initial SIP message followed by responses, other requests or errors). Manages the GetMessage Exchange Pattern for the client side of the transaction.
            </remarks>
        </member>
        <member name="F:Konnetic.Sip.ClientTransaction._to">
            <summary>
            Represents the callee's identifier. Responsible for identifying address and display name of the callee.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.ClientTransaction.#ctor(System.String)">
            <summary>
            Represents the constructor for the ClientTransaction type. Responsible for 
            </summary>
            <param name="to"></param>
        </member>
        <member name="M:Konnetic.Sip.ClientTransaction.Init">
            <summary>
            Begins the transaction. 
            </summary>
            <remarks>
            Client transactions initate a request (In SIP 2.0 this is an INVITE by default). The invite is automatically sent to the transport for delivery. 
            </remarks>
        </member>
        <member name="P:Konnetic.Sip.ClientTransaction.To">
            <summary>
            Gets or sets the callee identifier and display name.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.UnmatchedResponseEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.ExpiresHeaderField">
            <summary>The Expires HeaderField gives the relative time after which the message (or content) expires. The precise meaning of this is method dependent.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The expiration time in an INVITE does not affect the duration of the actual session that may result from the invitation. Session description protocols may offer the ability to express time limits on the session duration, however.
            <para/>
            The value of this field is an integral number of seconds (in decimal) between 0 and (2**32)-1, measured from the receipt of the request.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Expires" ":" 1*DIGIT</td></tr>  
            </table> 
            <para/>  
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Expires: 5</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Messages.Invite"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ExpiresHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ExpiresHeaderField"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ExpiresHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ExpiresHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ExpiresHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.op_Explicit(Konnetic.Sip.Headers.ExpiresHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ExpiresHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ExpiresHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExpiresHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Expires" ":" 1*DIGIT</td></tr>  
            </table>   
            <para/> 
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Expires: 5</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Konnetic.Sip.Headers.ContentLanguageHeaderField">
            <summary>
            The Content-Language entity-HeaderField describes the natural language(s) of the intended audience for the enclosed entity. This might not be equivalent to all the languages used within the entity-body. The primary purpose of Content-Language is to allow a user to identify and differentiate entities according to the user's own preferred language.
            </summary>
            <remarks>   
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            <b>Language Tags</b>
            <para/>
            A language tag identifies a natural language spoken, written, or otherwise conveyed by human beings for communication of information to other human beings. Computer languages are explicitly excluded. SIP uses language tags within the Accept-Language and Content-Language fields.
            <para/>
            The syntax and registry of SIP language tags is the same as that defined by RFC 1766. In summary, a language tag is composed of 1 or more parts: A primary language tag and a possibly empty series of subtag. White space is not allowed within the tag and all tags are case-insensitive. The name space of language tags is administered by the IANA (Internet Assigned Numbers Authority).
            <para/>
            The special "*" symbol in an Content-Language field matches any available content-coding not explicitly listed in the HeaderField.
            If no Content-Language is specified, the default is that the content is intended for all language audiences. This might mean that the sender does not consider it to be specific to any natural language, or that the sender does not know for which language it is intended. 
            <para/>
            Multiple languages may be listed for content that is intended for multiple audiences. For example, a rendition of the "Treaty of Waitangi," presented simultaneously in the original Maori and English versions, would call for <i>Content-Language: mi, en</i>
            <para/>
            <note type="caution">However, just because multiple languages are present within an entity does not mean that it is intended for multiple linguistic audiences. An example would be a beginner's language primer, such as "A First Lesson in Latin," which is clearly intended to be used by an English-literate audience. In this case, the Content-Language would properly only include "en".</note>
            <para/>
            <note type="implementnotes">Content-Language may be applied to any media type -- it is not limited to textual documents.</note>
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Content-Language" ":" language-tag *("," language-tag)</td></tr>
            <tr><td style="border-bottom:none">language-tag = </td><td style="border-bottom:none">1*8ALPHA *( "-" 1*8ALPHA )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Content-Language: da</item> 
            <item>Content-Language: mi, en</item> 
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.AcceptLanguageTypeHeaderFieldBase"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> class.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> class.
            </summary>
            <param name="languageTag">The language tag.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ContentLanguageHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.op_Explicit(Konnetic.Sip.Headers.ContentLanguageHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.Equals(Konnetic.Sip.Headers.ContentLanguageHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ContentLanguageHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Content-Language" ":" language-tag *("," language-tag)</td></tr>
            <tr><td style="border-bottom:none">language-tag = </td><td style="border-bottom:none">1*8ALPHA *( "-" 1*8ALPHA )</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Content-Language: da</item> 
            <item>Content-Language: mi, en</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLanguageHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.ContentLanguageHeaderField.LanguageTag">
            <summary>
            Gets or sets the language tag.
            </summary>
            <value>The language tag.</value>
        </member>
        <member name="T:Konnetic.Sip.SipOutOfRangeException">
            <summary>The exception that is thrown when a value is sematically out of allowable range or a numeric overflow occurs. 
            </summary>
            <remarks>
            <see cref="T:Konnetic.Sip.SipOutOfRangeException"/> is thrown when a method is invoked or a string is parsed and it is detected that the passed arguments would result in an overflow or would result in illegal SIP semantics.  
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipOutOfRangeException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/> property of the new instance to an empty string.
            <para> 
            This constructor initializes the <see cref="P:Konnetic.Sip.SipOutOfRangeException.PropertyName"/> property of the new instance to an empty string.</para>
            </remarks>
        </member>
        <member name="M:Konnetic.Sip.SipOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipOutOfRangeException"/> class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:Konnetic.Sip.SipOutOfRangeException.PropertyName"/> property of the new instance to an empty string.
            <para>This constructor initializes the base <see cref="P:System.Exception.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks> 
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="M:Konnetic.Sip.SipOutOfRangeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipOutOfRangeException"/> class with the name of the property that caused the out of range error and a specified error message.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:Konnetic.Sip.SipOutOfRangeException.PropertyName"/> property of the new instance to the passed <paramref name="propertyName"/> argument. The content of <paramref name="propertyName"/> is intended to be understood by administrators examining this exception.
            <para>This constructor initializes the base <see cref="P:System.Exception.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks>
            <param name="propertyName">The property that caused the out of range error.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="M:Konnetic.Sip.SipOutOfRangeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipParseException"/> class with the name of the property that caused the out of range error and a specified error message and the exception that caused this exception.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:Konnetic.Sip.SipParseException.PropertyName"/> property of the new instance to the passed <paramref name="propertyName"/> argument. The content of <paramref name="propertyName"/> is intended to be understood by administrators examining this exception.
            <para>This constructor initializes the base <see cref="P:System.Exception.Message"/> property of the new instance using the value of the <paramref name="message"/> parameter.  The content of the message parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</para>
            </remarks>
            <param name="propertyName">The property that caused the out of range error.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Konnetic.Sip.SipOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipOutOfRangeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/>  parameter is null (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Konnetic.Sip.SipOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Konnetic.Sip.SipOutOfRangeException.PropertyName">
            <summary>
            Gets or sets the name of the parameter that cased the exception.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:Konnetic.Sip.SipOutOfRangeException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Konnetic.Sip.Headers.TimestampHeaderField">
            <summary>The Timestamp HeaderField describes when the client sent the request to the server.
            </summary>
            <remarks> 
            <b>Standards: RFC3261</b>
            <para/>
            <b>Sending a Provisional Response</b>
            <para/>
            When a 100 (Trying) response is generated, any Timestamp HeaderField present in the request must be copied into this 100 (Trying) response. If there is a delay in generating the response, the server should add a delay value into the Timestamp value in the response. This value must contain the difference between the time of sending of the response and receipt of the request, measured in seconds.
            <para/>
            Although there is no normative behavior that makes use of the header, it allows for extensions or SIP applications to obtain Round-Trip-Time estimates. 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Timestamp" ":" 1*(DIGIT) [ "." *(DIGIT) ] [ WHITESPACE delay ]</td></tr>
            <tr><td style="border-bottom:none">delay = </td><td style="border-bottom:none">*(DIGIT) [ "." *(DIGIT) ]</td></tr>  
            </table>  
            <para/> 
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <para/>
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Timestamp: 54</item>  
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.#ctor(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.TimestampHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.op_Explicit(Konnetic.Sip.Headers.TimestampHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.Equals(Konnetic.Sip.Headers.TimestampHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.TimestampHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Timestamp" ":" 1*(DIGIT) [ "." *(DIGIT) ] [ WHITESPACE delay ]</td></tr>
            <tr><td style="border-bottom:none">delay = </td><td style="border-bottom:none">*(DIGIT) [ "." *(DIGIT) ]</td></tr>
            </table>  
            <para/> 
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <para/>
            <note type="implementnotes">It is not particularly useful to encrypt this field.</note> 
            <example>
            <list type="bullet">
            <item>Timestamp: 54</item>  
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.TimestampHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.TimestampHeaderField.Delay">
            <summary>
            Gets or sets the delay.
            </summary>
            <value>The delay.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.TimestampHeaderField.Time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>The time.</value>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldReader._originalString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.HeaderFieldReader._tempString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.HeaderFieldReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.HeaderFieldReader"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField">
            <summary>
            The type represents the Accept-Encoding HeaderField. A client includes an <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> in a <see cref="T:Konnetic.Sip.Messages.Request"/> to tell the server what coding schemes are acceptable in the <see cref="T:Konnetic.Sip.Messages.Response"/> e.g. compress, gzip.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            A HeaderField is a component of the SIP message header. A HeaderField can appear as one or more HeaderField rows. HeaderField rows consist of a HeaderField name and zero or more HeaderField values. Multiple HeaderField values on a given HeaderField row are separated by commas. Some HeaderFields can only have a single HeaderField value, and as a result, always appear as a single HeaderField row.<para/>
            If an Accept-Encoding field is present in a request, and if the server cannot send a response which is acceptable according to the Accept-Encoding header, then the server should send an error response with the 406 (Not Acceptable) status code.
            <para/>A server tests whether a content-coding is acceptable, according to an Accept-Encoding field, using these rules:
            <list type="number">
            <item>If the content-coding is one of the content-codings listed in the Accept-Encoding field, then it is acceptable, unless it is accompanied by a qvalue of 0. (A qvalue of 0 means "not acceptable.")</item>
            <item>The special "*" symbol in an Accept-Encoding field matches any available content-coding not explicitly listed in the HeaderField.</item>
            <item>If multiple content-codings are acceptable, then the acceptable content-coding with the highest non-zero qvalue is preferred.</item>
            <item>The "identity" content-coding is always acceptable, unless specifically refused because the Accept-Encoding field includes "identity;q=0", or because the field includes "*;q=0" and does not explicitly include the "identity" content-coding. </item>
            </list> 
            An empty Accept-Encoding HeaderField is permissible, it is equivalent to Accept-Encoding of "identity", meaning no encoding is permissible. If no Accept-Encoding HeaderField is present, the server should assume a default value of identity.
            <para/>Content coding values indicate an encoding transformation that has been or can be applied to an entity. Content codings are primarily used to allow a document to be compressed or otherwise usefully transformed without losing the identity of its underlying media type and without loss of information. Frequently, the entity is stored in coded form, transmitted directly, and only decoded by the recipient.
            <para/>All content-coding values are case-insensitive. Although the value describes the content coding, what is more important is that it indicates what decoding mechanism will be required to remove the encoding.
            <para/>The Internet Assigned Numbers Authority (IANA) acts as a registry for content-coding value tokens. Initially, the registry contains the following tokens:
            <list type="bullet">
            <item><i>gzip</i>: An encoding format produced by the file compression program "gzip" (GNU zip) as described in RFC 1952. This format is a Lempel-Ziv coding (LZ77) with a 32 bit CRC.</item>
            <item><i>compress</i>: The encoding format produced by the common UNIX file compression program "compress". This format is an adaptive Lempel-Ziv-Welch coding (LZW).
            Use of program names for the identification of encoding formats is not desirable and is discouraged for future encodings. Their use here is representative of historical practice, not good design. For compatibility with previous implementations of HTTP, applications should consider "x-gzip" and "x-compress" to be equivalent to "gzip" and "compress" respectively.</item>
            <item><i>deflate</i>: The "zlib" format defined in RFC 1950 in combination with the "deflate" compression mechanism described in RFC 1951.</item>
            <item><i>identity</i>: The default (identity) encoding; the use of no transformation whatsoever. This content-coding is used only in the Accept-Encoding header, and should not be used in the Content-Encoding header.</item>
            </list>
            <para/>
            <span id="Example 1"> 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Accept-Encoding" ":" [ encoding *("," encoding) ]</td></tr>
            <tr><td style="border-bottom:none">encoding = </td><td style="border-bottom:none">codings *(SEMI accept-param)</td></tr>
            <tr><td style="border-bottom:none">codings = </td><td style="border-bottom:none">content-coding / "*"</td></tr>
            <tr><td style="border-bottom:none">content-coding = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">accept-param = </td><td style="border-bottom:none">("q" EQUAL qvalue) / generic-param</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ]</td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>
            </span>
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <span id="Example 2">
            <example>
            <list type="bullet">
            <item>Accept-Encoding: gzip </item>
            <item>Accept-Encoding: compress, gzip</item>
            <item>Accept-Encoding: </item>
            <item>Accept-Encoding: *</item>
            <item>Accept-Encoding: compress;q=0.5, gzip;q=1.0</item>
            <item>Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0</item>
            </list>
            </example> 
            </span>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The <see cref="T:Konnetic.Sip.SipParameter"/> name.</param>
            <param name="value">The <see cref="T:Konnetic.Sip.SipParameter"/> value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">A <see cref="T:Konnetic.Sip.SipParameter"/> parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> class.
            </summary>
            <remarks>The default constructor. <para/>
            <b>Default Initializations:</b>
            <list type="bullet">
            <item><see cref="P:Sip.Konnetic.Headers.AcceptEncodingHeaderField.Encoding" /> is set to "identity".</item>  
            </list> </remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            <remarks>Overloads allow for initialising the encoding.</remarks>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.#ctor(System.String)">
            <summary><inheritdoc /></summary>		
            <remarks>
            An empty Accept-Encoding HeaderField is permissible, it is equivalent to Accept-Encoding of "identity", meaning no encoding is permissible. If no Accept-Encoding HeaderField is present, the server should assume a default value of identity.
            <para/>The special "*" symbol in an Accept-Encoding field matches any available content-coding not explicitly listed in the HeaderField.
            <para/>Content coding values indicate an encoding transformation that has been or can be applied to an entity. Content codings are primarily used to allow a document to be compressed or otherwise usefully transformed without losing the identity of its underlying media type and without loss of information. Frequently, the entity is stored in coded form, transmitted directly, and only decoded by the recipient.</remarks>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="encoding"/>  parameter is null (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AcceptEncodingHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value representing the HeaderField string.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <threadsafety static="true" instance="false"/>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.op_Explicit(Konnetic.Sip.Headers.AcceptEncodingHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert to a string.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/> parameter.</exception>
            <threadsafety static="true" instance="false"/> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Equals(Konnetic.Sip.Headers.AcceptEncodingHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>
            <inheritdoc cref="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Equals(AcceptEncodingHeaderField)" select="overloads/*"/>
            <inheritdoc cref="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Equals(Konnetic.Sip.Headers.AcceptEncodingHeaderField)" select="threadsafety"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <inheritdoc cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField" select="span[@id='Example 1']" />
            <inheritdoc cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField" select="span[@id='Example 2']" /> 
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered during parsing.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptEncodingHeaderField.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.AcceptEncodingHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.AcceptEncodingHeaderField.Encoding">
            <summary>
            Gets or sets the content encoding. 
            </summary>
            <remarks>
            An empty Accept-Encoding HeaderField is permissible, it is equivalent to Accept-Encoding of "identity", meaning no encoding is permissible.
            The special "*" symbol in an Accept-Encoding field matches any available content-coding not explicitly listed in the HeaderField.</remarks>
            <value>The content encoding.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Encoding"/>.</exception>
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.<paramref name="Encoding"/>.</exception> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Konnetic.Sip.Dialog">
            <summary>
            Represents a SIP-based call, known as a 'Dialog' in SIP parlance (formally refered to as a Call-Leg). Manages a conversation with one or many correspondents.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Dialog._state">
            <summary>
            Represents the current state of the call/conversation. Responsible for conveying infomation about the condition of the call/conversation.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Dialog._transactions">
            <summary>
            Represents the collection of message-based transactions between users. Responsible for keeping an historical record of the conversation. 
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Dialog._callId">
            <summary>
            Represents the unique Call-ID. Each Dialog is identified by a unique Call-ID, a local tag and remote tag.
            </summary>
            <remarks>
            Call-ID is case-sensitive. A single multimedia conference can give rise to several calls with different Call-IDs, for example, if a user invites a sinlge individual several times to the same conference.
            </remarks>
            <seealso cref="!:RFC3261 20.8"/>
        </member>
        <member name="F:Konnetic.Sip.Dialog._from">
            <summary>
            Represents the caller's identifier. Responsible for identifying a particular client and their human understandable display-name.
            </summary>
            <seealso cref="!:RFC3261 20.20"/>
        </member>
        <member name="F:Konnetic.Sip.Dialog._to">
            <summary>
            Represents the callee's identifier. Responsible for identifying a particular client and their human understandable display-name.
            </summary>
            <seealso cref="!:RFC3261 20.39"/>
        </member>
        <member name="M:Konnetic.Sip.Dialog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Dialog"/> class.
            </summary>
            <param name="to">The contact.</param>
        </member>
        <member name="M:Konnetic.Sip.Dialog.AddTransaction(Konnetic.Sip.Transaction)">
            <summary>
            Adds a new transaction to the dialog. 
            </summary>
            <remarks>
            If the transaction already exists then it is replaced with the new transaction.
            </remarks>
            <param name="transaction">A ClientTranaction object representing a new (INVITE) Request</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <param>transaction</param> is null.</exception>
        </member>
        <member name="P:Konnetic.Sip.Dialog.CallId">
            <summary>
            Gets or sets the conversation's unique Call-ID.
            </summary>
            <returnValue>
            An integer Call-ID of the conversation. 
            </returnValue>
            <seealso cref="!:RFC3261 20.8"/>
        </member>
        <member name="P:Konnetic.Sip.Dialog.From">
            <summary>
            Gets or sets the caller's identifier.
            </summary>
            <value>
            A string containing a SIP URI and display name.
            </value> 
            <seealso cref="!:RFC3261 20.20"/>
        </member>
        <member name="P:Konnetic.Sip.Dialog.State">
            <summary>
            Gets or sets the current state of the call/conversation.
            </summary>
            <value>
            A SessionState enumeration value.
            </value>
        </member>
        <member name="P:Konnetic.Sip.Dialog.To">
            <summary>
            Gets or sets the callee's identifier.  
            </summary>
            <value>
            A string containing a SIP URI and display name.
            </value>
            <see cref="!:RFC3261 20.39"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Konnetic.Sip.Headers.AuthHeaderFieldGroup`1" -->
        <member name="M:Konnetic.Sip.Headers.AuthHeaderFieldGroup`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:AuthHeaderFieldGroup"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
        </member>
        <member name="M:Konnetic.Sip.Headers.AuthHeaderFieldGroup`1.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the HeaderField group. This method ensures a deep copy of the group, when a message is cloned the group can be modified without effecting the original group or HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AuthHeaderFieldGroup"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.AuthHeaderFieldGroup`1.Parse(System.String)" -->
        <member name="M:Konnetic.Sip.Headers.AuthHeaderFieldGroup`1.ThrowOnSecurityGroup">
            <summary>
            Throws if the user attempts to instantiate the generic class with a security HeaderField.
            </summary>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when the user attempts to instantiate generic class with a security HeaderField.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Konnetic.Sip.Messages.ResponsePhrases">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.ResponsePhrases.Phrases">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.ResponsePhrases.#cctor">
            <summary>
            Initializes the <see cref="T:Konnetic.Sip.Messages.ResponsePhrases"/> class.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Messages.ResponsePhrases.LookupPhrase(System.Int16)">
            <summary>
            Lookups the phrase.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:Konnetic.Sip.Messages.ResponsePhrases.Register(System.Int16,System.String)">
            <summary>
            Registers the specified code.
            </summary>
            <param name="code">The code.</param>
            <param name="phrase">The phrase.</param>
        </member>
        <member name="T:Konnetic.Sip.Headers.StatusLineHeaderField">
            <summary>SIP responses are distinguished from requests by having a Status-Line as their start-line. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            A Status-Line consists of the protocol version followed by a numeric Status-Code and its associated textual phrase, with each element separated by a single SPACE character. 
            <para/>
            No CR or LF is allowed except in the final CRLF sequence.
            <para/>
            The Status-Code is a 3-digit integer result code that indicates the outcome of an attempt to understand and satisfy a request. The Reason-Phrase is intended to give a short textual description of the Status-Code. The Status-Code is intended for use by automata, whereas the Reason-Phrase is intended for the human user. A client is not required to examine or display the Reason-Phrase.
            <para/>
            While the SIP specification suggests specific wording for the reason phrase, implementations may choose other text, for example, in the language indicated in the Accept-Language HeaderField of the request. The first digit of the Status-Code defines the class of response. The last two digits do not have any categorization role. For this reason, any response with a status code between 100 and 199 is referred to as a "1xx response", any response with a status code between 200 and 299 as a "2xx response", and so on. SIP/2.0 allows six values for the first digit:
            <para/>
            <list type="bullet">
            <item><i>1xx:</i> Provisional – request received, continuing to process the request.</item>
            <item><i>2xx:</i> Success – the action was successfully received, understood, and accepted;</item>
            <item><i>3xx:</i> Redirection – further action needs to be taken in order to complete the request;</item>
            <item><i>4xx:</i> Client Error – the request contains bad syntax or cannot be fulfilled at this server;</item>
            <item><i>5xx:</i> Server Error – the server failed to fulfill an apparently valid request;</item>
            <item><i>6xx:</i> Global Failure – the request cannot be fulfilled at any server.</item>
            </list>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">SIP-Version SP Status-Code SP Reason-Phrase CRLF</td></tr> 
            <tr><td style="border-bottom:none">SIP-Version = </td><td style="border-bottom:none">"SIP" "/" 1*DIGIT "." 1*DIGIT</td></tr>
            <tr><td style="border-bottom:none">Status-Code = </td><td style="border-bottom:none">Informational / Redirection / Success / Client-Error / Server-Error / Global-Failure / extension-code</td></tr>
            <tr><td style="border-bottom:none">extension-code = </td><td style="border-bottom:none">3DIGIT</td></tr>
            <tr><td style="border-bottom:none">Reason-Phrase = </td><td style="border-bottom:none">*(ASCII / escaped / UTF8 / SPACE / TAB) ; all characters</td></tr>
            <tr><td style="border-bottom:none">escaped = </td><td style="border-bottom:none">%HEXDIG HEXDIG</td></tr> 
            <tr><td style="border-bottom:none">HEXDIG = </td><td style="border-bottom:none">DIGIT / "a" / "b" / "c" / "d" / "e" / "f"</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>SIP/2.0 200 OK</item> 
            <item>SIP/2.0 100 Trying</item> 
            </list> 
            </example>
            </remarks> 
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="F:Konnetic.Sip.Headers.StatusLineHeaderField._statusCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.StatusLineHeaderField._reasonPhrase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.StatusLineHeaderField._scheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.StatusLineHeaderField._version">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.StatusLineHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.StatusLineHeaderField"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.StatusLineHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.StatusLineHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.StatusLineHeaderField"/> populated from the passed in string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.op_Explicit(Konnetic.Sip.Headers.StatusLineHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.StatusLineHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.StatusLineHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.StatusLineHeaderField.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Headers.StatusLineHeaderField.ReasonPhrase">
            <summary>
            Gets or sets the reason phrase.
            </summary>
            <value>The reason phrase.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.StatusLineHeaderField.Scheme">
            <summary>
            Gets or sets the scheme.
            </summary>
            <value>The scheme.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.StatusLineHeaderField.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.StatusLineHeaderField.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.CallInfoPurpose">
            <summary>
            The purpose of the URI in the <see cref="T:Konnetic.Sip.Headers.CallInfoHeaderField"/> is described by the purpose enumeration.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.CallInfoPurpose.None">
            <summary>
            Default purpose.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.CallInfoPurpose.Icon">
            <summary>
            The icon enumeration designates an image suitable as an iconic representation of the caller or callee.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.CallInfoPurpose.Info">
            <summary>
            The info enumeration describes the caller or callee in general, for example, through a web page.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.CallInfoPurpose.Card">
            <summary>
            The card enumeration provides a business card, for example, in vCard or LDIF formats.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Headers.AcceptHeaderField">
            <summary>This type represents an Accept HeaderField. The Accept HeaderField field can be used to specify certain media types which are acceptable for the <see cref="T:Konnetic.Sip.Messages.Response"/>. Accept headers can be used to indicate that the <see cref="T:Konnetic.Sip.Messages.Request"/> is specifically limited to a small set of desired types, as in the case of a <see cref="T:Konnetic.Sip.Messages.Request"/> for an in-line image.</summary>
            <remarks>  
            <b>Standards: RFC3261, RFC2616</b> 
            <para/>
            The Content-Type HeaderField must be present if the body is not empty. If the body is empty, and a Content-Type HeaderField is present, it indicates that the body of the specific type has zero length (for example, an empty audio file). 
            <para/>
            The type, subtype, and parameter attribute names are case-insensitive. Parameter values might or might not be casesensitive, depending on the semantics of the parameter name. Linear white space (LWS) must not be used between the type and subtype, nor between an attribute and its value. The presence or absence of a parameter might be significant to the processing of a media-type, depending on its definition within the media type registry.
            The asterisk "*" character is used to group media types into ranges, with "*/*" indicating all media types and "type/*" indicating all subtypes of that type. The media-range may include media type parameters that are applicable to that range.
            <para/>
            Each media-range may be followed by one or more accept-params, beginning with the "q" parameter for indicating a relative quality factor. The first "q" parameter (if any) separates the media-range parameter(s) from the accept-params. Quality factors allow the user or user agent to indicate the relative degree of preference for that media-range, using the qvalue scale from 0 to 1 (<see cref="T:Konnetic.Sip.Headers.QValueHeaderField"/>). The default value is q=1.
            <para/>
            If no AcceptHeader is present, the server should assume a media of type "application" and subType "sdp". If an Accept HeaderField is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server should send a 406 (not acceptable) response.
            <span id="Example 1"> 
            <para/>
            <b>Precedence</b><para/>
            Media ranges can be overridden by more specific media ranges or specific media types. If more than one media range applies to a given type, the most specific reference has precedence. The media type quality factor associated with a given type is determined by finding the media range with the highest precedence which matches that type.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table>
            <tr><td colspan="2" style="border-bottom:none">"Accept" ":" [ accept-range *("," accept-range) ]</td></tr>
            <tr><td style="border-bottom:none">accept-range = </td><td style="border-bottom:none">media-range *(SEMI accept-param) </td></tr>
            <tr><td style="border-bottom:none">media-range = </td><td style="border-bottom:none">( "*/*" / ( m-type SLASH "*" ) / ( m-type SLASH m-subtype ) ) *( SEMI m-parameter ) </td></tr>
            <tr><td style="border-bottom:none">accept-param = </td><td style="border-bottom:none">("q" EQUAL qvalue) / generic-param </td></tr>
            <tr><td style="border-bottom:none">qvalue = </td><td style="border-bottom:none">( "0" [ "." 0*3DIGIT ] ) / ( "1" [ "." 0*3("0") ] ) </td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ] </td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string </td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" ) </td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE </td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII </td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace </td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace </td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table>
            </span>  
            <para/>  
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <span id="Example 2"><i>Accept: text/*, text/html, text/html;level=1, */*</i>
            <para/>
            Has the following precedence: 
            <list type="number">
            <item>text/html;level=1</item>
            <item>text/html</item>
            <item>text/*</item>
            <item>*/*</item> 
            </list>
            </span>	
            <para/>
            <span id="Example 3">
            <i>Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5</i>
            <p/>
            Would cause the following values to be associated:
            <list type="number">
            <item>text/html;level=1 = 1</item>
            <item>text/html = 0.7</item>
            <item>text/plain = 0.3</item>
            <item>image/jpeg = 0.5</item> 
            <item>text/html;level=2 = 0.4</item> 
            <item>text/html;level=3 = 0.7</item> 
            </list>
            <para/>
            <note type="caution">A user agent might be provided with a default set of quality values for certain media ranges. However, unless the user agent is a closed system which cannot interact with other rendering agents, this default set ought to be configurable by the user.</note>
            <para/>
            </span>	
            <para/>
            <span id="Example 4"> 
            <i>Accept: audio/*; q=0.2, audio/basic</i>
            <para/>
            Should be interpreted as "I prefer audio/basic, but send me any audio type if it is the best available after an 80% mark-down in quality." 
            <para/>
            <i>Accept: text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c</i>
            Verbally, this would be interpreted as "text/html and text/x-c are the preferred media types, but if they do not exist, then send the text/x-dvi entity, and if that does not exist, send the text/plain entity." 
            </span>	
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.QValueHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ContentEncodingHeaderField"/>
            <seealso cref="T:Konnetic.Sip.Headers.AcceptEncodingHeaderField"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sip.Konnetic.Headers.AcceptHeaderField"/> class.
            </summary>
            <remarks>The default constructor. 
            <para/>
            <b>Default Initializations:</b>
            <list type="bullet">
            <item><see cref="P:Sip.Konnetic.Headers.AcceptHeaderField.MediaType"/> is set to "application".</item> 
            <item><see cref="P:Sip.Konnetic.Headers.AcceptHeaderField.MediaSubType"/> is set to "sdp".</item> 
            </list> </remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            <remarks>The overloads allow for initialising the mediaType and mediaSubType.</remarks>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sip.Konnetic.Headers.AcceptHeaderField"/> class.
            </summary>
            <param name="mediaType">A media <see cref="T:System.String"/>.</param>
            <param name="mediaSubType">A media subtype <see cref="T:System.String"/>.</param>
            <inheritdoc select="overloads/*" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.#ctor(Konnetic.Sip.Headers.MediaType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/> class.
            </summary>
            <param name="mediaType">A media <see cref="T:Sip.Konnetic.Headers.MediaType"/>.</param>
            <param name="mediaSubType">A media subtype <see cref="T:System.String"/>.</param>
            <inheritdoc select="overloads/*"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.AcceptHeaderField">
            <summary>Performs an implicit conversion from a <see cref="T:System.String"/> to a<see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <threadsafety static="true" instance="false"/> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.op_Explicit(Konnetic.Sip.Headers.AcceptHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
            <threadsafety static="true" instance="false"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.AcceptHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.AcceptHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Accept" ":" [ accept-range *("," accept-range) ]</td></tr>
            <tr><td style="border-bottom:none">accept-range = </td><td style="border-bottom:none">media-range *(SEMI accept-param) </td></tr>
            <tr><td style="border-bottom:none">media-range = </td><td style="border-bottom:none">( "*/*" / ( m-type SLASH "*" ) / ( m-type SLASH m-subtype ) ) *( SEMI m-parameter ) </td></tr>
            <tr><td style="border-bottom:none">accept-param = </td><td style="border-bottom:none">("q" EQUAL qvalue) / generic-param </td></tr>
            <tr><td style="border-bottom:none">qvalue = </td><td style="border-bottom:none">( "0" [ "." 0*3DIGIT ] ) / ( "1" [ "." 0*3("0") ] ) </td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL gen-value ] </td></tr>
            <tr><td style="border-bottom:none">gen-value = </td><td style="border-bottom:none">token / host / quoted-string </td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" ) </td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE </td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII </td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace </td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace </td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference </td></tr>
            </table>    
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Accept: text/*, text/html, text/html;level=1, */*</item>
            <item>Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5</item>
            <item>Accept: audio/*; q=0.2, audio/basic</item>
            <item>Accept: text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c</item>
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.AcceptHeaderField.GenericParameters" -->
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.AcceptHeaderField.QValue" -->
        <member name="T:Konnetic.Sip.Headers.RequestMessageFormatter">
            <summary>
            A class that serializes a Request message instance to and from byte array format.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestMessageFormatter.#ctor(Konnetic.Sip.Messages.Request)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RequestMessageFormatter"/> class.
            </summary>
            <remarks>The default constructor.</remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestMessageFormatter.CanRead(System.Byte[])">
            <summary>
            Verifies whether the specified byte array contains a valid SipMessage item
            </summary>
            <param name="message">A byte array to check.</param>
            <returns>
            true, if the byte array contains a valid SIP Message, otherwise false.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestMessageFormatter.ReadFrom(System.Byte[])">
            <summary>
            Reads in a Konnetic.Sip.Headers.SipMessage from the specified byte array.
            </summary>
            <param name="stream">A byte array ro read.</param>
            <returns>
            A Konnetic.Sip.Headers.SipMessage created from the byte array.
            </returns>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestMessageFormatter.WriteTo(System.Byte[]@)">
            <summary>
            Writes to.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RequestMessageFormatter.WriteTo(Konnetic.Sip.Messages.SipMessage,System.Byte[])">
            <summary>
            Writes the SipMessage to the specified byte array.
            </summary>
            <param name="message">A Konnetic.Sip.Headers.SipMessage to write out to a byte array.</param>
            <param name="stream">A byte array to populate from the SipMessage</param>
        </member>
        <member name="E:Konnetic.Sip.Headers.RequestMessageFormatter.BeforeParsing">
            <summary>
            Occurs just before the formatter parses a HeaderField.
            </summary>
        </member>
        <member name="T:Konnetic.Sip.Messages.StandardResponseCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Trying">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Ringing">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.CallIsBeingForwarded">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Queued">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.SessionProgress">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Ok">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.MultipleChoices">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.MovedPermanently">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.MovedTemporarily">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.UseProxy">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.AlternativeService">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.BadRequest">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Unauthorized">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.PaymentRequired">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Forbidden">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.NotFound">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.MethodNotAllowed">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.NotAcceptableRequest">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.ProxyAuthenticationRequired">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.RequestTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Gone">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.RequestEntityTooLarge">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.RequestUriTooLong">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.UnsupportedMediaType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.UnsupportedUriScheme">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.BadExtension">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.ExtensionRequired">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.IntervalTooBrief">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.TemporarilyUnavailable">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.CallOrTransactionDoesNotExist">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.LoopDetected">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.TooManyHops">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.AddressIncomplete">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Ambiguous">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.BusyHere">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.RequestTerminated">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.NotAcceptableHere">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.RequestPending">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Undecipherable">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.ServerInternalError">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.NotImplemented">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.BadGateway">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.ServiceUnavailable">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.ServerTimeout">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.VersionNotSupported">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.MessageTooLarge">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.BusyEverywhere">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.Decline">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.DoesNotExistAnywhere">
             <summary>
            
             </summary>
        </member>
        <member name="F:Konnetic.Sip.Messages.StandardResponseCode.NotAcceptableGlobal">
             <summary>
            
             </summary>
        </member>
        <member name="T:Konnetic.Sip.NewRequestReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Konnetic.Sip.BeforeSendingResponseEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.BeforeSendingResponseEventArgs._response">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.BeforeSendingResponseEventArgs._cancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.BeforeSendingResponseEventArgs.#ctor(Konnetic.Sip.Messages.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.BeforeSendingResponseEventArgs"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="P:Konnetic.Sip.BeforeSendingResponseEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Konnetic.Sip.BeforeSendingResponseEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Konnetic.Sip.BeforeSendingResponseEventArgs.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="T:Konnetic.Sip.Messages.SuccessfulResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Messages.SuccessfulResponse.Contact">
            <summary>
            Gets or sets the contact.
            </summary>
            <value>The contact.</value>
        </member>
        <member name="F:Konnetic.Sip.Headers.SipUriParameterCollection._seperator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> collection
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> collection.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.CopyTo(Konnetic.Sip.Headers.SipParameterCollection)">
            <summary>
            Copies the contents of the collection to the <paramref name="parameters"/> <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.
            </summary>
            <param name="parameters">A <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> to populate.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the collection to the <paramref name="parameters"/>
            	<see cref="T:System.Array"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> class.
            </summary>
            <param name="seperator">The seperator.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.#ctor(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> class.
            </summary>
            <param name="parameter">Initialises and populates the collection with the first <see cref="T:Konnetic.Sip.Headers.SipParameter"/>.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.SipUriParameterCollection.Add(System.String,System.String)" -->
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Add(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the specified parameter to the <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.
            </summary>
            <param name="parameter">The parameter to add.</param>
            <returns></returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Clear">
            <summary>
            Clears this instance of all SipParameters.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Contains(System.String)">
            <summary>
            Checks if the collection contains a parameter with the specified name.
            </summary>
            <param name="name">The parameter name.</param>        
            <returns>
            	<c>true</c> if the collection contains the parameter specified; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Contains(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Checks if the collection contains a parameter.
            </summary>
            <param name="parameter">The parameter to match against.</param>
            <returns>
            	<c>true</c> if the collection contains the specified parameter; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Equals(Konnetic.Sip.Headers.SipParameterCollection)">
            <summary>
            Compare this <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> for equality with another <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> object.</summary>
            <remarks>
            All SipParameters in each collection must match, as well as the collection counts. All parameters are compared using object equality that is each parameter in the collection is used for comparision. Unless otherwise stated in the definition of a particular parameter, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.SipParameterCollection"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIPParameter collection as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> and <see cref="T:System.Object"/>.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>.
            All SipParameters in each collection must match, as well as the collection counts. All parameters are compared using object equality that is each parameter in the collection is used for comparision. Unless otherwise stated in the definition of a particular parameter, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts the parameter name\value at the index.
            </summary>
            <param name="index">The index position to insert the new parameter.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <threadsafety static="true" instance="false"/>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="name"/> is null.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Is raised when the addition of the parameter would cause a duplicate.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Konnetic.Sip.Headers.SipUriParameterCollection.Parse(System.String)" -->
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="name">The SipParameter name.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Remove(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="parameter">The parameter to remove.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Set(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a parameter with a specified name/value.
            </summary>
            <param name="index">The index position to insert the new parameter.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Set(System.String,System.String)">
            <summary>
            Adds or updates a parameter with a specified name/value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.Set(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds or updates the specified parameter to the collection.
            </summary>
            <param name="parameter">The parameter to add or update.</param>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.ToUriString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a format suitable for URIs.
            </summary>        
            <remarks>The string is escaped.</remarks>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.</returns>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <returns>
            	<c>true</c> if instance represents a valid parameter collection; otherwise, <c>false</c>.
            </returns> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.SipUriParameterCollection.ToString(System.String[])">
            <summary>
            Returns the collection as a SIP URI string.
            </summary>
            <param name="exclude">The excluded parameters.</param>
            <returns>A string representation of the collection as a SIP URI.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exclude</b> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriParameterCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriParameterCollection.Seperator">
            <summary>
            Gets the seperator between parameters.
            </summary>
            <value>The seperator between parameters.</value>
        </member>
        <member name="E:Konnetic.Sip.Headers.SipUriParameterCollection.OnChange">
            <summary>
            Occurs when the collection is altered (add, update or delete).
            </summary>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Konnetic.Sip.Headers.SipParameter"/> at the specified index.
            </summary>
            <remarks>Returns null if parameter with specified name doesn't exist.</remarks>
            <value>The <see cref="T:Konnetic.Sip.Headers.SipParameter"/> at the <param name="index"/> index in the collection.</value>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriParameterCollection.Item(System.String)">
            <summary>
            Gets specified parameter from collection. 
            </summary>
            <remarks>Returns null if parameter with specified name doesn't exist.</remarks>
            <param name="parameterName">The parameter name.</param>
            <returns>Returns parameter with specified name or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="fieldName"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:Konnetic.Sip.Headers.SipUriParameterCollection.Item(System.String,System.StringComparison)">
            <summary>
            Gets specified parameter from collection. 
            </summary>
            <remarks>Returns null if parameter with specified name doesn't exist.</remarks>
            <param name="parameterName">Parameter name.</param>
            <param name="comparisonType">The string comparision type.</param>
            <returns>Returns parameter with specified name or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <paramref value="parameterName"/> is null.</exception>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Konnetic.Sip.SipUri">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipUri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUri"/> class.
            </summary>
            <param name="uri">The SIP URI.</param>
        </member>
        <member name="M:Konnetic.Sip.SipUri.ValidateParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Validates the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.SipUri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.SipUri"/> class.
            </summary>
            <param name="uri">The URI.</param> 
        </member>
        <member name="M:Konnetic.Sip.SipUri.TryParse(System.String,Konnetic.Sip.SipUri@)">
            <summary>
            Creates a new SipUri.
            </summary>
            <param name="input">The SIP URI input.</param>
            <returns>A valid and populated SIP Uri</returns>
        </member>
        <member name="P:Konnetic.Sip.SipUri.UserName">
            <summary>
            Gets or sets the User.
            </summary>
            <value>The User.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.ExtensionHeaderField">
            <summary>A generic SIP extension header.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            This HeaderField represents an Extension SIP header not explicitly defined in the specification. A HeaderField name must be defined. The extension-header mechanism allows additional entity-HeaderFields to be defined without changing the protocol, but these fields cannot be assumed to be recognizable by the recipient. Unrecognized HeaderFields should be ignored by the recipient and must be forwarded by transparent proxies.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">header-name ":" header-value</td></tr> 
            <tr><td style="border-bottom:none">header-name = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">header-value = </td><td style="border-bottom:none">*(TEXT-UTF8char / UTF8-CONT / LWS)</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/> 
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>NewHeaderField: HeaderField Value </item>  
            </list> 
            </example>
            </remarks>  
        </member>
        <member name="F:Konnetic.Sip.Headers.ExtensionHeaderField._value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ExtensionHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.op_Explicit(Konnetic.Sip.Headers.ExtensionHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.Equals(Konnetic.Sip.Headers.ExtensionHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ExtensionHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">header-name ":" header-value</td></tr> 
            <tr><td style="border-bottom:none">header-name = </td><td style="border-bottom:none">token</td></tr>
            <tr><td style="border-bottom:none">header-value = </td><td style="border-bottom:none">*(TEXT-UTF8char / UTF8-CONT / LWS)</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr> 
            </table>  
            <para/> 
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>NewHeaderField: HeaderField Value </item> 
            <item> </item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ExtensionHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.ExtensionHeaderField.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.ContactHeaderField">
            <summary>A Contact HeaderField value provides a URI whose meaning depends on the type of <see cref="T:Konnetic.Sip.Messages.Response"/> or <see cref="T:Konnetic.Sip.Messages.Request"/> it is in. A Contact HeaderField value can contain a display name, a URI with URI parameters, and header parameters.
            </summary>
            <remarks>
            <b>Standards: RFC3261</b>
            The optional display-name is meant to be rendered by a human user interface. Even if the display-name is empty, the name-addr form must be used if the addr-spec contains a comma, question mark, or semicolon.
            <para/>
            The display name can be tokens, or a quoted string, if a larger character set is desired. Even if the display-name is empty, the name-addr form must be used if the addr-spec contains a comma, semicolon, or question mark. There may or may not be WHITESPACE between the display-name and the "&lt;". These rules for parsing a display name, URI and URI parameters, and header parameters also apply for the HeaderFields To and From.
            <b>Parameters</b>
            <para/>
            When the HeaderField value contains a display name, the URI including all URI parameters is enclosed in "&lt;" and "&gt;". If no "&lt;" and "&gt;" are present, all parameters after the URI are header parameters, not URI parameters. This document defines the Contact parameters q and expires. These parameters are only used when the Contact is present in a REGISTER <see cref="T:Konnetic.Sip.Messages.Request"/> or <see cref="T:Konnetic.Sip.Messages.Response"/>, or in a 3xx response. Additional parameters may be defined in other specifications.
            <para/>
            <b>URI</b>
            The Contact, From, and To HeaderFields contain a URI. If the URI contains a comma, question mark or semicolon, the URI must be enclosed in angle brackets (&lt; and &gt;). Any URI parameters are contained within these brackets. If the URI is not enclosed in angle brackets, any semicolon-delimited parameters are header-parameters, not URI parameters.
            <para/>
            <b>Tag Parameter</b>
            <para/>
            The tag parameter is used in the To and From HeaderFields of SIP messages. It serves as a general mechanism to identify a dialog, which is the combination of the Call-ID along with two tags, one from each participant in the dialog. When a client sends a request outside of a dialog, it contains a From tag only, providing "half" of the dialog ID. The dialog is completed from the response(s), each of which contributes the second half in the To HeaderField. The forking of SIP requests means that multiple dialogs can be established from a single request. This also explains the need for the two-sided dialog identifier; without a contribution from the recipients, the originator could not disambiguate the multiple dialogs established from a single request.
            <para/>
            When a tag is generated by a client for insertion into a request or response, it must be globally unique and cryptographically random with at least 32 bits of randomness. A property of this selection requirement is that a client will place a different tag into the From header of an INVITE than it would place into the To header of the response to the same INVITE. This is needed in order for a client to invite itself to a session, a common case for "hairpinning" of calls in PSTN gateways. Similarly, two INVITEs for different calls will have different From tags, and two responses for different calls will have different To tags. 
            <para/>
            Besides the requirement for global uniqueness, the algorithm for generating a tag is implementation-specific. Tags are helpful in fault tolerant systems, where a dialog is to be recovered on an alternate server after a failure. A server can select the tag in such a way that a backup can recognize a request as part of a dialog on the failed server, and therefore determine that it should attempt to recover the dialog and any other state associated with it.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">("Contact" / "m" ) ":" ( STAR / (contact-param *("," contact-param)))</td></tr>
            <tr><td style="border-bottom:none">contact-param = </td><td style="border-bottom:none">(name-addr / addr-spec) *(SEMI contact-params)</td></tr>
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>
            <para/>
            <note type="implementnotes">The compact form of the Contact HeaderField is "m" (for "moved").</note> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Contact: "Mr. Watson" &lt;sip:watson@worcester.bell-telephone.co&gt; ;q=0.7; expires=3600, "Mr. Watson" &lt;mailto:watson@bell-telephone.com&gt; ;q=0.1</item> 
            <item>m: &lt;sips:bob@192.0.2.4&gt;expires=60</item> 
            </list> 
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.AddressedHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.ToHeaderFieldBase"/>
            <seealso cref="T:Konnetic.Sip.Headers.FromEncodingHeaderField"/> 
        </member>
        <member name="F:Konnetic.Sip.Headers.ContactHeaderField.LongName">
            <summary>¬
            The long form of the name.
            </summary>
        </member>
        <member name="F:Konnetic.Sip.Headers.ContactHeaderField.ShortName">
            <summary>
            The short form of the name.
            </summary>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has three overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.#ctor(Konnetic.Sip.SipUri)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.#ctor(Konnetic.Sip.SipUri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ContactHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <threadsafety static="true" instance="false"/> 
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.op_Explicit(Konnetic.Sip.Headers.ContactHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
            <threadsafety static="true" instance="false"/> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.Equals(Konnetic.Sip.Headers.ContactHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ContactHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">("Contact" / "m" ) ":" ( STAR / (contact-param *("," contact-param)))</td></tr>
            <tr><td style="border-bottom:none">contact-param = </td><td style="border-bottom:none">(name-addr / addr-spec) *(SEMI contact-params)</td></tr>
            <tr><td style="border-bottom:none">name-addr = </td><td style="border-bottom:none">[ display-name ] &lt; addr-spec &gt;</td></tr>
            <tr><td style="border-bottom:none">addr-spec = </td><td style="border-bottom:none">SIP-URI / SIPS-URI / absoluteURI</td></tr>
            <tr><td style="border-bottom:none">display-name = </td><td style="border-bottom:none">*(token LWS)/ quoted-string</td></tr>
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>
            <para/>
            <note type="implementnotes">The compact form of the Contact HeaderField is "m" (for "moved").</note> 
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note> 
            <example>
            <list type="bullet">
            <item>Contact: "Mr. Watson" &lt;sip:watson@worcester.bell-telephone.co&gt; ;q=0.7; expires=3600, "Mr. Watson" &lt;mailto:watson@bell-telephone.com&gt; ;q=0.1</item> 
            <item>m: &lt;sips:bob@192.0.2.4&gt;expires=60</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContactHeaderField.Init">
            <summary>
            Initialises this instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.ContactHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.ContactHeaderField.Expires">
            <summary>
            Gets or sets the expires.
            </summary>
            <remarks>Set value to null to remove from header.</remarks>
            <value>The expires.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.ContactHeaderField.QValue">
            <summary>
            Gets or sets the Q value.
            </summary>
            <remarks>Set value to null to remove from Header field.
            <note type="caution">"Quality values" is a misnomer, since these values merely represent relative degradation in desired quality.</note> </remarks>
            <value>The Q value.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.RetryAfterHeaderField">
            <summary>The Retry-After HeaderField indicates how long a service is unavailable.
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The Retry-After HeaderField can be used with a 500 (Server Internal Error) or 503 (Service Unavailable) response to indicate how long the service is expected to be unavailable to the requesting client and with a 404 (Not Found), 413 (Request Entity Too Large), 480 (Temporarily Unavailable), 486 (Busy Here), 600 (Busy), or 603 (Decline) response to indicate when the called party anticipates being available again. The value of this field is a positive integer number of seconds (in decimal) after the time of the response.
            <para/>
            An optional comment can be used to indicate additional information about the time of callback. An optional duration parameter indicates how long the called party will be reachable starting at the initial time of availability. If no duration parameter is given, the service is assumed to be available indefinitely.
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table>
            <tr><td colspan="2" style="border-bottom:none">"Retry-After" ":" 1*DIGIT [ comment ] *( SEMI retry-param )</td></tr>
            <tr><td style="border-bottom:none">retry-param = </td><td style="border-bottom:none">("duration" EQUAL 1*DIGIT) / generic-param</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Retry-After: 18000;duration=3600</item> 
            <item>Retry-After: 120 (I'm in a meeting)</item> 
            </list> 
            </example>
            </remarks>  
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.AddParameter(System.String,System.String)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.AddParameter(Konnetic.Sip.Headers.SipParameter)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.RetryAfterHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.op_Explicit(Konnetic.Sip.Headers.RetryAfterHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.Clone">
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.Equals(Konnetic.Sip.Headers.RetryAfterHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.RetryAfterHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks> 
            <b>RFC 3261 Syntax:</b> 
            <table>
            <tr><td colspan="2" style="border-bottom:none">"Retry-After" ":" 1*DIGIT [ comment ] *( SEMI retry-param )</td></tr>
            <tr><td style="border-bottom:none">retry-param = </td><td style="border-bottom:none">("duration" EQUAL 1*DIGIT) / generic-param</td></tr>
            <tr><td style="border-bottom:none">generic-param = </td><td style="border-bottom:none">token [ EQUAL token / host / quoted-string ]</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">comment = </td><td style="border-bottom:none">&lt; *(ctext / quoted-pair / comment) &gt;</td></tr>
            <tr><td style="border-bottom:none">ctext = </td><td style="border-bottom:none">%x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII / LWS</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Retry-After: 18000;duration=3600</item> 
            <item>Retry-After: 120 (I'm in a meeting)</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.RetryAfterHeaderField.GetStringValueNoParams">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <!-- Badly formed XML comment ignored for member "P:Konnetic.Sip.Headers.RetryAfterHeaderField.GenericParameters" -->
        <member name="P:Konnetic.Sip.Headers.RetryAfterHeaderField.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.RetryAfterHeaderField.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <remarks>Set value to null to remove from header.</remarks>
            <value>The duration.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.RetryAfterHeaderField.Seconds">
            <summary>
            Gets or sets the seconds.
            </summary>
            <remarks>Set value to null to remove from header.</remarks>
            <value>The seconds.</value>
        </member>
        <member name="T:Konnetic.Sip.Headers.WarningHeaderField">
            <summary>The Warning HeaderField is used to carry additional information about the status of a response. Warning HeaderField values are sent with responses and contain a three-digit warning code, host name, and warning text. 
            </summary>
            <remarks> 
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The "warn-text" should be in a natural language that is most likely to be intelligible to the human user receiving the response. This decision can be based on any available knowledge, such as the location of the user, the Accept-Language field in a request, or the Content-Language field in a response.
            <para/>
            The currently-defined "warn-code"s are listed below, with a recommended warn-text in English and a description of their meaning. These warnings describe failures induced by the session description. The first digit of warning codes beginning with "3" indicates warnings specific to SIP.Warnings 300 through 329 are reserved for indicating problems with keywords in the session description, 330 through 339 are warnings related to basic network services requested in the session description, 370 through 379 are warnings related to quantitative QoS parameters requested in the session description, and 390 through 399 are miscellaneous warnings that do not fall into one of the above categories.
            <para/>
            <note type="caution">1xx and 2xx have been taken by HTTP/1.1.</note>
            <para/>
            <list type="bullet">
            <item><b>300 Incompatible network protocol:</b> One or more network protocols contained in the session description are not available.</item>
            <item><b>301 Incompatible network address formats:</b> One or more network address formats contained in the session description are not available.</item>
            <item><b>302 Incompatible transport protocol:</b> One or more transport protocols described in the session description are not available.</item>
            <item><b>303 Incompatible bandwidth units:</b> One or more bandwidth measurement units contained in the session description were not understood.</item>
            <item><b>304 Media type not available:</b> One or more media types contained in the session description are not available. 305 Incompatible media format: One or more media formats contained in the session description are not available.</item>
            <item><b>305 Incompatible media format:</b> One or more media formats contained in the session description are not available.</item>
            <item><b>306 Attribute not understood:</b> One or more of the media attributes in the session description are not supported. 307 Session description parameter not understood: A parameter other than those listed above was not understood.</item>
            <item><b>330 Multicast not available:</b> The site where the user is located does not support multicast.</item>
            <item><b>331 Unicast not available:</b> The site where the user is located does not support unicast communication (usually due to the presence of a firewall).</item>
            <item><b>370 Insufficient bandwidth:</b> The bandwidth specified in the session description or defined by the media exceeds that known to be available.</item>
            <item><b>399 Miscellaneous warning:</b> The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning must not take any automated action.</item>
            </list>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Warning" ":" warning-value *("," warning-value)</td></tr> 
            <tr><td style="border-bottom:none">warning-value = </td><td style="border-bottom:none">3DIGIT SPACE warn-agent SPACE quoted-string</td></tr> 
            <tr><td style="border-bottom:none">warn-agent = </td><td style="border-bottom:none">hostport / pseudonym ; the name or pseudonym of the server adding ; the Warning header, for use in debugging</td></tr>
            <tr><td style="border-bottom:none">pseudonym = </td><td style="border-bottom:none">token</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            <tr><td style="border-bottom:none">port = </td><td style="border-bottom:none">1*DIGIT</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>Warning: 307 isi.edu "Session parameter 'foo' not understood"</item>
            <item>Warning: 301 isi.edu "Incompatible network address type 'E.164'"</item>
            </list>
            </example>
            </remarks>
            <seealso cref="T:Konnetic.Sip.Headers.MediaTypeHeaderFieldBase"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has two overloads.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.#ctor(Konnetic.Sip.Headers.SipWarningCode,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="agent">The agent.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.#ctor(System.Nullable{System.Int16},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="agent">The agent.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.WarningHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.op_Explicit(Konnetic.Sip.Headers.WarningHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.Clone">
            <summary>
            Creates a deep copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.Equals(Konnetic.Sip.Headers.WarningHeaderField)">
            <summary>
             Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> object.</summary>
             <remarks>
             All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
             </remarks>
             <param name="other">The <see cref="T:Konnetic.Sip.Headers.WarningHeaderField"/> to compare to this instance.</param>
             <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
             <overloads>
             <summary>This method is overloaded.</summary>
             <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
             </overloads>  
             <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">"Warning" ":" warning-value *("," warning-value)</td></tr> 
            <tr><td style="border-bottom:none">warning-value = </td><td style="border-bottom:none">3DIGIT SPACE warn-agent SPACE quoted-string</td></tr> 
            <tr><td style="border-bottom:none">warn-agent = </td><td style="border-bottom:none">hostport / pseudonym ; the name or pseudonym of the server adding ; the Warning header, for use in debugging</td></tr>
            <tr><td style="border-bottom:none">pseudonym = </td><td style="border-bottom:none">token</td></tr> 
            <tr><td style="border-bottom:none">token = </td><td style="border-bottom:none">1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "‘" / "'" / "˜" )</td></tr>
            <tr><td style="border-bottom:none">quoted-string = </td><td style="border-bottom:none">SWS DOUBLE_QUOTE *(qdtext / quoted-pair ) DOUBLE_QUOTE</td></tr>
            <tr><td style="border-bottom:none">qdtext = </td><td style="border-bottom:none">LWS / %x21 / %x23-5B / %x5D-7E / UTF8-NONASCII</td></tr>
            <tr><td style="border-bottom:none">LWS = </td><td style="border-bottom:none">[*WSP CRLF] 1*WSP ; linear whitespace</td></tr>
            <tr><td style="border-bottom:none">SWS = </td><td style="border-bottom:none">[LWS] ; sep whitespace</td></tr>
            <tr><td style="border-bottom:none">host = </td><td style="border-bottom:none">hostname / IPv4address / IPv6reference</td></tr>
            <tr><td style="border-bottom:none">port = </td><td style="border-bottom:none">1*DIGIT</td></tr>
            </table>  
            <para/>
            <note type="implementnotes">This HeaderField allows HeaderField grouping (<see cref="T:Konnetic.Sip.Headers.HeaderFieldGroup{T}"/>).</note>
            <example>
            <list type="bullet">
            <item>Warning: 307 isi.edu "Session parameter 'foo' not understood"</item>
            <item>Warning: 301 isi.edu "Incompatible network address type 'E.164'"</item>
            </list>
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.WarningHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.WarningHeaderField.Agent">
            <summary>
            Gets or sets the agent.
            </summary>
            <value>The agent.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Agent"/>.</exception> 
            <exception cref="T:Konnetic.Sip.SipFormatException">Thrown when a user attempts to add non-token characters.</exception>
        </member>
        <member name="P:Konnetic.Sip.Headers.WarningHeaderField.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Konnetic.Sip.Headers.WarningHeaderField.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="Text"/>.</exception> 
        </member>
        <member name="T:Konnetic.Sip.Headers.ContentLengthHeaderField">
            <summary>
            The Content-Length HeaderField indicates the size of the message-body, in decimal number of octets, sent to the recipient. Applications should use this field to indicate the size of the message-body to be transferred, regardless of the media type of the entity. If a stream-based protocol (such as TCP) is used as transport, the HeaderField must be used.
            </summary>
            <remarks>
            <b>Standards: RFC3261, RFC2616</b>
            <para/>
            The size of the message-body does not include the CRLF separating HeaderFields and body. Any Content-Length greater than or equal to zero is a valid value. If no body is present in a message, then the Content-Length HeaderField value must be set to zero.
            <i>The ability to omit Content-Length simplifies the creation of cgi-like scripts that dynamically generate responses.</i> 
            <para/>
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Content-Length" / "l" ) ":" 1*DIGIT</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Content-Length HeaderField is "l".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Content-Length: 349</item> 
            <item>l: 173</item> 
            </list> 
            </example>
            </remarks> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/> class.
            </summary>
            <remarks>The default constructor.</remarks>
            <overloads>
            <summary>The method has one overload.</summary>
            </overloads>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.op_Implicit(System.String)~Konnetic.Sip.Headers.ContentLengthHeaderField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/>.
            </summary>
            <param name="value">The string value representing the HeaderField.</param>
            <returns>A new <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/> populated from the <paramref name="value"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="value"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.op_Explicit(Konnetic.Sip.Headers.ContentLengthHeaderField)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="headerField">The HeaderField to convert.</param>
            <returns>A string representation of the HeaderField.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown on null (<b>Nothing</b> in Visual Basic) <paramref name="headerField"/>.</exception>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.Clone">
            <summary>
            Creates a deap  copy of this instance.
            </summary> 
            <remarks>Creates and returns a deep copy of the Header. This method ensures a deep copy of the HeaderField, when a message is cloned the HeaderField can be modified without effecting the original HeaderField in the message.</remarks>
            <returns>A deep copy of <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/>.</returns>
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.Equals(Konnetic.Sip.Headers.ContentLengthHeaderField)">
            <summary>
            Compare this SIP Header for equality with another <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/> object.</summary>
            <remarks>
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.ContentLengthHeaderField"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>    
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.Equals(Konnetic.Sip.Headers.HeaderFieldBase)">
            <summary>Compare this SIP Header for equality with the base <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="other">The <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="other" /> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise.</returns>
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads>  
            <threadsafety static="true" instance="false" /> 
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.Equals(System.Object)">
            <summary>Compare this SIP Header for equality with an instance of <see cref="T:System.Object"/>.
            </summary>
            <remarks>This method overrides the <c>equals</c> method in <see cref="T:System.Object"/>. 
            All optional headers are compared using object equality that is each field in the header is used for comparision. When comparing HeaderFields, field names are always case-insensitive. Unless otherwise stated in the definition of a particular HeaderField, field values, parameter names, and parameter values are case-insensitive. Tokens are always case-insensitive. Unless specified otherwise, values expressed as quoted strings are case-sensitive. 
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of this class representing the same SIP HeaderField as this, <c>false</c> otherwise. </returns>        
            <overloads>
            <summary>This method is overloaded.</summary>
            <remarks>Overloads allow for equality against <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>, <see cref="T:System.Object"/> and another instance of this HeaderField.</remarks>
            </overloads> 
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.IsValid">
            <summary>
            Validates this instance against the standard. Indicated whether it reaches minimum compliance.
            </summary>
            <remarks>This member overrides the <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/> instance.</remarks>
            <returns>
            	<c>true</c> if instance represents a valid HeaderField; otherwise, <c>false</c>.
            </returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.Parse(System.String)">
            <summary>
            Parses string representation of the HeaderField.
            </summary>
            <remarks>  
            <b>RFC 3261 Syntax:</b> 
            <table >
            <tr><td colspan="2" style="border-bottom:none">( "Content-Length" / "l" ) ":" 1*DIGIT</td></tr> 
            </table>  
            <para/>
            <note type="implementnotes">The compact form of the Content-Length HeaderField is "l".</note> 
            <para/>
            <note type="implementnotes">This HeaderField does not allow HeaderField grouping.</note> 
            <example>
            <list type="bullet">
            <item>Content-Length: 349</item> 
            <item>l: 173</item> 
            </list> 
            </example>
            </remarks>
            <param name="value">The HeaderField string to parse.</param>
            <exception cref="T:Konnetic.Sip.SipParseException">Thrown when an invalid (non-standard) value is encountered.</exception>
            <exception cref="T:Konnetic.Sip.SipException">Thrown when a processing exception is encountered.</exception>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:Konnetic.Sip.Headers.ContentLengthHeaderField.GetStringValue">
            <summary>
            Gets a string representation of the HeaderField value. The HeaderField name is excluded.
            </summary>
            <remarks>This method overrides the <c>GetStringValue</c> method in <see cref="T:Konnetic.Sip.Headers.HeaderFieldBase"/>. </remarks>
            <returns>String representation of the HeaderField value</returns>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="P:Konnetic.Sip.Headers.ContentLengthHeaderField.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <remarks>Set value to null to remove from header field.</remarks>
            <value>The length.</value>
        </member>
        <member name="T:Konnetic.Sip.SipGuid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Konnetic.Sip.SipGuid.PROCESSINGGAP">
            <summary>
            
            </summary>
        </member>
        <member name="M:Konnetic.Sip.SipGuid.NewIntSipGuid">
            <summary>
            New int SIP GUID.
            </summary>
            <remarks>Returns a cryptographically unique 32bit numeric. Ensures adequate process gap to to max int</remarks>
            <returns>Cryptographically unique 32bit numeric</returns>
        </member>
        <member name="M:Konnetic.Sip.SipGuid.NewSipGuid(System.String,System.String)">
            <summary>
            New SIP GUID.
            </summary>
            <param name="prefix">The prefix for the eventual GUID.</param>
            <param name="suffix">The suffix for the eventual GUID.</param>
            <returns>Cryptographically unique 32bit numeric pre and postfixed by arguments</returns>
        </member>
        <member name="M:Konnetic.Sip.SipGuid.NewSipGuid">
            <summary>
            New SIP GUID.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
